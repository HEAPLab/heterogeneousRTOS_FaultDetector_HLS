// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_insert_point_Pipeline_insert_point_label4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_122,
        regions_min_0_address0,
        regions_min_0_ce0,
        regions_min_0_we0,
        regions_min_0_d0,
        regions_min_1_address0,
        regions_min_1_ce0,
        regions_min_1_we0,
        regions_min_1_d0,
        regions_max_0_address0,
        regions_max_0_ce0,
        regions_max_0_we0,
        regions_max_0_d0,
        regions_max_1_address0,
        regions_max_1_ce0,
        regions_max_1_we0,
        regions_max_1_d0,
        regions_center_0_address0,
        regions_center_0_ce0,
        regions_center_0_we0,
        regions_center_0_d0,
        regions_center_1_address0,
        regions_center_1_ce0,
        regions_center_1_we0,
        regions_center_1_d0,
        d_read,
        d_read_8,
        d_read_9,
        d_read_10,
        d_read_11,
        d_read_12,
        d_read_13,
        d_read_14,
        n_regions_load_cast
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] tmp_122;
output  [11:0] regions_min_0_address0;
output   regions_min_0_ce0;
output   regions_min_0_we0;
output  [31:0] regions_min_0_d0;
output  [11:0] regions_min_1_address0;
output   regions_min_1_ce0;
output   regions_min_1_we0;
output  [31:0] regions_min_1_d0;
output  [11:0] regions_max_0_address0;
output   regions_max_0_ce0;
output   regions_max_0_we0;
output  [31:0] regions_max_0_d0;
output  [11:0] regions_max_1_address0;
output   regions_max_1_ce0;
output   regions_max_1_we0;
output  [31:0] regions_max_1_d0;
output  [11:0] regions_center_0_address0;
output   regions_center_0_ce0;
output   regions_center_0_we0;
output  [31:0] regions_center_0_d0;
output  [11:0] regions_center_1_address0;
output   regions_center_1_ce0;
output   regions_center_1_we0;
output  [31:0] regions_center_1_d0;
input  [31:0] d_read;
input  [31:0] d_read_8;
input  [31:0] d_read_9;
input  [31:0] d_read_10;
input  [31:0] d_read_11;
input  [31:0] d_read_12;
input  [31:0] d_read_13;
input  [31:0] d_read_14;
input  [0:0] n_regions_load_cast;

reg ap_idle;
reg regions_min_0_ce0;
reg regions_min_0_we0;
reg regions_min_1_ce0;
reg regions_min_1_we0;
reg regions_max_0_ce0;
reg regions_max_0_we0;
reg regions_max_1_ce0;
reg regions_max_1_we0;
reg regions_center_0_ce0;
reg regions_center_0_we0;
reg regions_center_1_ce0;
reg regions_center_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln247_fu_216_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln248_1_fu_238_p1;
reg   [3:0] i_2_fu_66;
wire   [3:0] add_ln247_fu_222_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [0:0] n_regions_load_cast_read_read_fu_70_p2;
wire   [31:0] tmp_fu_248_p10;
wire   [11:0] zext_ln248_fu_228_p1;
wire   [11:0] add_ln248_fu_232_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

run_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U18(
    .din0(d_read),
    .din1(d_read_8),
    .din2(d_read_9),
    .din3(d_read_10),
    .din4(d_read_11),
    .din5(d_read_12),
    .din6(d_read_13),
    .din7(d_read_14),
    .din8(ap_sig_allocacmp_i),
    .dout(tmp_fu_248_p10)
);

run_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln247_fu_216_p2 == 1'd0)) begin
            i_2_fu_66 <= add_ln247_fu_222_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_66 <= 4'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_66;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        regions_center_0_ce0 = 1'b1;
    end else begin
        regions_center_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (n_regions_load_cast_read_read_fu_70_p2 == 1'd0))) begin
        regions_center_0_we0 = 1'b1;
    end else begin
        regions_center_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        regions_center_1_ce0 = 1'b1;
    end else begin
        regions_center_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (n_regions_load_cast_read_read_fu_70_p2 == 1'd1))) begin
        regions_center_1_we0 = 1'b1;
    end else begin
        regions_center_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        regions_max_0_ce0 = 1'b1;
    end else begin
        regions_max_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (n_regions_load_cast_read_read_fu_70_p2 == 1'd0))) begin
        regions_max_0_we0 = 1'b1;
    end else begin
        regions_max_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        regions_max_1_ce0 = 1'b1;
    end else begin
        regions_max_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (n_regions_load_cast_read_read_fu_70_p2 == 1'd1))) begin
        regions_max_1_we0 = 1'b1;
    end else begin
        regions_max_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        regions_min_0_ce0 = 1'b1;
    end else begin
        regions_min_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (n_regions_load_cast_read_read_fu_70_p2 == 1'd0))) begin
        regions_min_0_we0 = 1'b1;
    end else begin
        regions_min_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        regions_min_1_ce0 = 1'b1;
    end else begin
        regions_min_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1) & (n_regions_load_cast_read_read_fu_70_p2 == 1'd1))) begin
        regions_min_1_we0 = 1'b1;
    end else begin
        regions_min_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln247_fu_222_p2 = (ap_sig_allocacmp_i + 4'd1);

assign add_ln248_fu_232_p2 = (tmp_122 + zext_ln248_fu_228_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln247_fu_216_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign n_regions_load_cast_read_read_fu_70_p2 = n_regions_load_cast;

assign regions_center_0_address0 = zext_ln248_1_fu_238_p1;

assign regions_center_0_d0 = tmp_fu_248_p10;

assign regions_center_1_address0 = zext_ln248_1_fu_238_p1;

assign regions_center_1_d0 = tmp_fu_248_p10;

assign regions_max_0_address0 = zext_ln248_1_fu_238_p1;

assign regions_max_0_d0 = tmp_fu_248_p10;

assign regions_max_1_address0 = zext_ln248_1_fu_238_p1;

assign regions_max_1_d0 = tmp_fu_248_p10;

assign regions_min_0_address0 = zext_ln248_1_fu_238_p1;

assign regions_min_0_d0 = tmp_fu_248_p10;

assign regions_min_1_address0 = zext_ln248_1_fu_238_p1;

assign regions_min_1_d0 = tmp_fu_248_p10;

assign zext_ln248_1_fu_238_p1 = add_ln248_fu_232_p2;

assign zext_ln248_fu_228_p1 = ap_sig_allocacmp_i;

endmodule //run_insert_point_Pipeline_insert_point_label4
