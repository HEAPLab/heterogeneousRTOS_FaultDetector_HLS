-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_insert_point_Pipeline_insert_point_label6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    trunc_ln256_5 : IN STD_LOGIC_VECTOR (0 downto 0);
    trunc_ln256_7 : IN STD_LOGIC_VECTOR (0 downto 0);
    tmp_128 : IN STD_LOGIC_VECTOR (11 downto 0);
    regions_min_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_min_0_ce0 : OUT STD_LOGIC;
    regions_min_0_we0 : OUT STD_LOGIC;
    regions_min_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_min_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_min_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_min_0_ce1 : OUT STD_LOGIC;
    regions_min_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_131 : IN STD_LOGIC_VECTOR (11 downto 0);
    regions_min_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_min_1_ce0 : OUT STD_LOGIC;
    regions_min_1_we0 : OUT STD_LOGIC;
    regions_min_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_min_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_min_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_min_1_ce1 : OUT STD_LOGIC;
    regions_min_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_max_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_max_0_ce0 : OUT STD_LOGIC;
    regions_max_0_we0 : OUT STD_LOGIC;
    regions_max_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_max_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_max_0_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_max_0_ce1 : OUT STD_LOGIC;
    regions_max_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_max_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_max_1_ce0 : OUT STD_LOGIC;
    regions_max_1_we0 : OUT STD_LOGIC;
    regions_max_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_max_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_max_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_max_1_ce1 : OUT STD_LOGIC;
    regions_max_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_center_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_center_0_ce0 : OUT STD_LOGIC;
    regions_center_0_we0 : OUT STD_LOGIC;
    regions_center_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_center_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_center_1_ce0 : OUT STD_LOGIC;
    regions_center_1_we0 : OUT STD_LOGIC;
    regions_center_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1723_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1723_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1723_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1723_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1723_p_ce : OUT STD_LOGIC;
    grp_fu_1739_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1739_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1739_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1739_p_ce : OUT STD_LOGIC;
    grp_fu_1711_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1711_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1711_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_1711_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_1711_p_ce : OUT STD_LOGIC );
end;


architecture behav of run_insert_point_Pipeline_insert_point_label6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln353_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal empty_62_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln256_5_read_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_531_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_531_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_531_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal regions_min_0_addr_1_reg_540 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_min_0_addr_1_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_min_1_addr_1_reg_550 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_min_1_addr_1_reg_550_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_max_0_addr_1_reg_560 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_max_0_addr_1_reg_560_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_max_1_addr_1_reg_570 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_max_1_addr_1_reg_570_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_0_addr_reg_575 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_0_addr_reg_575_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_0_addr_reg_575_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_0_addr_reg_575_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_0_addr_reg_575_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_1_addr_reg_580 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_1_addr_reg_580_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_1_addr_reg_580_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_1_addr_reg_580_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_center_1_addr_reg_580_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_310_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_320_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_330_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_339_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln354_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln354_1_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln357_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_empty_62_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_62_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln354_1_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln354_2_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln353_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln354_fu_271_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln354_fu_275_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln354_1_fu_289_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln354_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln354_1_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln354_fu_361_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln354_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln354_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln354_1_fu_378_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln354_3_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln354_2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln354_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln354_1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln354_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln357_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln357_1_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_433_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln357_fu_443_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln357_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln357_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln357_1_fu_460_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln357_3_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln357_2_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln357_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln357_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln357_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_247_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_253 : BOOLEAN;
    signal ap_condition_459 : BOOLEAN;
    signal ap_condition_462 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component run_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_21_32_1_1_U70 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_min_0_q1,
        din1 => regions_min_1_q1,
        din2 => trunc_ln256_7,
        dout => tmp_s_fu_310_p4);

    mux_21_32_1_1_U71 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_min_0_q0,
        din1 => regions_min_1_q0,
        din2 => trunc_ln256_5,
        dout => tmp_10_fu_320_p4);

    mux_21_32_1_1_U72 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_max_0_q1,
        din1 => regions_max_1_q1,
        din2 => trunc_ln256_7,
        dout => tmp_14_fu_330_p4);

    mux_21_32_1_1_U73 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_max_0_q0,
        din1 => regions_max_1_q0,
        din2 => trunc_ln256_5,
        dout => tmp_15_fu_339_p4);

    flow_control_loop_pipe_sequential_init_U : component run_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_62_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln353_reg_531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln354_1_fu_424_p2))) then 
                ap_phi_reg_pp0_iter1_empty_62_reg_216 <= tmp_10_reg_594;
            elsif (((ap_const_lv1_1 = and_ln354_1_fu_424_p2) and (icmp_ln353_reg_531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_empty_62_reg_216 <= tmp_s_reg_585;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter1_empty_62_reg_216 <= ap_phi_reg_pp0_iter0_empty_62_reg_216;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_253)) then
                if (((ap_const_lv1_0 = and_ln357_1_fu_506_p2) and (icmp_ln353_reg_531_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_empty_reg_226 <= tmp_15_reg_610;
                elsif (((ap_const_lv1_1 = and_ln357_1_fu_506_p2) and (icmp_ln353_reg_531_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_empty_reg_226 <= tmp_14_reg_601;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_empty_reg_226 <= ap_phi_reg_pp0_iter1_empty_reg_226;
                end if;
            end if; 
        end if;
    end process;

    i_3_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln353_fu_259_p2 = ap_const_lv1_0))) then 
                    i_3_fu_64 <= add_ln353_fu_265_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_64 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_reg_625 <= grp_fu_1723_p_dout0;
                conv_reg_630 <= grp_fu_1739_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln353_reg_531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln354_1_reg_617 <= and_ln354_1_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_empty_reg_226 <= ap_phi_reg_pp0_iter0_empty_reg_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                empty_62_reg_216 <= ap_phi_reg_pp0_iter1_empty_62_reg_216;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln353_reg_531 <= icmp_ln353_fu_259_p2;
                icmp_ln353_reg_531_pp0_iter1_reg <= icmp_ln353_reg_531;
                icmp_ln353_reg_531_pp0_iter2_reg <= icmp_ln353_reg_531_pp0_iter1_reg;
                icmp_ln353_reg_531_pp0_iter3_reg <= icmp_ln353_reg_531_pp0_iter2_reg;
                regions_center_0_addr_reg_575_pp0_iter1_reg <= regions_center_0_addr_reg_575;
                regions_center_0_addr_reg_575_pp0_iter2_reg <= regions_center_0_addr_reg_575_pp0_iter1_reg;
                regions_center_0_addr_reg_575_pp0_iter3_reg <= regions_center_0_addr_reg_575_pp0_iter2_reg;
                regions_center_0_addr_reg_575_pp0_iter4_reg <= regions_center_0_addr_reg_575_pp0_iter3_reg;
                regions_center_1_addr_reg_580_pp0_iter1_reg <= regions_center_1_addr_reg_580;
                regions_center_1_addr_reg_580_pp0_iter2_reg <= regions_center_1_addr_reg_580_pp0_iter1_reg;
                regions_center_1_addr_reg_580_pp0_iter3_reg <= regions_center_1_addr_reg_580_pp0_iter2_reg;
                regions_center_1_addr_reg_580_pp0_iter4_reg <= regions_center_1_addr_reg_580_pp0_iter3_reg;
                regions_max_0_addr_1_reg_560_pp0_iter1_reg <= regions_max_0_addr_1_reg_560;
                regions_max_1_addr_1_reg_570_pp0_iter1_reg <= regions_max_1_addr_1_reg_570;
                regions_min_0_addr_1_reg_540_pp0_iter1_reg <= regions_min_0_addr_1_reg_540;
                regions_min_1_addr_1_reg_550_pp0_iter1_reg <= regions_min_1_addr_1_reg_550;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln353_fu_259_p2 = ap_const_lv1_0))) then
                regions_center_0_addr_reg_575 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
                regions_center_1_addr_reg_580 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
                regions_max_0_addr_1_reg_560 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
                regions_max_1_addr_1_reg_570 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
                regions_min_0_addr_1_reg_540 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
                regions_min_1_addr_1_reg_550 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln353_reg_531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_10_reg_594 <= tmp_10_fu_320_p4;
                tmp_14_reg_601 <= tmp_14_fu_330_p4;
                tmp_15_reg_610 <= tmp_15_fu_339_p4;
                tmp_s_reg_585 <= tmp_s_fu_310_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter4_stage0, ap_idle_pp0_0to3, ap_idle_pp0_1to5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln353_fu_265_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln354_1_fu_289_p2 <= std_logic_vector(unsigned(tmp_131) + unsigned(zext_ln354_fu_271_p1));
    add_ln354_fu_275_p2 <= std_logic_vector(unsigned(tmp_128) + unsigned(zext_ln354_fu_271_p1));
    and_ln354_1_fu_424_p2 <= (grp_fu_1711_p_dout0 and and_ln354_fu_418_p2);
    and_ln354_fu_418_p2 <= (or_ln354_fu_394_p2 and or_ln354_1_fu_412_p2);
    and_ln357_1_fu_506_p2 <= (grp_fu_1711_p_dout0 and and_ln357_fu_500_p2);
    and_ln357_fu_500_p2 <= (or_ln357_fu_476_p2 and or_ln357_1_fu_494_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_253_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_253 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_459_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_00001)
    begin
                ap_condition_459 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_462_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_00001)
    begin
                ap_condition_462 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln353_reg_531)
    begin
        if (((icmp_ln353_reg_531 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln353_reg_531_pp0_iter3_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln353_reg_531_pp0_iter3_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_empty_62_reg_216 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_reg_226 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_3_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_64;
        end if; 
    end process;

    bitcast_ln354_1_fu_365_p1 <= tmp_10_reg_594;
    bitcast_ln354_fu_348_p1 <= tmp_s_reg_585;
    bitcast_ln357_1_fu_447_p1 <= tmp_15_reg_610;
    bitcast_ln357_fu_430_p1 <= tmp_14_reg_601;
    grp_fu_1711_p_ce <= ap_const_logic_1;
    grp_fu_1711_p_din0 <= grp_fu_247_p0;
    grp_fu_1711_p_din1 <= grp_fu_247_p1;
    grp_fu_1711_p_opcode <= grp_fu_247_opcode;
    grp_fu_1723_p_ce <= ap_const_logic_1;
    grp_fu_1723_p_din0 <= ap_phi_reg_pp0_iter2_empty_reg_226;
    grp_fu_1723_p_din1 <= empty_62_reg_216;
    grp_fu_1723_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_1739_p_ce <= ap_const_logic_1;
    grp_fu_1739_p_din0 <= add_reg_625;
    grp_fu_1739_p_din1 <= ap_const_lv32_3F000000;

    grp_fu_247_opcode_assign_proc : process(icmp_ln353_reg_531, ap_condition_459, ap_condition_462)
    begin
        if ((icmp_ln353_reg_531 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_462)) then 
                grp_fu_247_opcode <= ap_const_lv5_2;
            elsif ((ap_const_boolean_1 = ap_condition_459)) then 
                grp_fu_247_opcode <= ap_const_lv5_4;
            else 
                grp_fu_247_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_247_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_247_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp_s_fu_310_p4, tmp_14_reg_601, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_247_p0 <= tmp_14_reg_601;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_247_p0 <= tmp_s_fu_310_p4;
        else 
            grp_fu_247_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_247_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp_10_fu_320_p4, tmp_15_reg_610, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_247_p1 <= tmp_15_reg_610;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_247_p1 <= tmp_10_fu_320_p4;
        else 
            grp_fu_247_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln353_fu_259_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_8) else "0";
    icmp_ln354_1_fu_388_p2 <= "1" when (trunc_ln354_fu_361_p1 = ap_const_lv23_0) else "0";
    icmp_ln354_2_fu_400_p2 <= "0" when (tmp_12_fu_368_p4 = ap_const_lv8_FF) else "1";
    icmp_ln354_3_fu_406_p2 <= "1" when (trunc_ln354_1_fu_378_p1 = ap_const_lv23_0) else "0";
    icmp_ln354_fu_382_p2 <= "0" when (tmp_11_fu_351_p4 = ap_const_lv8_FF) else "1";
    icmp_ln357_1_fu_470_p2 <= "1" when (trunc_ln357_fu_443_p1 = ap_const_lv23_0) else "0";
    icmp_ln357_2_fu_482_p2 <= "0" when (tmp_17_fu_450_p4 = ap_const_lv8_FF) else "1";
    icmp_ln357_3_fu_488_p2 <= "1" when (trunc_ln357_1_fu_460_p1 = ap_const_lv23_0) else "0";
    icmp_ln357_fu_464_p2 <= "0" when (tmp_16_fu_433_p4 = ap_const_lv8_FF) else "1";
    or_ln354_1_fu_412_p2 <= (icmp_ln354_3_fu_406_p2 or icmp_ln354_2_fu_400_p2);
    or_ln354_fu_394_p2 <= (icmp_ln354_fu_382_p2 or icmp_ln354_1_fu_388_p2);
    or_ln357_1_fu_494_p2 <= (icmp_ln357_3_fu_488_p2 or icmp_ln357_2_fu_482_p2);
    or_ln357_fu_476_p2 <= (icmp_ln357_fu_464_p2 or icmp_ln357_1_fu_470_p2);
    regions_center_0_address0 <= regions_center_0_addr_reg_575_pp0_iter4_reg;

    regions_center_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_center_0_ce0 <= ap_const_logic_1;
        else 
            regions_center_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    regions_center_0_d0 <= conv_reg_630;

    regions_center_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, trunc_ln256_5_read_reg_525)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln256_5_read_reg_525 = ap_const_lv1_0))) then 
            regions_center_0_we0 <= ap_const_logic_1;
        else 
            regions_center_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    regions_center_1_address0 <= regions_center_1_addr_reg_580_pp0_iter4_reg;

    regions_center_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_center_1_ce0 <= ap_const_logic_1;
        else 
            regions_center_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    regions_center_1_d0 <= conv_reg_630;

    regions_center_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, trunc_ln256_5_read_reg_525)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln256_5_read_reg_525 = ap_const_lv1_1))) then 
            regions_center_1_we0 <= ap_const_logic_1;
        else 
            regions_center_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_max_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, regions_max_0_addr_1_reg_560_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln354_2_fu_295_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            regions_max_0_address0 <= regions_max_0_addr_1_reg_560_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_max_0_address0 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
        else 
            regions_max_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    regions_max_0_address1 <= zext_ln354_1_fu_281_p1(12 - 1 downto 0);

    regions_max_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            regions_max_0_ce0 <= ap_const_logic_1;
        else 
            regions_max_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_max_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_max_0_ce1 <= ap_const_logic_1;
        else 
            regions_max_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    regions_max_0_d0 <= tmp_14_reg_601;

    regions_max_0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln256_5_read_reg_525, and_ln357_1_fu_506_p2)
    begin
        if (((ap_const_lv1_1 = and_ln357_1_fu_506_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln256_5_read_reg_525 = ap_const_lv1_0))) then 
            regions_max_0_we0 <= ap_const_logic_1;
        else 
            regions_max_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_max_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, regions_max_1_addr_1_reg_570_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln354_2_fu_295_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            regions_max_1_address0 <= regions_max_1_addr_1_reg_570_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_max_1_address0 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
        else 
            regions_max_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    regions_max_1_address1 <= zext_ln354_1_fu_281_p1(12 - 1 downto 0);

    regions_max_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            regions_max_1_ce0 <= ap_const_logic_1;
        else 
            regions_max_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_max_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_max_1_ce1 <= ap_const_logic_1;
        else 
            regions_max_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    regions_max_1_d0 <= tmp_14_reg_601;

    regions_max_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln256_5_read_reg_525, and_ln357_1_fu_506_p2)
    begin
        if (((ap_const_lv1_1 = and_ln357_1_fu_506_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln256_5_read_reg_525 = ap_const_lv1_1))) then 
            regions_max_1_we0 <= ap_const_logic_1;
        else 
            regions_max_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_min_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, regions_min_0_addr_1_reg_540_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln354_2_fu_295_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            regions_min_0_address0 <= regions_min_0_addr_1_reg_540_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_min_0_address0 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
        else 
            regions_min_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    regions_min_0_address1 <= zext_ln354_1_fu_281_p1(12 - 1 downto 0);

    regions_min_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            regions_min_0_ce0 <= ap_const_logic_1;
        else 
            regions_min_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_min_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_min_0_ce1 <= ap_const_logic_1;
        else 
            regions_min_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    regions_min_0_d0 <= tmp_s_reg_585;

    regions_min_0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln256_5_read_reg_525, and_ln354_1_reg_617)
    begin
        if (((ap_const_lv1_1 = and_ln354_1_reg_617) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln256_5_read_reg_525 = ap_const_lv1_0))) then 
            regions_min_0_we0 <= ap_const_logic_1;
        else 
            regions_min_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_min_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, regions_min_1_addr_1_reg_550_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln354_2_fu_295_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            regions_min_1_address0 <= regions_min_1_addr_1_reg_550_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_min_1_address0 <= zext_ln354_2_fu_295_p1(12 - 1 downto 0);
        else 
            regions_min_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    regions_min_1_address1 <= zext_ln354_1_fu_281_p1(12 - 1 downto 0);

    regions_min_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            regions_min_1_ce0 <= ap_const_logic_1;
        else 
            regions_min_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_min_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            regions_min_1_ce1 <= ap_const_logic_1;
        else 
            regions_min_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    regions_min_1_d0 <= tmp_s_reg_585;

    regions_min_1_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln256_5_read_reg_525, and_ln354_1_reg_617)
    begin
        if (((ap_const_lv1_1 = and_ln354_1_reg_617) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln256_5_read_reg_525 = ap_const_lv1_1))) then 
            regions_min_1_we0 <= ap_const_logic_1;
        else 
            regions_min_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_351_p4 <= bitcast_ln354_fu_348_p1(30 downto 23);
    tmp_12_fu_368_p4 <= bitcast_ln354_1_fu_365_p1(30 downto 23);
    tmp_16_fu_433_p4 <= bitcast_ln357_fu_430_p1(30 downto 23);
    tmp_17_fu_450_p4 <= bitcast_ln357_1_fu_447_p1(30 downto 23);
    trunc_ln256_5_read_reg_525 <= trunc_ln256_5;
    trunc_ln354_1_fu_378_p1 <= bitcast_ln354_1_fu_365_p1(23 - 1 downto 0);
    trunc_ln354_fu_361_p1 <= bitcast_ln354_fu_348_p1(23 - 1 downto 0);
    trunc_ln357_1_fu_460_p1 <= bitcast_ln357_1_fu_447_p1(23 - 1 downto 0);
    trunc_ln357_fu_443_p1 <= bitcast_ln357_fu_430_p1(23 - 1 downto 0);
    zext_ln354_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln354_fu_275_p2),64));
    zext_ln354_2_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln354_1_fu_289_p2),64));
    zext_ln354_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),12));
end behav;
