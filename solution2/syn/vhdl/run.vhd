-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    startCopy : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of run is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "run_run,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=18.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.139999,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=48,HLS_SYN_DSP=0,HLS_SYN_FF=7398,HLS_SYN_LUT=9222,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_int : STD_LOGIC;
    signal ap_rst_sw : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal accel_mode : STD_LOGIC_VECTOR (7 downto 0);
    signal copying : STD_LOGIC_VECTOR (7 downto 0);
    signal inputData : STD_LOGIC_VECTOR (63 downto 0);
    signal trainedRegion_i : STD_LOGIC_VECTOR (767 downto 0);
    signal trainedRegion_o : STD_LOGIC_VECTOR (767 downto 0);
    signal IOCheckIdx : STD_LOGIC_VECTOR (7 downto 0);
    signal IORegionIdx : STD_LOGIC_VECTOR (7 downto 0);
    signal n_regions_in_i : STD_LOGIC_VECTOR (7 downto 0);
    signal n_regions_in_o : STD_LOGIC_VECTOR (7 downto 0);
    signal failedTask : STD_LOGIC_VECTOR (15 downto 0);
    signal failedTask_ap_vld : STD_LOGIC;
    signal regions_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_ce0 : STD_LOGIC;
    signal regions_we0 : STD_LOGIC;
    signal regions_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_ce1 : STD_LOGIC;
    signal regions_we1 : STD_LOGIC;
    signal regions_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_ce0 : STD_LOGIC;
    signal regions_2_we0 : STD_LOGIC;
    signal regions_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_ce1 : STD_LOGIC;
    signal regions_2_we1 : STD_LOGIC;
    signal regions_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_ce0 : STD_LOGIC;
    signal regions_4_we0 : STD_LOGIC;
    signal regions_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_ce1 : STD_LOGIC;
    signal regions_4_we1 : STD_LOGIC;
    signal regions_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_ce0 : STD_LOGIC;
    signal regions_1_we0 : STD_LOGIC;
    signal regions_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_ce1 : STD_LOGIC;
    signal regions_1_we1 : STD_LOGIC;
    signal regions_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_ce0 : STD_LOGIC;
    signal regions_3_we0 : STD_LOGIC;
    signal regions_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_ce1 : STD_LOGIC;
    signal regions_3_we1 : STD_LOGIC;
    signal regions_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_ce0 : STD_LOGIC;
    signal regions_5_we0 : STD_LOGIC;
    signal regions_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_ce1 : STD_LOGIC;
    signal regions_5_we1 : STD_LOGIC;
    signal regions_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal regions_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZL9n_regions_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_10 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_11 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_12 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_13 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_14 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_15 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_16 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_17 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_18 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_19 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_20 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_21 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_22 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_23 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_24 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_25 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_26 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_27 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_28 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_29 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_30 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_31 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_32 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_33 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_34 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_35 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_36 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_37 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_38 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_39 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_40 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_41 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_42 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_43 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_44 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_45 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_46 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_47 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_48 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_49 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_50 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_51 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_52 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_53 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_54 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_55 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_56 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_57 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_58 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_59 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_60 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_61 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_62 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_ZL9n_regions_63 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal inputData_read_reg_3117 : STD_LOGIC_VECTOR (63 downto 0);
    signal accel_mode_read_read_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln652_fu_1558_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln652_reg_3126 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln692_fu_1584_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln692_reg_3136 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_2_reg_3206 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_3_reg_3211 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_4_reg_3216 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_5_reg_3221 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_6_reg_3226 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_addr_7_reg_3231 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_10_reg_3236 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_11_reg_3241 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_12_reg_3246 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_13_reg_3251 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_14_reg_3256 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_1_addr_15_reg_3261 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_2_reg_3266 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_3_reg_3271 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_4_reg_3276 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_5_reg_3281 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_6_reg_3286 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_2_addr_7_reg_3291 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_10_reg_3296 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_11_reg_3301 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_12_reg_3306 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_13_reg_3311 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_14_reg_3316 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_3_addr_15_reg_3321 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_2_reg_3326 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_3_reg_3331 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_4_reg_3336 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_5_reg_3341 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_6_reg_3346 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_4_addr_7_reg_3351 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_10_reg_3356 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_11_reg_3361 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_12_reg_3366 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_13_reg_3371 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_14_reg_3376 : STD_LOGIC_VECTOR (11 downto 0);
    signal regions_5_addr_15_reg_3381 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln689_2_fu_2193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_2_reg_3386 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_3_fu_2207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_3_reg_3392 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_4_fu_2221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_4_reg_3398 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_5_fu_2235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_5_reg_3404 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_6_fu_2249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_6_reg_3410 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_7_fu_2263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_7_reg_3416 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_10_fu_2309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_10_reg_3422 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_11_fu_2323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_11_reg_3428 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_12_fu_2337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_12_reg_3434 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_13_fu_2351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_13_reg_3440 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_14_fu_2365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_14_reg_3446 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_15_fu_2379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_15_reg_3452 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_18_fu_2425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_18_reg_3458 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_19_fu_2439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_19_reg_3464 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_20_fu_2453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_20_reg_3470 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_21_fu_2467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_21_reg_3476 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_22_fu_2481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_22_reg_3482 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_23_fu_2495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_23_reg_3488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_1504_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_3554 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1513_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_3559 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1522_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_3564 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1531_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_3569 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1540_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_3574 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1549_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_3579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_27_reg_3644 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_3649 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_3654 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_3659 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_3664 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_3669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_29_reg_3734 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_3739 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_3744 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_3749 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_3754 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_3759 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_runTest_fu_1350_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_runTest_fu_1350_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_runTest_fu_1350_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_runTest_fu_1350_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_runTest_fu_1350_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_runTest_fu_1350_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_ce0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_we0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_ce1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_we1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_1_ce0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_1_we0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_1_ce1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_1_we1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_2_ce0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_2_we0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_2_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_2_ce1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_2_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_2_we1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_3_ce0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_3_we0 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_3_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_runTest_fu_1350_regions_3_ce1 : STD_LOGIC;
    signal grp_runTest_fu_1350_regions_3_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runTest_fu_1350_regions_3_we1 : STD_LOGIC;
    signal grp_runTest_fu_1350_ap_start : STD_LOGIC;
    signal grp_runTest_fu_1350_ap_done : STD_LOGIC;
    signal grp_runTest_fu_1350_ap_ready : STD_LOGIC;
    signal grp_runTest_fu_1350_ap_idle : STD_LOGIC;
    signal grp_runTest_fu_1350_ap_continue : STD_LOGIC;
    signal flush : STD_LOGIC;
    signal s_axi_control_flush_done : STD_LOGIC;
    signal m_axi_gmem_flush_done : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal grp_runTest_fu_1350_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_runTest_fu_1350_ap_ready : STD_LOGIC;
    signal ap_sync_grp_runTest_fu_1350_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_runTest_fu_1350_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_runTest_fu_1350_ap_done : STD_LOGIC := '0';
    signal zext_ln692_2_fu_1590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_3_fu_1606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_2_fu_2045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_3_fu_2061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_4_fu_2077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_5_fu_2093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_6_fu_2109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_7_fu_2125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_8_fu_2141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln689_9_fu_2157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_4_fu_2504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_5_fu_2519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_6_fu_2534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_7_fu_2549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_8_fu_2564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_9_fu_2579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln690_fu_2720_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_53_fu_1872_p66 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_regions_in_o_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bitcast_ln689_fu_2023_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_1_fu_2177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal bitcast_ln689_8_fu_2277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_9_fu_2293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_16_fu_2393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln689_17_fu_2409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1562_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1494_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln692_fu_1570_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln692_1_fu_1574_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln692_fu_1578_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln692_fu_1600_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_2007_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln689_fu_2019_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln689_fu_2015_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln689_1_fu_2029_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln689_fu_2033_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln689_fu_2039_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_fu_2055_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_1_fu_2071_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_2_fu_2087_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_3_fu_2103_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_4_fu_2119_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_5_fu_2135_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln689_6_fu_2151_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_2167_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_2183_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2197_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_2211_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_2225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_2239_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_2253_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_2267_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_2283_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_2299_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_2313_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_2327_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_2341_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_2355_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_2369_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_2383_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_2399_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_2415_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_2429_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_2443_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_2457_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_2471_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_2485_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln692_1_fu_2499_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln692_2_fu_2514_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln692_3_fu_2529_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln692_4_fu_2544_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln692_5_fu_2559_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln692_6_fu_2574_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln692_23_fu_2663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_22_fu_2659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_21_fu_2656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_20_fu_2653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_19_fu_2650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_18_fu_2647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_17_fu_2644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_16_fu_2641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_15_fu_2637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_14_fu_2633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_13_fu_2630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_12_fu_2627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_11_fu_2624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_10_fu_2621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_9_fu_2618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_8_fu_2615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_7_fu_2611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_6_fu_2607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_5_fu_2604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_4_fu_2601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_3_fu_2598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_2_fu_2595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_1_fu_2592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln692_fu_2589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_runTest IS
    port (
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
        startCopy : IN STD_LOGIC_VECTOR (63 downto 0);
        p_ZL9n_regions_0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_15 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_16 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_17 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_18 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_19 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_20 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_21 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_22 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_23 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_24 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_25 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_26 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_27 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_28 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_29 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_30 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_31 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_32 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_33 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_34 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_35 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_36 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_37 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_38 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_39 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_40 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_41 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_42 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_43 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_44 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_45 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_46 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_47 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_48 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_49 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_50 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_51 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_52 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_53 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_54 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_55 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_56 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_57 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_58 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_59 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_60 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_61 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_62 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_63 : IN STD_LOGIC_VECTOR (7 downto 0);
        regions_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce0 : OUT STD_LOGIC;
        regions_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_we0 : OUT STD_LOGIC;
        regions_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce1 : OUT STD_LOGIC;
        regions_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_we1 : OUT STD_LOGIC;
        regions_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce0 : OUT STD_LOGIC;
        regions_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_we0 : OUT STD_LOGIC;
        regions_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce1 : OUT STD_LOGIC;
        regions_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_we1 : OUT STD_LOGIC;
        regions_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce0 : OUT STD_LOGIC;
        regions_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_we0 : OUT STD_LOGIC;
        regions_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce1 : OUT STD_LOGIC;
        regions_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_we1 : OUT STD_LOGIC;
        regions_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce0 : OUT STD_LOGIC;
        regions_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_we0 : OUT STD_LOGIC;
        regions_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce1 : OUT STD_LOGIC;
        regions_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        regions_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        inputAOV_ap_vld : IN STD_LOGIC;
        startCopy_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        p_ZL9n_regions_0_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_1_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_2_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_3_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_4_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_5_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_6_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_7_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_8_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_9_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_10_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_11_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_12_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_13_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_14_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_15_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_16_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_17_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_18_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_19_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_20_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_21_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_22_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_23_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_24_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_25_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_26_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_27_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_28_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_29_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_30_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_31_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_32_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_33_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_34_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_35_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_36_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_37_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_38_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_39_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_40_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_41_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_42_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_43_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_44_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_45_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_46_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_47_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_48_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_49_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_50_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_51_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_52_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_53_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_54_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_55_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_56_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_57_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_58_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_59_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_60_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_61_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_62_ap_vld : IN STD_LOGIC;
        p_ZL9n_regions_63_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component run_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_mux_648_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (7 downto 0);
        din50 : IN STD_LOGIC_VECTOR (7 downto 0);
        din51 : IN STD_LOGIC_VECTOR (7 downto 0);
        din52 : IN STD_LOGIC_VECTOR (7 downto 0);
        din53 : IN STD_LOGIC_VECTOR (7 downto 0);
        din54 : IN STD_LOGIC_VECTOR (7 downto 0);
        din55 : IN STD_LOGIC_VECTOR (7 downto 0);
        din56 : IN STD_LOGIC_VECTOR (7 downto 0);
        din57 : IN STD_LOGIC_VECTOR (7 downto 0);
        din58 : IN STD_LOGIC_VECTOR (7 downto 0);
        din59 : IN STD_LOGIC_VECTOR (7 downto 0);
        din60 : IN STD_LOGIC_VECTOR (7 downto 0);
        din61 : IN STD_LOGIC_VECTOR (7 downto 0);
        din62 : IN STD_LOGIC_VECTOR (7 downto 0);
        din63 : IN STD_LOGIC_VECTOR (7 downto 0);
        din64 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component run_regions_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        sw_reset : OUT STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        accel_mode : OUT STD_LOGIC_VECTOR (7 downto 0);
        copying : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputData : OUT STD_LOGIC_VECTOR (63 downto 0);
        IOCheckIdx : OUT STD_LOGIC_VECTOR (7 downto 0);
        trainedRegion_i : OUT STD_LOGIC_VECTOR (767 downto 0);
        trainedRegion_o : IN STD_LOGIC_VECTOR (767 downto 0);
        IORegionIdx : OUT STD_LOGIC_VECTOR (7 downto 0);
        n_regions_in_o : IN STD_LOGIC_VECTOR (7 downto 0);
        n_regions_in_i : OUT STD_LOGIC_VECTOR (7 downto 0);
        failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
        failedTask_ap_vld : OUT STD_LOGIC;
        failedTask_ap_ack : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        flush : OUT STD_LOGIC;
        flush_done : IN STD_LOGIC );
    end component;


    component run_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        flush : IN STD_LOGIC;
        flush_done : OUT STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    regions_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_address0,
        ce0 => regions_ce0,
        we0 => regions_we0,
        d0 => regions_d0,
        q0 => regions_q0,
        address1 => regions_address1,
        ce1 => regions_ce1,
        we1 => regions_we1,
        d1 => regions_d1,
        q1 => regions_q1);

    regions_2_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_2_address0,
        ce0 => regions_2_ce0,
        we0 => regions_2_we0,
        d0 => regions_2_d0,
        q0 => regions_2_q0,
        address1 => regions_2_address1,
        ce1 => regions_2_ce1,
        we1 => regions_2_we1,
        d1 => regions_2_d1,
        q1 => regions_2_q1);

    regions_4_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_4_address0,
        ce0 => regions_4_ce0,
        we0 => regions_4_we0,
        d0 => regions_4_d0,
        q0 => regions_4_q0,
        address1 => regions_4_address1,
        ce1 => regions_4_ce1,
        we1 => regions_4_we1,
        d1 => regions_4_d1,
        q1 => regions_4_q1);

    regions_1_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_1_address0,
        ce0 => regions_1_ce0,
        we0 => regions_1_we0,
        d0 => regions_1_d0,
        q0 => regions_1_q0,
        address1 => regions_1_address1,
        ce1 => regions_1_ce1,
        we1 => regions_1_we1,
        d1 => regions_1_d1,
        q1 => regions_1_q1);

    regions_3_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_3_address0,
        ce0 => regions_3_ce0,
        we0 => regions_3_we0,
        d0 => regions_3_d0,
        q0 => regions_3_q0,
        address1 => regions_3_address1,
        ce1 => regions_3_ce1,
        we1 => regions_3_we1,
        d1 => regions_3_d1,
        q1 => regions_3_q1);

    regions_5_U : component run_regions_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => regions_5_address0,
        ce0 => regions_5_ce0,
        we0 => regions_5_we0,
        d0 => regions_5_d0,
        q0 => regions_5_q0,
        address1 => regions_5_address1,
        ce1 => regions_5_ce1,
        we1 => regions_5_we1,
        d1 => regions_5_d1,
        q1 => regions_5_q1);

    grp_runTest_fu_1350 : component run_runTest
    port map (
        m_axi_gmem_AWVALID => grp_runTest_fu_1350_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_runTest_fu_1350_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_runTest_fu_1350_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_runTest_fu_1350_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_runTest_fu_1350_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_runTest_fu_1350_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_runTest_fu_1350_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_runTest_fu_1350_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_runTest_fu_1350_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_runTest_fu_1350_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_runTest_fu_1350_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_runTest_fu_1350_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_runTest_fu_1350_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_runTest_fu_1350_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_runTest_fu_1350_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_runTest_fu_1350_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_runTest_fu_1350_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_runTest_fu_1350_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_runTest_fu_1350_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_runTest_fu_1350_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_runTest_fu_1350_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_runTest_fu_1350_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_runTest_fu_1350_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_runTest_fu_1350_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_runTest_fu_1350_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_runTest_fu_1350_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_runTest_fu_1350_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_runTest_fu_1350_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_runTest_fu_1350_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_runTest_fu_1350_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_runTest_fu_1350_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_runTest_fu_1350_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        inputAOV => inputData_read_reg_3117,
        startCopy => startCopy,
        p_ZL9n_regions_0 => p_ZL9n_regions_0,
        p_ZL9n_regions_1 => p_ZL9n_regions_1,
        p_ZL9n_regions_2 => p_ZL9n_regions_2,
        p_ZL9n_regions_3 => p_ZL9n_regions_3,
        p_ZL9n_regions_4 => p_ZL9n_regions_4,
        p_ZL9n_regions_5 => p_ZL9n_regions_5,
        p_ZL9n_regions_6 => p_ZL9n_regions_6,
        p_ZL9n_regions_7 => p_ZL9n_regions_7,
        p_ZL9n_regions_8 => p_ZL9n_regions_8,
        p_ZL9n_regions_9 => p_ZL9n_regions_9,
        p_ZL9n_regions_10 => p_ZL9n_regions_10,
        p_ZL9n_regions_11 => p_ZL9n_regions_11,
        p_ZL9n_regions_12 => p_ZL9n_regions_12,
        p_ZL9n_regions_13 => p_ZL9n_regions_13,
        p_ZL9n_regions_14 => p_ZL9n_regions_14,
        p_ZL9n_regions_15 => p_ZL9n_regions_15,
        p_ZL9n_regions_16 => p_ZL9n_regions_16,
        p_ZL9n_regions_17 => p_ZL9n_regions_17,
        p_ZL9n_regions_18 => p_ZL9n_regions_18,
        p_ZL9n_regions_19 => p_ZL9n_regions_19,
        p_ZL9n_regions_20 => p_ZL9n_regions_20,
        p_ZL9n_regions_21 => p_ZL9n_regions_21,
        p_ZL9n_regions_22 => p_ZL9n_regions_22,
        p_ZL9n_regions_23 => p_ZL9n_regions_23,
        p_ZL9n_regions_24 => p_ZL9n_regions_24,
        p_ZL9n_regions_25 => p_ZL9n_regions_25,
        p_ZL9n_regions_26 => p_ZL9n_regions_26,
        p_ZL9n_regions_27 => p_ZL9n_regions_27,
        p_ZL9n_regions_28 => p_ZL9n_regions_28,
        p_ZL9n_regions_29 => p_ZL9n_regions_29,
        p_ZL9n_regions_30 => p_ZL9n_regions_30,
        p_ZL9n_regions_31 => p_ZL9n_regions_31,
        p_ZL9n_regions_32 => p_ZL9n_regions_32,
        p_ZL9n_regions_33 => p_ZL9n_regions_33,
        p_ZL9n_regions_34 => p_ZL9n_regions_34,
        p_ZL9n_regions_35 => p_ZL9n_regions_35,
        p_ZL9n_regions_36 => p_ZL9n_regions_36,
        p_ZL9n_regions_37 => p_ZL9n_regions_37,
        p_ZL9n_regions_38 => p_ZL9n_regions_38,
        p_ZL9n_regions_39 => p_ZL9n_regions_39,
        p_ZL9n_regions_40 => p_ZL9n_regions_40,
        p_ZL9n_regions_41 => p_ZL9n_regions_41,
        p_ZL9n_regions_42 => p_ZL9n_regions_42,
        p_ZL9n_regions_43 => p_ZL9n_regions_43,
        p_ZL9n_regions_44 => p_ZL9n_regions_44,
        p_ZL9n_regions_45 => p_ZL9n_regions_45,
        p_ZL9n_regions_46 => p_ZL9n_regions_46,
        p_ZL9n_regions_47 => p_ZL9n_regions_47,
        p_ZL9n_regions_48 => p_ZL9n_regions_48,
        p_ZL9n_regions_49 => p_ZL9n_regions_49,
        p_ZL9n_regions_50 => p_ZL9n_regions_50,
        p_ZL9n_regions_51 => p_ZL9n_regions_51,
        p_ZL9n_regions_52 => p_ZL9n_regions_52,
        p_ZL9n_regions_53 => p_ZL9n_regions_53,
        p_ZL9n_regions_54 => p_ZL9n_regions_54,
        p_ZL9n_regions_55 => p_ZL9n_regions_55,
        p_ZL9n_regions_56 => p_ZL9n_regions_56,
        p_ZL9n_regions_57 => p_ZL9n_regions_57,
        p_ZL9n_regions_58 => p_ZL9n_regions_58,
        p_ZL9n_regions_59 => p_ZL9n_regions_59,
        p_ZL9n_regions_60 => p_ZL9n_regions_60,
        p_ZL9n_regions_61 => p_ZL9n_regions_61,
        p_ZL9n_regions_62 => p_ZL9n_regions_62,
        p_ZL9n_regions_63 => p_ZL9n_regions_63,
        regions_address0 => grp_runTest_fu_1350_regions_address0,
        regions_ce0 => grp_runTest_fu_1350_regions_ce0,
        regions_d0 => grp_runTest_fu_1350_regions_d0,
        regions_q0 => regions_q0,
        regions_we0 => grp_runTest_fu_1350_regions_we0,
        regions_address1 => grp_runTest_fu_1350_regions_address1,
        regions_ce1 => grp_runTest_fu_1350_regions_ce1,
        regions_d1 => grp_runTest_fu_1350_regions_d1,
        regions_q1 => ap_const_lv32_0,
        regions_we1 => grp_runTest_fu_1350_regions_we1,
        regions_1_address0 => grp_runTest_fu_1350_regions_1_address0,
        regions_1_ce0 => grp_runTest_fu_1350_regions_1_ce0,
        regions_1_d0 => grp_runTest_fu_1350_regions_1_d0,
        regions_1_q0 => regions_1_q0,
        regions_1_we0 => grp_runTest_fu_1350_regions_1_we0,
        regions_1_address1 => grp_runTest_fu_1350_regions_1_address1,
        regions_1_ce1 => grp_runTest_fu_1350_regions_1_ce1,
        regions_1_d1 => grp_runTest_fu_1350_regions_1_d1,
        regions_1_q1 => ap_const_lv32_0,
        regions_1_we1 => grp_runTest_fu_1350_regions_1_we1,
        regions_2_address0 => grp_runTest_fu_1350_regions_2_address0,
        regions_2_ce0 => grp_runTest_fu_1350_regions_2_ce0,
        regions_2_d0 => grp_runTest_fu_1350_regions_2_d0,
        regions_2_q0 => regions_2_q0,
        regions_2_we0 => grp_runTest_fu_1350_regions_2_we0,
        regions_2_address1 => grp_runTest_fu_1350_regions_2_address1,
        regions_2_ce1 => grp_runTest_fu_1350_regions_2_ce1,
        regions_2_d1 => grp_runTest_fu_1350_regions_2_d1,
        regions_2_q1 => ap_const_lv32_0,
        regions_2_we1 => grp_runTest_fu_1350_regions_2_we1,
        regions_3_address0 => grp_runTest_fu_1350_regions_3_address0,
        regions_3_ce0 => grp_runTest_fu_1350_regions_3_ce0,
        regions_3_d0 => grp_runTest_fu_1350_regions_3_d0,
        regions_3_q0 => regions_3_q0,
        regions_3_we0 => grp_runTest_fu_1350_regions_3_we0,
        regions_3_address1 => grp_runTest_fu_1350_regions_3_address1,
        regions_3_ce1 => grp_runTest_fu_1350_regions_3_ce1,
        regions_3_d1 => grp_runTest_fu_1350_regions_3_d1,
        regions_3_q1 => ap_const_lv32_0,
        regions_3_we1 => grp_runTest_fu_1350_regions_3_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inputAOV_ap_vld => ap_const_logic_1,
        startCopy_ap_vld => ap_const_logic_1,
        ap_start => grp_runTest_fu_1350_ap_start,
        p_ZL9n_regions_0_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_1_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_2_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_3_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_4_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_5_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_6_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_7_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_8_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_9_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_10_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_11_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_12_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_13_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_14_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_15_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_16_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_17_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_18_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_19_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_20_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_21_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_22_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_23_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_24_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_25_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_26_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_27_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_28_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_29_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_30_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_31_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_32_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_33_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_34_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_35_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_36_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_37_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_38_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_39_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_40_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_41_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_42_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_43_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_44_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_45_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_46_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_47_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_48_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_49_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_50_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_51_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_52_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_53_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_54_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_55_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_56_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_57_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_58_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_59_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_60_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_61_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_62_ap_vld => ap_const_logic_1,
        p_ZL9n_regions_63_ap_vld => ap_const_logic_1,
        ap_done => grp_runTest_fu_1350_ap_done,
        ap_ready => grp_runTest_fu_1350_ap_ready,
        ap_idle => grp_runTest_fu_1350_ap_idle,
        ap_continue => grp_runTest_fu_1350_ap_continue);

    control_s_axi_U : component run_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        sw_reset => ap_rst_sw,
        ACLK_EN => ap_const_logic_1,
        accel_mode => accel_mode,
        copying => copying,
        inputData => inputData,
        IOCheckIdx => IOCheckIdx,
        trainedRegion_i => trainedRegion_i,
        trainedRegion_o => trainedRegion_o,
        IORegionIdx => IORegionIdx,
        n_regions_in_o => n_regions_in_o,
        n_regions_in_i => n_regions_in_i,
        failedTask => failedTask,
        failedTask_ap_vld => failedTask_ap_vld,
        failedTask_ap_ack => ap_const_logic_0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        flush => flush,
        flush_done => s_axi_control_flush_done);

    gmem_m_axi_U : component run_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE,
        USER_DW => 512,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        flush => flush,
        flush_done => m_axi_gmem_flush_done,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_runTest_fu_1350_m_axi_gmem_ARADDR,
        I_ARLEN => grp_runTest_fu_1350_m_axi_gmem_ARLEN,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0);

    mux_21_32_1_1_U198 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_q1,
        din1 => regions_1_q1,
        din2 => trunc_ln652_reg_3126,
        dout => grp_fu_1504_p4);

    mux_21_32_1_1_U199 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_q0,
        din1 => regions_1_q0,
        din2 => trunc_ln652_reg_3126,
        dout => grp_fu_1513_p4);

    mux_21_32_1_1_U200 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_2_q1,
        din1 => regions_3_q1,
        din2 => trunc_ln652_reg_3126,
        dout => grp_fu_1522_p4);

    mux_21_32_1_1_U201 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_2_q0,
        din1 => regions_3_q0,
        din2 => trunc_ln652_reg_3126,
        dout => grp_fu_1531_p4);

    mux_21_32_1_1_U202 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_4_q1,
        din1 => regions_5_q1,
        din2 => trunc_ln652_reg_3126,
        dout => grp_fu_1540_p4);

    mux_21_32_1_1_U203 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_4_q0,
        din1 => regions_5_q0,
        din2 => trunc_ln652_reg_3126,
        dout => grp_fu_1549_p4);

    mux_648_8_1_1_U204 : component run_mux_648_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 8,
        din50_WIDTH => 8,
        din51_WIDTH => 8,
        din52_WIDTH => 8,
        din53_WIDTH => 8,
        din54_WIDTH => 8,
        din55_WIDTH => 8,
        din56_WIDTH => 8,
        din57_WIDTH => 8,
        din58_WIDTH => 8,
        din59_WIDTH => 8,
        din60_WIDTH => 8,
        din61_WIDTH => 8,
        din62_WIDTH => 8,
        din63_WIDTH => 8,
        din64_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => p_ZL9n_regions_0,
        din1 => p_ZL9n_regions_1,
        din2 => p_ZL9n_regions_2,
        din3 => p_ZL9n_regions_3,
        din4 => p_ZL9n_regions_4,
        din5 => p_ZL9n_regions_5,
        din6 => p_ZL9n_regions_6,
        din7 => p_ZL9n_regions_7,
        din8 => p_ZL9n_regions_8,
        din9 => p_ZL9n_regions_9,
        din10 => p_ZL9n_regions_10,
        din11 => p_ZL9n_regions_11,
        din12 => p_ZL9n_regions_12,
        din13 => p_ZL9n_regions_13,
        din14 => p_ZL9n_regions_14,
        din15 => p_ZL9n_regions_15,
        din16 => p_ZL9n_regions_16,
        din17 => p_ZL9n_regions_17,
        din18 => p_ZL9n_regions_18,
        din19 => p_ZL9n_regions_19,
        din20 => p_ZL9n_regions_20,
        din21 => p_ZL9n_regions_21,
        din22 => p_ZL9n_regions_22,
        din23 => p_ZL9n_regions_23,
        din24 => p_ZL9n_regions_24,
        din25 => p_ZL9n_regions_25,
        din26 => p_ZL9n_regions_26,
        din27 => p_ZL9n_regions_27,
        din28 => p_ZL9n_regions_28,
        din29 => p_ZL9n_regions_29,
        din30 => p_ZL9n_regions_30,
        din31 => p_ZL9n_regions_31,
        din32 => p_ZL9n_regions_32,
        din33 => p_ZL9n_regions_33,
        din34 => p_ZL9n_regions_34,
        din35 => p_ZL9n_regions_35,
        din36 => p_ZL9n_regions_36,
        din37 => p_ZL9n_regions_37,
        din38 => p_ZL9n_regions_38,
        din39 => p_ZL9n_regions_39,
        din40 => p_ZL9n_regions_40,
        din41 => p_ZL9n_regions_41,
        din42 => p_ZL9n_regions_42,
        din43 => p_ZL9n_regions_43,
        din44 => p_ZL9n_regions_44,
        din45 => p_ZL9n_regions_45,
        din46 => p_ZL9n_regions_46,
        din47 => p_ZL9n_regions_47,
        din48 => p_ZL9n_regions_48,
        din49 => p_ZL9n_regions_49,
        din50 => p_ZL9n_regions_50,
        din51 => p_ZL9n_regions_51,
        din52 => p_ZL9n_regions_52,
        din53 => p_ZL9n_regions_53,
        din54 => p_ZL9n_regions_54,
        din55 => p_ZL9n_regions_55,
        din56 => p_ZL9n_regions_56,
        din57 => p_ZL9n_regions_57,
        din58 => p_ZL9n_regions_58,
        din59 => p_ZL9n_regions_59,
        din60 => p_ZL9n_regions_60,
        din61 => p_ZL9n_regions_61,
        din62 => p_ZL9n_regions_62,
        din63 => p_ZL9n_regions_63,
        din64 => IOCheckIdx,
        dout => tmp_53_fu_1872_p66);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_runTest_fu_1350_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_runTest_fu_1350_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_runTest_fu_1350_ap_done <= ap_const_logic_0;
                elsif ((grp_runTest_fu_1350_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_runTest_fu_1350_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_runTest_fu_1350_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_runTest_fu_1350_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_runTest_fu_1350_ap_ready <= ap_const_logic_0;
                elsif ((grp_runTest_fu_1350_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_runTest_fu_1350_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_runTest_fu_1350_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_runTest_fu_1350_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_lv8_3 = accel_mode) and (ap_sync_grp_runTest_fu_1350_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_runTest_fu_1350_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_runTest_fu_1350_ap_ready = ap_const_logic_1)) then 
                    grp_runTest_fu_1350_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n_regions_in_o_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                n_regions_in_o_preg <= ap_const_lv8_0;
            else
                if (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    n_regions_in_o_preg <= tmp_53_fu_1872_p66;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_2 <= ap_rst_int;
        end if;
    end process;

    s_axi_control_flush_done_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            s_axi_control_flush_done <= (m_axi_gmem_flush_done);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bitcast_ln689_10_reg_3422 <= bitcast_ln689_10_fu_2309_p1;
                bitcast_ln689_11_reg_3428 <= bitcast_ln689_11_fu_2323_p1;
                bitcast_ln689_12_reg_3434 <= bitcast_ln689_12_fu_2337_p1;
                bitcast_ln689_13_reg_3440 <= bitcast_ln689_13_fu_2351_p1;
                bitcast_ln689_14_reg_3446 <= bitcast_ln689_14_fu_2365_p1;
                bitcast_ln689_15_reg_3452 <= bitcast_ln689_15_fu_2379_p1;
                bitcast_ln689_18_reg_3458 <= bitcast_ln689_18_fu_2425_p1;
                bitcast_ln689_19_reg_3464 <= bitcast_ln689_19_fu_2439_p1;
                bitcast_ln689_20_reg_3470 <= bitcast_ln689_20_fu_2453_p1;
                bitcast_ln689_21_reg_3476 <= bitcast_ln689_21_fu_2467_p1;
                bitcast_ln689_22_reg_3482 <= bitcast_ln689_22_fu_2481_p1;
                bitcast_ln689_23_reg_3488 <= bitcast_ln689_23_fu_2495_p1;
                bitcast_ln689_2_reg_3386 <= bitcast_ln689_2_fu_2193_p1;
                bitcast_ln689_3_reg_3392 <= bitcast_ln689_3_fu_2207_p1;
                bitcast_ln689_4_reg_3398 <= bitcast_ln689_4_fu_2221_p1;
                bitcast_ln689_5_reg_3404 <= bitcast_ln689_5_fu_2235_p1;
                bitcast_ln689_6_reg_3410 <= bitcast_ln689_6_fu_2249_p1;
                bitcast_ln689_7_reg_3416 <= bitcast_ln689_7_fu_2263_p1;
                    regions_1_addr_10_reg_3236(11 downto 3) <= zext_ln689_4_fu_2077_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_11_reg_3241(11 downto 3) <= zext_ln689_5_fu_2093_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_12_reg_3246(11 downto 3) <= zext_ln689_6_fu_2109_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_13_reg_3251(11 downto 3) <= zext_ln689_7_fu_2125_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_14_reg_3256(11 downto 3) <= zext_ln689_8_fu_2141_p1(12 - 1 downto 0)(11 downto 3);
                    regions_1_addr_15_reg_3261(11 downto 3) <= zext_ln689_9_fu_2157_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_2_reg_3266(11 downto 3) <= zext_ln689_4_fu_2077_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_3_reg_3271(11 downto 3) <= zext_ln689_5_fu_2093_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_4_reg_3276(11 downto 3) <= zext_ln689_6_fu_2109_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_5_reg_3281(11 downto 3) <= zext_ln689_7_fu_2125_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_6_reg_3286(11 downto 3) <= zext_ln689_8_fu_2141_p1(12 - 1 downto 0)(11 downto 3);
                    regions_2_addr_7_reg_3291(11 downto 3) <= zext_ln689_9_fu_2157_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_10_reg_3296(11 downto 3) <= zext_ln689_4_fu_2077_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_11_reg_3301(11 downto 3) <= zext_ln689_5_fu_2093_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_12_reg_3306(11 downto 3) <= zext_ln689_6_fu_2109_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_13_reg_3311(11 downto 3) <= zext_ln689_7_fu_2125_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_14_reg_3316(11 downto 3) <= zext_ln689_8_fu_2141_p1(12 - 1 downto 0)(11 downto 3);
                    regions_3_addr_15_reg_3321(11 downto 3) <= zext_ln689_9_fu_2157_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_2_reg_3326(11 downto 3) <= zext_ln689_4_fu_2077_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_3_reg_3331(11 downto 3) <= zext_ln689_5_fu_2093_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_4_reg_3336(11 downto 3) <= zext_ln689_6_fu_2109_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_5_reg_3341(11 downto 3) <= zext_ln689_7_fu_2125_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_6_reg_3346(11 downto 3) <= zext_ln689_8_fu_2141_p1(12 - 1 downto 0)(11 downto 3);
                    regions_4_addr_7_reg_3351(11 downto 3) <= zext_ln689_9_fu_2157_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_10_reg_3356(11 downto 3) <= zext_ln689_4_fu_2077_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_11_reg_3361(11 downto 3) <= zext_ln689_5_fu_2093_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_12_reg_3366(11 downto 3) <= zext_ln689_6_fu_2109_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_13_reg_3371(11 downto 3) <= zext_ln689_7_fu_2125_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_14_reg_3376(11 downto 3) <= zext_ln689_8_fu_2141_p1(12 - 1 downto 0)(11 downto 3);
                    regions_5_addr_15_reg_3381(11 downto 3) <= zext_ln689_9_fu_2157_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_2_reg_3206(11 downto 3) <= zext_ln689_4_fu_2077_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_3_reg_3211(11 downto 3) <= zext_ln689_5_fu_2093_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_4_reg_3216(11 downto 3) <= zext_ln689_6_fu_2109_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_5_reg_3221(11 downto 3) <= zext_ln689_7_fu_2125_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_6_reg_3226(11 downto 3) <= zext_ln689_8_fu_2141_p1(12 - 1 downto 0)(11 downto 3);
                    regions_addr_7_reg_3231(11 downto 3) <= zext_ln689_9_fu_2157_p1(12 - 1 downto 0)(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                inputData_read_reg_3117 <= inputData;
                trunc_ln652_reg_3126 <= trunc_ln652_fu_1558_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_0 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_1 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_A) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_10 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_B) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_11 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_C) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_12 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_D) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_13 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_E) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_14 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_F) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_15 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_10) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_16 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_11) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_17 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_12) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_18 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_13) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_19 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_2 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_14) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_20 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_15) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_21 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_16) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_22 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_17) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_23 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_18) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_24 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_19) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_25 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1A) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_26 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1B) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_27 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1C) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_28 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1D) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_29 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_3 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1E) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_30 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_1F) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_31 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_20) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_32 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_21) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_33 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_22) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_34 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_23) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_35 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_24) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_36 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_25) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_37 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_26) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_38 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_27) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_39 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_4) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_4 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_28) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_40 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_29) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_41 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2A) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_42 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2B) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_43 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2C) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_44 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2D) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_45 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2E) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_46 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_2F) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_47 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_30) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_48 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_31) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_49 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_5) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_5 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_32) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_50 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_33) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_51 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_34) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_52 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_35) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_53 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_36) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_54 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_37) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_55 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_38) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_56 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_39) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_57 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3A) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_58 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3B) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_59 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_6) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_6 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3C) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_60 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3D) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_61 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3E) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_62 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_3F) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_63 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_7) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_7 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_8) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_8 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln690_fu_2720_p1 = ap_const_lv6_9) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                p_ZL9n_regions_9 <= n_regions_in_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln692_reg_3136(11 downto 3) <= shl_ln692_fu_1584_p2(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_25_reg_3554 <= grp_fu_1504_p4;
                tmp_26_reg_3559 <= grp_fu_1513_p4;
                tmp_33_reg_3564 <= grp_fu_1522_p4;
                tmp_34_reg_3569 <= grp_fu_1531_p4;
                tmp_41_reg_3574 <= grp_fu_1540_p4;
                tmp_42_reg_3579 <= grp_fu_1549_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_27_reg_3644 <= grp_fu_1504_p4;
                tmp_28_reg_3649 <= grp_fu_1513_p4;
                tmp_35_reg_3654 <= grp_fu_1522_p4;
                tmp_36_reg_3659 <= grp_fu_1531_p4;
                tmp_43_reg_3664 <= grp_fu_1540_p4;
                tmp_44_reg_3669 <= grp_fu_1549_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_29_reg_3734 <= grp_fu_1504_p4;
                tmp_30_reg_3739 <= grp_fu_1513_p4;
                tmp_37_reg_3744 <= grp_fu_1522_p4;
                tmp_38_reg_3749 <= grp_fu_1531_p4;
                tmp_45_reg_3754 <= grp_fu_1540_p4;
                tmp_46_reg_3759 <= grp_fu_1549_p4;
            end if;
        end if;
    end process;
    shl_ln692_reg_3136(2 downto 0) <= "000";
    regions_addr_2_reg_3206(2 downto 0) <= "010";
    regions_addr_3_reg_3211(2 downto 0) <= "011";
    regions_addr_4_reg_3216(2 downto 0) <= "100";
    regions_addr_5_reg_3221(2 downto 0) <= "101";
    regions_addr_6_reg_3226(2 downto 0) <= "110";
    regions_addr_7_reg_3231(2 downto 0) <= "111";
    regions_1_addr_10_reg_3236(2 downto 0) <= "010";
    regions_1_addr_11_reg_3241(2 downto 0) <= "011";
    regions_1_addr_12_reg_3246(2 downto 0) <= "100";
    regions_1_addr_13_reg_3251(2 downto 0) <= "101";
    regions_1_addr_14_reg_3256(2 downto 0) <= "110";
    regions_1_addr_15_reg_3261(2 downto 0) <= "111";
    regions_2_addr_2_reg_3266(2 downto 0) <= "010";
    regions_2_addr_3_reg_3271(2 downto 0) <= "011";
    regions_2_addr_4_reg_3276(2 downto 0) <= "100";
    regions_2_addr_5_reg_3281(2 downto 0) <= "101";
    regions_2_addr_6_reg_3286(2 downto 0) <= "110";
    regions_2_addr_7_reg_3291(2 downto 0) <= "111";
    regions_3_addr_10_reg_3296(2 downto 0) <= "010";
    regions_3_addr_11_reg_3301(2 downto 0) <= "011";
    regions_3_addr_12_reg_3306(2 downto 0) <= "100";
    regions_3_addr_13_reg_3311(2 downto 0) <= "101";
    regions_3_addr_14_reg_3316(2 downto 0) <= "110";
    regions_3_addr_15_reg_3321(2 downto 0) <= "111";
    regions_4_addr_2_reg_3326(2 downto 0) <= "010";
    regions_4_addr_3_reg_3331(2 downto 0) <= "011";
    regions_4_addr_4_reg_3336(2 downto 0) <= "100";
    regions_4_addr_5_reg_3341(2 downto 0) <= "101";
    regions_4_addr_6_reg_3346(2 downto 0) <= "110";
    regions_4_addr_7_reg_3351(2 downto 0) <= "111";
    regions_5_addr_10_reg_3356(2 downto 0) <= "010";
    regions_5_addr_11_reg_3361(2 downto 0) <= "011";
    regions_5_addr_12_reg_3366(2 downto 0) <= "100";
    regions_5_addr_13_reg_3371(2 downto 0) <= "101";
    regions_5_addr_14_reg_3376(2 downto 0) <= "110";
    regions_5_addr_15_reg_3381(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((ap_const_lv8_3 = accel_mode)) and not((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2)) and not((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_lv8_3 = accel_mode) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2)) and not((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2)) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    accel_mode_read_read_fu_538_p2 <= accel_mode;
    add_ln689_fu_2033_p2 <= std_logic_vector(unsigned(zext_ln689_fu_2015_p1) + unsigned(zext_ln689_1_fu_2029_p1));
    add_ln692_fu_1578_p2 <= std_logic_vector(unsigned(zext_ln692_fu_1570_p1) + unsigned(zext_ln692_1_fu_1574_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state3_on_subcall_done_assign_proc : process(accel_mode, ap_sync_grp_runTest_fu_1350_ap_ready, ap_sync_grp_runTest_fu_1350_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_const_lv8_3 = accel_mode) and ((ap_sync_grp_runTest_fu_1350_ap_ready and ap_sync_grp_runTest_fu_1350_ap_done) = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_int_assign_proc : process(ap_rst_n, ap_rst_sw)
    begin
        ap_rst_int <= (not(ap_rst_n) or ap_rst_sw);
    end process;

    ap_sync_grp_runTest_fu_1350_ap_done <= (grp_runTest_fu_1350_ap_done or ap_sync_reg_grp_runTest_fu_1350_ap_done);
    ap_sync_grp_runTest_fu_1350_ap_ready <= (grp_runTest_fu_1350_ap_ready or ap_sync_reg_grp_runTest_fu_1350_ap_ready);
    bitcast_ln689_10_fu_2309_p1 <= tmp_14_fu_2299_p4;
    bitcast_ln689_11_fu_2323_p1 <= tmp_15_fu_2313_p4;
    bitcast_ln689_12_fu_2337_p1 <= tmp_16_fu_2327_p4;
    bitcast_ln689_13_fu_2351_p1 <= tmp_17_fu_2341_p4;
    bitcast_ln689_14_fu_2365_p1 <= tmp_18_fu_2355_p4;
    bitcast_ln689_15_fu_2379_p1 <= tmp_19_fu_2369_p4;
    bitcast_ln689_16_fu_2393_p1 <= tmp_20_fu_2383_p4;
    bitcast_ln689_17_fu_2409_p1 <= tmp_21_fu_2399_p4;
    bitcast_ln689_18_fu_2425_p1 <= tmp_22_fu_2415_p4;
    bitcast_ln689_19_fu_2439_p1 <= tmp_23_fu_2429_p4;
    bitcast_ln689_1_fu_2177_p1 <= tmp_fu_2167_p4;
    bitcast_ln689_20_fu_2453_p1 <= tmp_24_fu_2443_p4;
    bitcast_ln689_21_fu_2467_p1 <= tmp_49_fu_2457_p4;
    bitcast_ln689_22_fu_2481_p1 <= tmp_50_fu_2471_p4;
    bitcast_ln689_23_fu_2495_p1 <= tmp_51_fu_2485_p4;
    bitcast_ln689_2_fu_2193_p1 <= tmp_6_fu_2183_p4;
    bitcast_ln689_3_fu_2207_p1 <= tmp_7_fu_2197_p4;
    bitcast_ln689_4_fu_2221_p1 <= tmp_8_fu_2211_p4;
    bitcast_ln689_5_fu_2235_p1 <= tmp_9_fu_2225_p4;
    bitcast_ln689_6_fu_2249_p1 <= tmp_10_fu_2239_p4;
    bitcast_ln689_7_fu_2263_p1 <= tmp_11_fu_2253_p4;
    bitcast_ln689_8_fu_2277_p1 <= tmp_12_fu_2267_p4;
    bitcast_ln689_9_fu_2293_p1 <= tmp_13_fu_2283_p4;
    bitcast_ln689_fu_2023_p1 <= trunc_ln689_fu_2019_p1;
    bitcast_ln692_10_fu_2621_p1 <= tmp_35_reg_3654;
    bitcast_ln692_11_fu_2624_p1 <= tmp_36_reg_3659;
    bitcast_ln692_12_fu_2627_p1 <= tmp_37_reg_3744;
    bitcast_ln692_13_fu_2630_p1 <= tmp_38_reg_3749;
    bitcast_ln692_14_fu_2633_p1 <= grp_fu_1522_p4;
    bitcast_ln692_15_fu_2637_p1 <= grp_fu_1531_p4;
    bitcast_ln692_16_fu_2641_p1 <= tmp_41_reg_3574;
    bitcast_ln692_17_fu_2644_p1 <= tmp_42_reg_3579;
    bitcast_ln692_18_fu_2647_p1 <= tmp_43_reg_3664;
    bitcast_ln692_19_fu_2650_p1 <= tmp_44_reg_3669;
    bitcast_ln692_1_fu_2592_p1 <= tmp_26_reg_3559;
    bitcast_ln692_20_fu_2653_p1 <= tmp_45_reg_3754;
    bitcast_ln692_21_fu_2656_p1 <= tmp_46_reg_3759;
    bitcast_ln692_22_fu_2659_p1 <= grp_fu_1540_p4;
    bitcast_ln692_23_fu_2663_p1 <= grp_fu_1549_p4;
    bitcast_ln692_2_fu_2595_p1 <= tmp_27_reg_3644;
    bitcast_ln692_3_fu_2598_p1 <= tmp_28_reg_3649;
    bitcast_ln692_4_fu_2601_p1 <= tmp_29_reg_3734;
    bitcast_ln692_5_fu_2604_p1 <= tmp_30_reg_3739;
    bitcast_ln692_6_fu_2607_p1 <= grp_fu_1504_p4;
    bitcast_ln692_7_fu_2611_p1 <= grp_fu_1513_p4;
    bitcast_ln692_8_fu_2615_p1 <= tmp_33_reg_3564;
    bitcast_ln692_9_fu_2618_p1 <= tmp_34_reg_3569;
    bitcast_ln692_fu_2589_p1 <= tmp_25_reg_3554;

    gmem_ARVALID_assign_proc : process(accel_mode, grp_runTest_fu_1350_m_axi_gmem_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_ARVALID <= grp_runTest_fu_1350_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(accel_mode, grp_runTest_fu_1350_m_axi_gmem_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            gmem_RREADY <= grp_runTest_fu_1350_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1494_p4 <= IORegionIdx(7 downto 1);

    grp_runTest_fu_1350_ap_continue_assign_proc : process(accel_mode, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_runTest_fu_1350_ap_continue <= ap_const_logic_1;
        else 
            grp_runTest_fu_1350_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_runTest_fu_1350_ap_start <= grp_runTest_fu_1350_ap_start_reg;

    n_regions_in_o_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, tmp_53_fu_1872_p66, n_regions_in_o_preg)
    begin
        if (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_regions_in_o <= tmp_53_fu_1872_p66;
        else 
            n_regions_in_o <= n_regions_in_o_preg;
        end if; 
    end process;

    or_ln689_1_fu_2071_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_2);
    or_ln689_2_fu_2087_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_3);
    or_ln689_3_fu_2103_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_4);
    or_ln689_4_fu_2119_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_5);
    or_ln689_5_fu_2135_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_6);
    or_ln689_6_fu_2151_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_7);
    or_ln689_fu_2055_p2 <= (shl_ln689_fu_2039_p2 or ap_const_lv12_1);
    or_ln692_1_fu_2499_p2 <= (shl_ln692_reg_3136 or ap_const_lv12_2);
    or_ln692_2_fu_2514_p2 <= (shl_ln692_reg_3136 or ap_const_lv12_3);
    or_ln692_3_fu_2529_p2 <= (shl_ln692_reg_3136 or ap_const_lv12_4);
    or_ln692_4_fu_2544_p2 <= (shl_ln692_reg_3136 or ap_const_lv12_5);
    or_ln692_5_fu_2559_p2 <= (shl_ln692_reg_3136 or ap_const_lv12_6);
    or_ln692_6_fu_2574_p2 <= (shl_ln692_reg_3136 or ap_const_lv12_7);
    or_ln692_fu_1600_p2 <= (shl_ln692_fu_1584_p2 or ap_const_lv12_1);

    regions_1_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_1_addr_11_reg_3241, regions_1_addr_13_reg_3251, regions_1_addr_15_reg_3261, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_1_address0, ap_CS_fsm_state3, zext_ln692_3_fu_1606_p1, zext_ln689_3_fu_2061_p1, zext_ln692_5_fu_2519_p1, zext_ln692_7_fu_2549_p1, zext_ln692_9_fu_2579_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_1_address0 <= regions_1_addr_13_reg_3251;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_address0 <= regions_1_addr_11_reg_3241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_address0 <= regions_1_addr_15_reg_3261;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_1_address0 <= zext_ln692_9_fu_2579_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_1_address0 <= zext_ln692_7_fu_2549_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_1_address0 <= zext_ln692_5_fu_2519_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address0 <= zext_ln689_3_fu_2061_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address0 <= zext_ln692_3_fu_1606_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_1_address0 <= grp_runTest_fu_1350_regions_1_address0;
        else 
            regions_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_1_addr_10_reg_3236, regions_1_addr_12_reg_3246, regions_1_addr_14_reg_3256, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_2_fu_1590_p1, zext_ln689_2_fu_2045_p1, zext_ln692_4_fu_2504_p1, zext_ln692_6_fu_2534_p1, zext_ln692_8_fu_2564_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_1_address1 <= regions_1_addr_12_reg_3246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_address1 <= regions_1_addr_10_reg_3236;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_address1 <= regions_1_addr_14_reg_3256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_1_address1 <= zext_ln692_8_fu_2564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_1_address1 <= zext_ln692_6_fu_2534_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_1_address1 <= zext_ln692_4_fu_2504_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address1 <= zext_ln689_2_fu_2045_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_address1 <= zext_ln692_2_fu_1590_p1(12 - 1 downto 0);
        else 
            regions_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_1_ce0, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_1_ce0 <= grp_runTest_fu_1350_regions_1_ce0;
        else 
            regions_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_1_ce1 <= ap_const_logic_1;
        else 
            regions_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_1_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_3_reg_3392, bitcast_ln689_5_reg_3404, bitcast_ln689_7_reg_3416, ap_CS_fsm_state10, bitcast_ln689_1_fu_2177_p1, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_1_d0 <= bitcast_ln689_5_reg_3404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_d0 <= bitcast_ln689_3_reg_3392;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_d0 <= bitcast_ln689_7_reg_3416;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_d0 <= bitcast_ln689_1_fu_2177_p1;
        else 
            regions_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_2_reg_3386, bitcast_ln689_4_reg_3398, bitcast_ln689_6_reg_3410, ap_CS_fsm_state10, bitcast_ln689_fu_2023_p1, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_1_d1 <= bitcast_ln689_4_reg_3398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_1_d1 <= bitcast_ln689_2_reg_3386;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_1_d1 <= bitcast_ln689_6_reg_3410;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_1_d1 <= bitcast_ln689_fu_2023_p1;
        else 
            regions_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_1_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_1_we0 <= ap_const_logic_1;
        else 
            regions_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_1_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_1_we1 <= ap_const_logic_1;
        else 
            regions_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_2_addr_3_reg_3271, regions_2_addr_5_reg_3281, regions_2_addr_7_reg_3291, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_2_address0, ap_CS_fsm_state3, zext_ln692_3_fu_1606_p1, zext_ln689_3_fu_2061_p1, zext_ln692_5_fu_2519_p1, zext_ln692_7_fu_2549_p1, zext_ln692_9_fu_2579_p1, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_2_address0 <= regions_2_addr_7_reg_3291;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_address0 <= regions_2_addr_5_reg_3281;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_address0 <= regions_2_addr_3_reg_3271;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_2_address0 <= zext_ln692_9_fu_2579_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_2_address0 <= zext_ln692_7_fu_2549_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_2_address0 <= zext_ln692_5_fu_2519_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address0 <= zext_ln689_3_fu_2061_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address0 <= zext_ln692_3_fu_1606_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_2_address0 <= grp_runTest_fu_1350_regions_2_address0;
        else 
            regions_2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_2_addr_2_reg_3266, regions_2_addr_4_reg_3276, regions_2_addr_6_reg_3286, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_2_fu_1590_p1, zext_ln689_2_fu_2045_p1, zext_ln692_4_fu_2504_p1, zext_ln692_6_fu_2534_p1, zext_ln692_8_fu_2564_p1, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_2_address1 <= regions_2_addr_6_reg_3286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_address1 <= regions_2_addr_4_reg_3276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_address1 <= regions_2_addr_2_reg_3266;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_2_address1 <= zext_ln692_8_fu_2564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_2_address1 <= zext_ln692_6_fu_2534_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_2_address1 <= zext_ln692_4_fu_2504_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address1 <= zext_ln689_2_fu_2045_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_address1 <= zext_ln692_2_fu_1590_p1(12 - 1 downto 0);
        else 
            regions_2_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_2_ce0, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_2_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_2_ce0 <= grp_runTest_fu_1350_regions_2_ce0;
        else 
            regions_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_2_ce1 <= ap_const_logic_1;
        else 
            regions_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_11_reg_3428, bitcast_ln689_13_reg_3440, bitcast_ln689_15_reg_3452, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9, bitcast_ln689_9_fu_2293_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_2_d0 <= bitcast_ln689_15_reg_3452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_d0 <= bitcast_ln689_13_reg_3440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_d0 <= bitcast_ln689_11_reg_3428;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_d0 <= bitcast_ln689_9_fu_2293_p1;
        else 
            regions_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_10_reg_3422, bitcast_ln689_12_reg_3434, bitcast_ln689_14_reg_3446, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9, bitcast_ln689_8_fu_2277_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_2_d1 <= bitcast_ln689_14_reg_3446;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_2_d1 <= bitcast_ln689_12_reg_3434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_2_d1 <= bitcast_ln689_10_reg_3422;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_2_d1 <= bitcast_ln689_8_fu_2277_p1;
        else 
            regions_2_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_2_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_2_we0 <= ap_const_logic_1;
        else 
            regions_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_2_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_2_we1 <= ap_const_logic_1;
        else 
            regions_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_3_addr_11_reg_3301, regions_3_addr_13_reg_3311, regions_3_addr_15_reg_3321, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_3_address0, ap_CS_fsm_state3, zext_ln692_3_fu_1606_p1, zext_ln689_3_fu_2061_p1, zext_ln692_5_fu_2519_p1, zext_ln692_7_fu_2549_p1, zext_ln692_9_fu_2579_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_3_address0 <= regions_3_addr_13_reg_3311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_address0 <= regions_3_addr_11_reg_3301;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_address0 <= regions_3_addr_15_reg_3321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_3_address0 <= zext_ln692_9_fu_2579_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_3_address0 <= zext_ln692_7_fu_2549_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_3_address0 <= zext_ln692_5_fu_2519_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address0 <= zext_ln689_3_fu_2061_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address0 <= zext_ln692_3_fu_1606_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_3_address0 <= grp_runTest_fu_1350_regions_3_address0;
        else 
            regions_3_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_3_addr_10_reg_3296, regions_3_addr_12_reg_3306, regions_3_addr_14_reg_3316, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_2_fu_1590_p1, zext_ln689_2_fu_2045_p1, zext_ln692_4_fu_2504_p1, zext_ln692_6_fu_2534_p1, zext_ln692_8_fu_2564_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_3_address1 <= regions_3_addr_12_reg_3306;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_address1 <= regions_3_addr_10_reg_3296;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_address1 <= regions_3_addr_14_reg_3316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_3_address1 <= zext_ln692_8_fu_2564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_3_address1 <= zext_ln692_6_fu_2534_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_3_address1 <= zext_ln692_4_fu_2504_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address1 <= zext_ln689_2_fu_2045_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_address1 <= zext_ln692_2_fu_1590_p1(12 - 1 downto 0);
        else 
            regions_3_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_3_ce0, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_3_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_3_ce0 <= grp_runTest_fu_1350_regions_3_ce0;
        else 
            regions_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_3_ce1 <= ap_const_logic_1;
        else 
            regions_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_11_reg_3428, bitcast_ln689_13_reg_3440, bitcast_ln689_15_reg_3452, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, bitcast_ln689_9_fu_2293_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_3_d0 <= bitcast_ln689_13_reg_3440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_d0 <= bitcast_ln689_11_reg_3428;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_d0 <= bitcast_ln689_15_reg_3452;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_d0 <= bitcast_ln689_9_fu_2293_p1;
        else 
            regions_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_10_reg_3422, bitcast_ln689_12_reg_3434, bitcast_ln689_14_reg_3446, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, bitcast_ln689_8_fu_2277_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_3_d1 <= bitcast_ln689_12_reg_3434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_3_d1 <= bitcast_ln689_10_reg_3422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_3_d1 <= bitcast_ln689_14_reg_3446;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_3_d1 <= bitcast_ln689_8_fu_2277_p1;
        else 
            regions_3_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_3_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_3_we0 <= ap_const_logic_1;
        else 
            regions_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_3_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_3_we1 <= ap_const_logic_1;
        else 
            regions_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_4_addr_3_reg_3331, regions_4_addr_5_reg_3341, regions_4_addr_7_reg_3351, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_3_fu_1606_p1, zext_ln689_3_fu_2061_p1, zext_ln692_5_fu_2519_p1, zext_ln692_7_fu_2549_p1, zext_ln692_9_fu_2579_p1, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_4_address0 <= regions_4_addr_7_reg_3351;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_address0 <= regions_4_addr_5_reg_3341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_address0 <= regions_4_addr_3_reg_3331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_4_address0 <= zext_ln692_9_fu_2579_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_4_address0 <= zext_ln692_7_fu_2549_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_4_address0 <= zext_ln692_5_fu_2519_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address0 <= zext_ln689_3_fu_2061_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address0 <= zext_ln692_3_fu_1606_p1(12 - 1 downto 0);
        else 
            regions_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_4_addr_2_reg_3326, regions_4_addr_4_reg_3336, regions_4_addr_6_reg_3346, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_2_fu_1590_p1, zext_ln689_2_fu_2045_p1, zext_ln692_4_fu_2504_p1, zext_ln692_6_fu_2534_p1, zext_ln692_8_fu_2564_p1, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_4_address1 <= regions_4_addr_6_reg_3346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_address1 <= regions_4_addr_4_reg_3336;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_address1 <= regions_4_addr_2_reg_3326;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_4_address1 <= zext_ln692_8_fu_2564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_4_address1 <= zext_ln692_6_fu_2534_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_4_address1 <= zext_ln692_4_fu_2504_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address1 <= zext_ln689_2_fu_2045_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_address1 <= zext_ln692_2_fu_1590_p1(12 - 1 downto 0);
        else 
            regions_4_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_4_ce0 <= ap_const_logic_1;
        else 
            regions_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_4_ce1 <= ap_const_logic_1;
        else 
            regions_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_19_reg_3464, bitcast_ln689_21_reg_3476, bitcast_ln689_23_reg_3488, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9, bitcast_ln689_17_fu_2409_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_4_d0 <= bitcast_ln689_23_reg_3488;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_d0 <= bitcast_ln689_21_reg_3476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_d0 <= bitcast_ln689_19_reg_3464;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_d0 <= bitcast_ln689_17_fu_2409_p1;
        else 
            regions_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_18_reg_3458, bitcast_ln689_20_reg_3470, bitcast_ln689_22_reg_3482, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9, bitcast_ln689_16_fu_2393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_4_d1 <= bitcast_ln689_22_reg_3482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_4_d1 <= bitcast_ln689_20_reg_3470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_4_d1 <= bitcast_ln689_18_reg_3458;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_4_d1 <= bitcast_ln689_16_fu_2393_p1;
        else 
            regions_4_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_4_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_4_we0 <= ap_const_logic_1;
        else 
            regions_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_4_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_4_we1 <= ap_const_logic_1;
        else 
            regions_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_5_addr_11_reg_3361, regions_5_addr_13_reg_3371, regions_5_addr_15_reg_3381, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_3_fu_1606_p1, zext_ln689_3_fu_2061_p1, zext_ln692_5_fu_2519_p1, zext_ln692_7_fu_2549_p1, zext_ln692_9_fu_2579_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_5_address0 <= regions_5_addr_13_reg_3371;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_address0 <= regions_5_addr_11_reg_3361;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_address0 <= regions_5_addr_15_reg_3381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_5_address0 <= zext_ln692_9_fu_2579_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_5_address0 <= zext_ln692_7_fu_2549_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_5_address0 <= zext_ln692_5_fu_2519_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address0 <= zext_ln689_3_fu_2061_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address0 <= zext_ln692_3_fu_1606_p1(12 - 1 downto 0);
        else 
            regions_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_5_addr_10_reg_3356, regions_5_addr_12_reg_3366, regions_5_addr_14_reg_3376, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_2_fu_1590_p1, zext_ln689_2_fu_2045_p1, zext_ln692_4_fu_2504_p1, zext_ln692_6_fu_2534_p1, zext_ln692_8_fu_2564_p1, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_5_address1 <= regions_5_addr_12_reg_3366;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_address1 <= regions_5_addr_10_reg_3356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_address1 <= regions_5_addr_14_reg_3376;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_5_address1 <= zext_ln692_8_fu_2564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_5_address1 <= zext_ln692_6_fu_2534_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_5_address1 <= zext_ln692_4_fu_2504_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address1 <= zext_ln689_2_fu_2045_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_address1 <= zext_ln692_2_fu_1590_p1(12 - 1 downto 0);
        else 
            regions_5_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_5_ce0 <= ap_const_logic_1;
        else 
            regions_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_5_ce1 <= ap_const_logic_1;
        else 
            regions_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_19_reg_3464, bitcast_ln689_21_reg_3476, bitcast_ln689_23_reg_3488, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, bitcast_ln689_17_fu_2409_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_5_d0 <= bitcast_ln689_21_reg_3476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_d0 <= bitcast_ln689_19_reg_3464;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_d0 <= bitcast_ln689_23_reg_3488;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_d0 <= bitcast_ln689_17_fu_2409_p1;
        else 
            regions_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_18_reg_3458, bitcast_ln689_20_reg_3470, bitcast_ln689_22_reg_3482, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, bitcast_ln689_16_fu_2393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            regions_5_d1 <= bitcast_ln689_20_reg_3470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            regions_5_d1 <= bitcast_ln689_18_reg_3458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_5_d1 <= bitcast_ln689_22_reg_3482;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_5_d1 <= bitcast_ln689_16_fu_2393_p1;
        else 
            regions_5_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_5_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_5_we0 <= ap_const_logic_1;
        else 
            regions_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_5_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_5_we1 <= ap_const_logic_1;
        else 
            regions_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_address0_assign_proc : process(ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_addr_3_reg_3211, regions_addr_5_reg_3221, regions_addr_7_reg_3231, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_address0, ap_CS_fsm_state3, zext_ln692_3_fu_1606_p1, zext_ln689_3_fu_2061_p1, zext_ln692_5_fu_2519_p1, zext_ln692_7_fu_2549_p1, zext_ln692_9_fu_2579_p1, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_address0 <= regions_addr_7_reg_3231;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_address0 <= regions_addr_5_reg_3221;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_address0 <= regions_addr_3_reg_3211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_address0 <= zext_ln692_9_fu_2579_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_address0 <= zext_ln692_7_fu_2549_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_address0 <= zext_ln692_5_fu_2519_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address0 <= zext_ln689_3_fu_2061_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address0 <= zext_ln692_3_fu_1606_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_address0 <= grp_runTest_fu_1350_regions_address0;
        else 
            regions_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_address1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, regions_addr_2_reg_3206, regions_addr_4_reg_3216, regions_addr_6_reg_3226, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln692_2_fu_1590_p1, zext_ln689_2_fu_2045_p1, zext_ln692_4_fu_2504_p1, zext_ln692_6_fu_2534_p1, zext_ln692_8_fu_2564_p1, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_address1 <= regions_addr_6_reg_3226;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_address1 <= regions_addr_4_reg_3216;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_address1 <= regions_addr_2_reg_3206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            regions_address1 <= zext_ln692_8_fu_2564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_address1 <= zext_ln692_6_fu_2534_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regions_address1 <= zext_ln692_4_fu_2504_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address1 <= zext_ln689_2_fu_2045_p1(12 - 1 downto 0);
        elsif (((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_address1 <= zext_ln692_2_fu_1590_p1(12 - 1 downto 0);
        else 
            regions_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    regions_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_runTest_fu_1350_regions_ce0, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv8_3 = accel_mode) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            regions_ce0 <= grp_runTest_fu_1350_regions_ce0;
        else 
            regions_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv8_2 = accel_mode_read_read_fu_538_p2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            regions_ce1 <= ap_const_logic_1;
        else 
            regions_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    regions_d0_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_3_reg_3392, bitcast_ln689_5_reg_3404, bitcast_ln689_7_reg_3416, ap_CS_fsm_state10, bitcast_ln689_1_fu_2177_p1, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_d0 <= bitcast_ln689_7_reg_3416;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_d0 <= bitcast_ln689_5_reg_3404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_d0 <= bitcast_ln689_3_reg_3392;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_d0 <= bitcast_ln689_1_fu_2177_p1;
        else 
            regions_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_d1_assign_proc : process(ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, bitcast_ln689_2_reg_3386, bitcast_ln689_4_reg_3398, bitcast_ln689_6_reg_3410, ap_CS_fsm_state10, bitcast_ln689_fu_2023_p1, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            regions_d1 <= bitcast_ln689_6_reg_3410;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            regions_d1 <= bitcast_ln689_4_reg_3398;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            regions_d1 <= bitcast_ln689_2_reg_3386;
        elsif (((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            regions_d1 <= bitcast_ln689_fu_2023_p1;
        else 
            regions_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regions_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_we0 <= ap_const_logic_1;
        else 
            regions_we0 <= ap_const_logic_0;
        end if; 
    end process;


    regions_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, accel_mode_read_read_fu_538_p2, trunc_ln652_fu_1558_p1, trunc_ln652_reg_3126, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv8_1 = accel_mode_read_read_fu_538_p2) and (trunc_ln652_fu_1558_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln652_reg_3126 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            regions_we1 <= ap_const_logic_1;
        else 
            regions_we1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln689_fu_2039_p2 <= std_logic_vector(shift_left(unsigned(add_ln689_fu_2033_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    shl_ln692_fu_1584_p2 <= std_logic_vector(shift_left(unsigned(add_ln692_fu_1578_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    tmp_10_fu_2239_p4 <= trainedRegion_i(223 downto 192);
    tmp_11_fu_2253_p4 <= trainedRegion_i(255 downto 224);
    tmp_12_fu_2267_p4 <= trainedRegion_i(287 downto 256);
    tmp_13_fu_2283_p4 <= trainedRegion_i(319 downto 288);
    tmp_14_fu_2299_p4 <= trainedRegion_i(351 downto 320);
    tmp_15_fu_2313_p4 <= trainedRegion_i(383 downto 352);
    tmp_16_fu_2327_p4 <= trainedRegion_i(415 downto 384);
    tmp_17_fu_2341_p4 <= trainedRegion_i(447 downto 416);
    tmp_18_fu_2355_p4 <= trainedRegion_i(479 downto 448);
    tmp_19_fu_2369_p4 <= trainedRegion_i(511 downto 480);
    tmp_20_fu_2383_p4 <= trainedRegion_i(543 downto 512);
    tmp_21_fu_2399_p4 <= trainedRegion_i(575 downto 544);
    tmp_22_fu_2415_p4 <= trainedRegion_i(607 downto 576);
    tmp_23_fu_2429_p4 <= trainedRegion_i(639 downto 608);
    tmp_24_fu_2443_p4 <= trainedRegion_i(671 downto 640);
    tmp_49_fu_2457_p4 <= trainedRegion_i(703 downto 672);
    tmp_50_fu_2471_p4 <= trainedRegion_i(735 downto 704);
    tmp_51_fu_2485_p4 <= trainedRegion_i(767 downto 736);
    tmp_52_fu_1562_p3 <= (IOCheckIdx & ap_const_lv3_0);
    tmp_6_fu_2183_p4 <= trainedRegion_i(95 downto 64);
    tmp_7_fu_2197_p4 <= trainedRegion_i(127 downto 96);
    tmp_8_fu_2211_p4 <= trainedRegion_i(159 downto 128);
    tmp_9_fu_2225_p4 <= trainedRegion_i(191 downto 160);
    tmp_fu_2167_p4 <= trainedRegion_i(63 downto 32);
    tmp_s_fu_2007_p3 <= (IOCheckIdx & ap_const_lv3_0);
    trainedRegion_o <= (((((((((((((((((((((((bitcast_ln692_23_fu_2663_p1 & bitcast_ln692_22_fu_2659_p1) & bitcast_ln692_21_fu_2656_p1) & bitcast_ln692_20_fu_2653_p1) & bitcast_ln692_19_fu_2650_p1) & bitcast_ln692_18_fu_2647_p1) & bitcast_ln692_17_fu_2644_p1) & bitcast_ln692_16_fu_2641_p1) & bitcast_ln692_15_fu_2637_p1) & bitcast_ln692_14_fu_2633_p1) & bitcast_ln692_13_fu_2630_p1) & bitcast_ln692_12_fu_2627_p1) & bitcast_ln692_11_fu_2624_p1) & bitcast_ln692_10_fu_2621_p1) & bitcast_ln692_9_fu_2618_p1) & bitcast_ln692_8_fu_2615_p1) & bitcast_ln692_7_fu_2611_p1) & bitcast_ln692_6_fu_2607_p1) & bitcast_ln692_5_fu_2604_p1) & bitcast_ln692_4_fu_2601_p1) & bitcast_ln692_3_fu_2598_p1) & bitcast_ln692_2_fu_2595_p1) & bitcast_ln692_1_fu_2592_p1) & bitcast_ln692_fu_2589_p1);
    trunc_ln652_fu_1558_p1 <= IORegionIdx(1 - 1 downto 0);
    trunc_ln689_fu_2019_p1 <= trainedRegion_i(32 - 1 downto 0);
    trunc_ln690_fu_2720_p1 <= IOCheckIdx(6 - 1 downto 0);
    zext_ln689_1_fu_2029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1494_p4),12));
    zext_ln689_2_fu_2045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln689_fu_2039_p2),64));
    zext_ln689_3_fu_2061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_fu_2055_p2),64));
    zext_ln689_4_fu_2077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_1_fu_2071_p2),64));
    zext_ln689_5_fu_2093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_2_fu_2087_p2),64));
    zext_ln689_6_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_3_fu_2103_p2),64));
    zext_ln689_7_fu_2125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_4_fu_2119_p2),64));
    zext_ln689_8_fu_2141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_5_fu_2135_p2),64));
    zext_ln689_9_fu_2157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln689_6_fu_2151_p2),64));
    zext_ln689_fu_2015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_2007_p3),12));
    zext_ln692_1_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1494_p4),12));
    zext_ln692_2_fu_1590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln692_fu_1584_p2),64));
    zext_ln692_3_fu_1606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_fu_1600_p2),64));
    zext_ln692_4_fu_2504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_1_fu_2499_p2),64));
    zext_ln692_5_fu_2519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_2_fu_2514_p2),64));
    zext_ln692_6_fu_2534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_3_fu_2529_p2),64));
    zext_ln692_7_fu_2549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_4_fu_2544_p2),64));
    zext_ln692_8_fu_2564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_5_fu_2559_p2),64));
    zext_ln692_9_fu_2579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln692_6_fu_2574_p2),64));
    zext_ln692_fu_1570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_1562_p3),12));
end behav;
