-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_run_test is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bubble : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (0 downto 0);
    regions_min_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_min_0_ce0 : OUT STD_LOGIC;
    regions_min_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_min_0_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    regions_min_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_min_1_ce0 : OUT STD_LOGIC;
    regions_min_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_min_1_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    regions_max_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_max_0_ce0 : OUT STD_LOGIC;
    regions_max_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_max_0_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    regions_max_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_max_1_ce0 : OUT STD_LOGIC;
    regions_max_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_max_1_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    n_regions : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of run_run_test is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7F800000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111100000000000000000000000";
    constant ap_const_lv32_FF800000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111100000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bubble_read_read_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_310_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_817 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_318_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_reg_822 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_326_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_reg_827 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_334_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_reg_832 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln76_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln76_fu_356_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln76_reg_848 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_x_assign_fu_362_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_865 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1073_fu_448_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1073_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1073_1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_1_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln55_reg_894 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_482_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_499_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_reg_904 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_fu_516_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_reg_909 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_533_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_reg_914 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln65_6_fu_565_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_6_reg_929 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_7_fu_570_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_7_reg_934 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_575_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln61_fu_589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_reg_945 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_595_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln65_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln65_1_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_1_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_694_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln65_4_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_4_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_5_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_5_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_266 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal and_ln65_2_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_phi_ln464_phi_fu_282_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln464_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal or_ln79_1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_4_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_5_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_6_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_7_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln79_fu_393_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_463_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln65_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_fu_477_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_1_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_1_fu_494_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_2_fu_507_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_2_fu_511_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln65_3_fu_524_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_3_fu_528_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln65_fu_541_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_4_fu_545_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln65_5_fu_555_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln65_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_609_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_1_fu_619_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln65_1_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_646_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_2_fu_656_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln65_3_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_2_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_1_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln65_2_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_708_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_3_fu_718_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln65_2_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_295_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_condition_593 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component run_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_mux_84_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_mux_864_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U364 : component run_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        din1 => grp_fu_295_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_295_opcode,
        dout => grp_fu_295_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U365 : component run_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_x_assign_fu_362_p10,
        din1 => ap_const_lv32_7F800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_300_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U366 : component run_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_x_assign_fu_362_p10,
        din1 => ap_const_lv32_FF800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_305_p2);

    mux_84_32_1_1_U367 : component run_mux_84_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => p_read1,
        din1 => p_read2,
        din2 => p_read3,
        din3 => p_read4,
        din4 => p_read5,
        din5 => p_read6,
        din6 => p_read7,
        din7 => p_read8,
        din8 => i_fu_116,
        dout => p_x_assign_fu_362_p10);

    mux_864_32_1_1_U368 : component run_mux_864_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => p_read1,
        din1 => p_read2,
        din2 => p_read3,
        din3 => p_read4,
        din4 => p_read5,
        din5 => p_read6,
        din6 => p_read7,
        din7 => p_read8,
        din8 => j_reg_266,
        dout => tmp_1_fu_575_p10);

    mux_21_32_1_1_U369 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_min_0_q0,
        din1 => regions_min_1_q0,
        din2 => trunc_ln1073_reg_884,
        dout => tmp_fu_595_p4);

    mux_21_32_1_1_U370 : component run_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => regions_max_0_q0,
        din1 => regions_max_1_q0,
        din2 => trunc_ln1073_reg_884,
        dout => tmp_2_fu_694_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((bubble_read_read_fu_208_p2 = ap_const_lv1_1) or ((icmp_ln76_reg_844 = ap_const_lv1_0) or ((icmp_ln1073_reg_870 = ap_const_lv1_1) or ((icmp_ln1073_1_reg_890 = ap_const_lv1_0) or ((icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975)))))))) then 
                    ap_return_preg <= ap_phi_mux_phi_ln464_phi_fu_282_p8;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1073_fu_409_p2 = ap_const_lv1_0))) then 
                i_1_fu_120 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (icmp_ln1073_reg_870 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln65_1_reg_975) and (icmp_ln76_reg_844 = ap_const_lv1_1)) or ((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (icmp_ln1073_reg_870 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln65_2_fu_738_p2) and (icmp_ln76_reg_844 = ap_const_lv1_1))))) then 
                i_1_fu_120 <= add_ln55_reg_894;
            end if; 
        end if;
    end process;

    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_116 <= ap_const_lv4_0;
            elsif (((or_ln79_1_fu_435_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_116 <= add_ln76_reg_848;
            end if; 
        end if;
    end process;

    j_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln1073_reg_870 = ap_const_lv1_0)) then
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1073_1_fu_452_p2 = ap_const_lv1_1))) then 
                    j_reg_266 <= ap_const_lv64_0;
                elsif ((ap_const_boolean_1 = ap_condition_593)) then 
                    j_reg_266 <= add_ln61_reg_945;
                end if;
            end if; 
        end if;
    end process;

    phi_ln464_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975) and (icmp_ln1073_reg_870 = ap_const_lv1_0) and (icmp_ln76_reg_844 = ap_const_lv1_1))) then 
                phi_ln464_reg_278 <= ap_const_lv1_0;
            elsif ((((or_ln79_1_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln1073_1_fu_452_p2 = ap_const_lv1_0) or (icmp_ln1073_reg_870 = ap_const_lv1_1))))) then 
                phi_ln464_reg_278 <= ap_const_lv1_1;
            elsif (((bubble_read_read_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln464_reg_278 <= p_read;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1073_reg_870 = ap_const_lv1_0))) then
                add_ln55_reg_894 <= add_ln55_fu_457_p2;
                icmp_ln1073_1_reg_890 <= icmp_ln1073_1_fu_452_p2;
                trunc_ln1073_reg_884 <= trunc_ln1073_fu_448_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln61_reg_945 <= add_ln61_fu_589_p2;
                add_ln65_6_reg_929 <= add_ln65_6_fu_565_p2;
                add_ln65_7_reg_934 <= add_ln65_7_fu_570_p2;
                tmp_1_reg_939 <= tmp_1_fu_575_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln76_reg_848 <= add_ln76_fu_356_p2;
                icmp_ln76_reg_844 <= icmp_ln76_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                and_ln65_1_reg_975 <= and_ln65_1_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln1073_reg_870 <= icmp_ln1073_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln65_1_reg_960 <= icmp_ln65_1_fu_629_p2;
                icmp_ln65_reg_955 <= icmp_ln65_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln65_4_reg_984 <= icmp_ln65_4_fu_722_p2;
                icmp_ln65_5_reg_989 <= icmp_ln65_5_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln79_1_reg_865 <= icmp_ln79_1_fu_403_p2;
                icmp_ln79_reg_860 <= icmp_ln79_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    tmp_11_reg_822(8 downto 3) <= tmp_11_fu_318_p3(8 downto 3);
                    tmp_12_reg_827(8 downto 3) <= tmp_12_fu_326_p3(8 downto 3);
                    tmp_13_reg_832(8 downto 3) <= tmp_13_fu_334_p3(8 downto 3);
                    tmp_5_reg_817(8 downto 3) <= tmp_5_fu_310_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1073_1_fu_452_p2 = ap_const_lv1_1) and (icmp_ln1073_reg_870 = ap_const_lv1_0))) then
                    tmp_15_reg_899(11 downto 3) <= tmp_15_fu_482_p3(11 downto 3);
                    tmp_16_reg_904(11 downto 3) <= tmp_16_fu_499_p3(11 downto 3);
                    tmp_17_reg_909(11 downto 3) <= tmp_17_fu_516_p3(11 downto 3);
                    tmp_18_reg_914(11 downto 3) <= tmp_18_fu_533_p3(11 downto 3);
            end if;
        end if;
    end process;
    tmp_5_reg_817(2 downto 0) <= "000";
    tmp_11_reg_822(2 downto 0) <= "000";
    tmp_12_reg_827(2 downto 0) <= "000";
    tmp_13_reg_832(2 downto 0) <= "000";
    tmp_15_reg_899(2 downto 0) <= "000";
    tmp_16_reg_904(2 downto 0) <= "000";
    tmp_17_reg_909(2 downto 0) <= "000";
    tmp_18_reg_914(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, bubble_read_read_fu_208_p2, icmp_ln76_fu_350_p2, icmp_ln76_reg_844, ap_CS_fsm_state2, icmp_ln1073_reg_870, ap_CS_fsm_state4, icmp_ln1073_1_fu_452_p2, icmp_ln1073_1_reg_890, ap_CS_fsm_state7, and_ln65_1_fu_688_p2, and_ln65_1_reg_975, ap_CS_fsm_state9, and_ln65_2_fu_738_p2, icmp_ln66_fu_744_p2, ap_CS_fsm_state3, or_ln79_1_fu_435_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((bubble_read_read_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln76_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((or_ln79_1_fu_435_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln1073_1_fu_452_p2 = ap_const_lv1_0) or (icmp_ln1073_reg_870 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = and_ln65_1_fu_688_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((bubble_read_read_fu_208_p2 = ap_const_lv1_1) or ((icmp_ln76_reg_844 = ap_const_lv1_0) or ((icmp_ln1073_reg_870 = ap_const_lv1_1) or ((icmp_ln1073_1_reg_890 = ap_const_lv1_0) or ((icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975)))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (icmp_ln1073_reg_870 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln65_1_reg_975) and (icmp_ln76_reg_844 = ap_const_lv1_1)) or ((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (icmp_ln1073_reg_870 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln65_2_fu_738_p2) and (icmp_ln76_reg_844 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln55_fu_457_p2 <= std_logic_vector(unsigned(i_1_fu_120) + unsigned(ap_const_lv8_1));
    add_ln61_fu_589_p2 <= std_logic_vector(unsigned(j_reg_266) + unsigned(ap_const_lv64_1));
    add_ln65_1_fu_494_p2 <= std_logic_vector(unsigned(tmp_12_reg_827) + unsigned(zext_ln65_1_fu_490_p1));
    add_ln65_2_fu_511_p2 <= std_logic_vector(unsigned(tmp_11_reg_822) + unsigned(zext_ln65_2_fu_507_p1));
    add_ln65_3_fu_528_p2 <= std_logic_vector(unsigned(tmp_5_reg_817) + unsigned(zext_ln65_3_fu_524_p1));
    add_ln65_4_fu_545_p2 <= std_logic_vector(unsigned(tmp_15_reg_899) + unsigned(trunc_ln65_fu_541_p1));
    add_ln65_5_fu_555_p2 <= std_logic_vector(unsigned(tmp_16_reg_904) + unsigned(trunc_ln65_fu_541_p1));
    add_ln65_6_fu_565_p2 <= std_logic_vector(unsigned(tmp_17_reg_909) + unsigned(trunc_ln65_fu_541_p1));
    add_ln65_7_fu_570_p2 <= std_logic_vector(unsigned(tmp_18_reg_914) + unsigned(trunc_ln65_fu_541_p1));
    add_ln65_fu_477_p2 <= std_logic_vector(unsigned(tmp_13_reg_832) + unsigned(zext_ln65_fu_473_p1));
    add_ln76_fu_356_p2 <= std_logic_vector(unsigned(i_fu_116) + unsigned(ap_const_lv4_1));
    and_ln65_1_fu_688_p2 <= (grp_fu_295_p2 and and_ln65_fu_682_p2);
    and_ln65_2_fu_738_p2 <= (or_ln65_2_fu_734_p2 and grp_fu_295_p2);
    and_ln65_fu_682_p2 <= (or_ln65_fu_660_p2 and or_ln65_1_fu_676_p2);
    and_ln79_fu_429_p2 <= (or_ln79_fu_419_p2 and or_ln79_2_fu_423_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_condition_593_assign_proc : process(bubble_read_read_fu_208_p2, icmp_ln76_reg_844, icmp_ln1073_1_reg_890, and_ln65_1_reg_975, ap_CS_fsm_state9, and_ln65_2_fu_738_p2, icmp_ln66_fu_744_p2)
    begin
                ap_condition_593 <= ((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln66_fu_744_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975) and (icmp_ln76_reg_844 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, bubble_read_read_fu_208_p2, icmp_ln76_reg_844, icmp_ln1073_reg_870, icmp_ln1073_1_reg_890, and_ln65_1_reg_975, ap_CS_fsm_state9, and_ln65_2_fu_738_p2, icmp_ln66_fu_744_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and ((bubble_read_read_fu_208_p2 = ap_const_lv1_1) or ((icmp_ln76_reg_844 = ap_const_lv1_0) or ((icmp_ln1073_reg_870 = ap_const_lv1_1) or ((icmp_ln1073_1_reg_890 = ap_const_lv1_0) or ((icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975))))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln464_phi_fu_282_p8_assign_proc : process(bubble_read_read_fu_208_p2, icmp_ln76_reg_844, icmp_ln1073_reg_870, icmp_ln1073_1_reg_890, and_ln65_1_reg_975, ap_CS_fsm_state9, and_ln65_2_fu_738_p2, icmp_ln66_fu_744_p2, phi_ln464_reg_278)
    begin
        if (((bubble_read_read_fu_208_p2 = ap_const_lv1_0) and (icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1073_1_reg_890 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975) and (icmp_ln1073_reg_870 = ap_const_lv1_0) and (icmp_ln76_reg_844 = ap_const_lv1_1))) then 
            ap_phi_mux_phi_ln464_phi_fu_282_p8 <= ap_const_lv1_0;
        else 
            ap_phi_mux_phi_ln464_phi_fu_282_p8 <= phi_ln464_reg_278;
        end if; 
    end process;


    ap_ready_assign_proc : process(bubble_read_read_fu_208_p2, icmp_ln76_reg_844, icmp_ln1073_reg_870, icmp_ln1073_1_reg_890, and_ln65_1_reg_975, ap_CS_fsm_state9, and_ln65_2_fu_738_p2, icmp_ln66_fu_744_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((bubble_read_read_fu_208_p2 = ap_const_lv1_1) or ((icmp_ln76_reg_844 = ap_const_lv1_0) or ((icmp_ln1073_reg_870 = ap_const_lv1_1) or ((icmp_ln1073_1_reg_890 = ap_const_lv1_0) or ((icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975)))))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(bubble_read_read_fu_208_p2, icmp_ln76_reg_844, icmp_ln1073_reg_870, icmp_ln1073_1_reg_890, and_ln65_1_reg_975, ap_CS_fsm_state9, and_ln65_2_fu_738_p2, icmp_ln66_fu_744_p2, ap_phi_mux_phi_ln464_phi_fu_282_p8, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and ((bubble_read_read_fu_208_p2 = ap_const_lv1_1) or ((icmp_ln76_reg_844 = ap_const_lv1_0) or ((icmp_ln1073_reg_870 = ap_const_lv1_1) or ((icmp_ln1073_1_reg_890 = ap_const_lv1_0) or ((icmp_ln66_fu_744_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln65_2_fu_738_p2) and (ap_const_lv1_1 = and_ln65_1_reg_975)))))))) then 
            ap_return <= ap_phi_mux_phi_ln464_phi_fu_282_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln65_1_fu_643_p1 <= tmp_1_reg_939;
    bitcast_ln65_2_fu_704_p1 <= tmp_2_fu_694_p4;
    bitcast_ln65_fu_605_p1 <= tmp_fu_595_p4;
    bitcast_ln79_fu_379_p1 <= p_x_assign_fu_362_p10;
    bubble_read_read_fu_208_p2 <= bubble;

    grp_fu_295_opcode_assign_proc : process(icmp_ln76_fu_350_p2, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_295_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_295_opcode <= ap_const_lv5_5;
        elsif (((icmp_ln76_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_295_opcode <= ap_const_lv5_8;
        else 
            grp_fu_295_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_295_p0_assign_proc : process(ap_CS_fsm_state2, p_x_assign_fu_362_p10, tmp_fu_595_p4, ap_CS_fsm_state6, tmp_2_fu_694_p4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_295_p0 <= tmp_2_fu_694_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_295_p0 <= tmp_fu_595_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_295_p0 <= p_x_assign_fu_362_p10;
        else 
            grp_fu_295_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_295_p1_assign_proc : process(ap_CS_fsm_state2, tmp_1_reg_939, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_295_p1 <= tmp_1_reg_939;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_295_p1 <= ap_const_lv32_0;
        else 
            grp_fu_295_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln1073_1_fu_452_p2 <= "1" when (unsigned(i_1_fu_120) < unsigned(n_regions)) else "0";
    icmp_ln1073_fu_409_p2 <= "1" when (n_regions = ap_const_lv8_0) else "0";
    icmp_ln65_1_fu_629_p2 <= "1" when (trunc_ln65_1_fu_619_p1 = ap_const_lv23_0) else "0";
    icmp_ln65_2_fu_664_p2 <= "0" when (tmp_8_fu_646_p4 = ap_const_lv8_FF) else "1";
    icmp_ln65_3_fu_670_p2 <= "1" when (trunc_ln65_2_fu_656_p1 = ap_const_lv23_0) else "0";
    icmp_ln65_4_fu_722_p2 <= "0" when (tmp_s_fu_708_p4 = ap_const_lv8_FF) else "1";
    icmp_ln65_5_fu_728_p2 <= "1" when (trunc_ln65_3_fu_718_p1 = ap_const_lv23_0) else "0";
    icmp_ln65_fu_623_p2 <= "0" when (tmp_7_fu_609_p4 = ap_const_lv8_FF) else "1";
    icmp_ln66_fu_744_p2 <= "1" when (j_reg_266 = ap_const_lv64_7) else "0";
    icmp_ln76_fu_350_p2 <= "1" when (i_fu_116 = ap_const_lv4_8) else "0";
    icmp_ln79_1_fu_403_p2 <= "1" when (trunc_ln79_fu_393_p1 = ap_const_lv23_0) else "0";
    icmp_ln79_fu_397_p2 <= "0" when (tmp_3_fu_383_p4 = ap_const_lv8_FF) else "1";
    or_ln65_1_fu_676_p2 <= (icmp_ln65_3_fu_670_p2 or icmp_ln65_2_fu_664_p2);
    or_ln65_2_fu_734_p2 <= (icmp_ln65_5_reg_989 or icmp_ln65_4_reg_984);
    or_ln65_fu_660_p2 <= (icmp_ln65_reg_955 or icmp_ln65_1_reg_960);
    or_ln79_1_fu_435_p2 <= (grp_fu_295_p2 or and_ln79_fu_429_p2);
    or_ln79_2_fu_423_p2 <= (grp_fu_305_p2 or grp_fu_300_p2);
    or_ln79_fu_419_p2 <= (icmp_ln79_reg_860 or icmp_ln79_1_reg_865);
    regions_max_0_address0 <= zext_ln65_6_fu_635_p1(12 - 1 downto 0);

    regions_max_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_max_0_ce0 <= ap_const_logic_1;
        else 
            regions_max_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    regions_max_1_address0 <= zext_ln65_7_fu_639_p1(12 - 1 downto 0);

    regions_max_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            regions_max_1_ce0 <= ap_const_logic_1;
        else 
            regions_max_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    regions_min_0_address0 <= zext_ln65_4_fu_550_p1(12 - 1 downto 0);

    regions_min_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_min_0_ce0 <= ap_const_logic_1;
        else 
            regions_min_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    regions_min_1_address0 <= zext_ln65_5_fu_560_p1(12 - 1 downto 0);

    regions_min_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            regions_min_1_ce0 <= ap_const_logic_1;
        else 
            regions_min_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_318_p3 <= (regions_max_0_offset & ap_const_lv3_0);
    tmp_12_fu_326_p3 <= (regions_min_1_offset & ap_const_lv3_0);
    tmp_13_fu_334_p3 <= (regions_min_0_offset & ap_const_lv3_0);
    tmp_14_fu_463_p4 <= i_1_fu_120(7 downto 1);
    tmp_15_fu_482_p3 <= (add_ln65_fu_477_p2 & ap_const_lv3_0);
    tmp_16_fu_499_p3 <= (add_ln65_1_fu_494_p2 & ap_const_lv3_0);
    tmp_17_fu_516_p3 <= (add_ln65_2_fu_511_p2 & ap_const_lv3_0);
    tmp_18_fu_533_p3 <= (add_ln65_3_fu_528_p2 & ap_const_lv3_0);
    tmp_3_fu_383_p4 <= bitcast_ln79_fu_379_p1(30 downto 23);
    tmp_5_fu_310_p3 <= (regions_max_1_offset & ap_const_lv3_0);
    tmp_7_fu_609_p4 <= bitcast_ln65_fu_605_p1(30 downto 23);
    tmp_8_fu_646_p4 <= bitcast_ln65_1_fu_643_p1(30 downto 23);
    tmp_s_fu_708_p4 <= bitcast_ln65_2_fu_704_p1(30 downto 23);
    trunc_ln1073_fu_448_p1 <= i_1_fu_120(1 - 1 downto 0);
    trunc_ln65_1_fu_619_p1 <= bitcast_ln65_fu_605_p1(23 - 1 downto 0);
    trunc_ln65_2_fu_656_p1 <= bitcast_ln65_1_fu_643_p1(23 - 1 downto 0);
    trunc_ln65_3_fu_718_p1 <= bitcast_ln65_2_fu_704_p1(23 - 1 downto 0);
    trunc_ln65_fu_541_p1 <= j_reg_266(12 - 1 downto 0);
    trunc_ln79_fu_393_p1 <= bitcast_ln79_fu_379_p1(23 - 1 downto 0);
    zext_ln65_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_463_p4),9));
    zext_ln65_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_463_p4),9));
    zext_ln65_3_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_463_p4),9));
    zext_ln65_4_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_4_fu_545_p2),64));
    zext_ln65_5_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_5_fu_555_p2),64));
    zext_ln65_6_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_6_reg_929),64));
    zext_ln65_7_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_7_reg_934),64));
    zext_ln65_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_463_p4),9));
end behav;
