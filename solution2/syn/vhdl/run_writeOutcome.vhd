-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_writeOutcome is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    errorInTask_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    errorInTask_ce0 : OUT STD_LOGIC;
    errorInTask_we0 : OUT STD_LOGIC;
    errorInTask_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (3 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (0 downto 0);
    toScheduler_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    toScheduler_TVALID : OUT STD_LOGIC;
    toScheduler_TREADY : IN STD_LOGIC;
    outcomeInRam_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outcomeInRam_ce0 : OUT STD_LOGIC;
    outcomeInRam_we0 : OUT STD_LOGIC_VECTOR (35 downto 0);
    outcomeInRam_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
    data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_1_empty_n : IN STD_LOGIC;
    data_1_read : OUT STD_LOGIC;
    data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_2_empty_n : IN STD_LOGIC;
    data_2_read : OUT STD_LOGIC;
    data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_3_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_3_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_3_empty_n : IN STD_LOGIC;
    data_3_read : OUT STD_LOGIC;
    data_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_4_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_4_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_4_empty_n : IN STD_LOGIC;
    data_4_read : OUT STD_LOGIC;
    data_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_5_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_5_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_5_empty_n : IN STD_LOGIC;
    data_5_read : OUT STD_LOGIC;
    data_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_6_empty_n : IN STD_LOGIC;
    data_6_read : OUT STD_LOGIC;
    data_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    data_7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    data_7_empty_n : IN STD_LOGIC;
    data_7_read : OUT STD_LOGIC );
end;


architecture behav of run_writeOutcome is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv36_FFFFFFFFD : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal toScheduler_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond4_i_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read_1_read_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_blk_n : STD_LOGIC;
    signal data_1_blk_n : STD_LOGIC;
    signal data_2_blk_n : STD_LOGIC;
    signal data_3_blk_n : STD_LOGIC;
    signal data_4_blk_n : STD_LOGIC;
    signal data_5_blk_n : STD_LOGIC;
    signal data_6_blk_n : STD_LOGIC;
    signal data_7_blk_n : STD_LOGIC;
    signal data_7_read_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_read_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_read_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_read_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_read_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_read_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_read_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_read_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal errorInTask1_cast_i_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal errorInTask1_cast_i_reg_482 : STD_LOGIC_VECTOR (63 downto 0);
    signal outcome_AOV_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outcome_AOV_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_1_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_2_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outcome_AOV_load_3_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_4_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal outcome_AOV_load_5_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal outcome_AOV_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal outcome_AOV_ce0 : STD_LOGIC;
    signal outcome_AOV_we0 : STD_LOGIC;
    signal outcome_AOV_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal outcome_AOV_ce1 : STD_LOGIC;
    signal loop_index3_cast_i_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index3_i_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_39_fu_339_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_predicate_op58_write_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_i_fu_345_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal empty_47_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_46_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_45_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_44_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_43_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_42_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_mux_84_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_writeOutcome_outcome_AOV_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    outcome_AOV_U : component run_writeOutcome_outcome_AOV_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outcome_AOV_address0,
        ce0 => outcome_AOV_ce0,
        we0 => outcome_AOV_we0,
        d0 => tmp_i_fu_345_p10,
        q0 => outcome_AOV_q0,
        address1 => outcome_AOV_address1,
        ce1 => outcome_AOV_ce1,
        q1 => outcome_AOV_q1);

    mux_84_32_1_1_U638 : component run_mux_84_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => data_read_reg_477,
        din1 => data_1_read_reg_472,
        din2 => data_2_read_reg_467,
        din3 => data_3_read_reg_462,
        din4 => data_4_read_reg_457,
        din5 => data_5_read_reg_452,
        din6 => data_6_read_reg_447,
        din7 => data_7_read_reg_442,
        din8 => loop_index3_i_fu_116,
        dout => tmp_i_fu_345_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    loop_index3_i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_index3_i_fu_116 <= ap_const_lv4_0;
            elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_i_fu_333_p2 = ap_const_lv1_0))) then 
                loop_index3_i_fu_116 <= empty_39_fu_339_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_1_read_reg_472 <= data_1_dout;
                data_2_read_reg_467 <= data_2_dout;
                data_3_read_reg_462 <= data_3_dout;
                data_4_read_reg_457 <= data_4_dout;
                data_5_read_reg_452 <= data_5_dout;
                data_6_read_reg_447 <= data_6_dout;
                data_7_read_reg_442 <= data_7_dout;
                data_read_reg_477 <= data_dout;
                    errorInTask1_cast_i_reg_482(3 downto 0) <= errorInTask1_cast_i_fu_316_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                outcome_AOV_load_1_reg_510 <= outcome_AOV_q0;
                outcome_AOV_load_reg_505 <= outcome_AOV_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                outcome_AOV_load_2_reg_525 <= outcome_AOV_q0;
                outcome_AOV_load_3_reg_530 <= outcome_AOV_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                outcome_AOV_load_4_reg_545 <= outcome_AOV_q0;
                outcome_AOV_load_5_reg_550 <= outcome_AOV_q1;
            end if;
        end if;
    end process;
    errorInTask1_cast_i_reg_482(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_read4, toScheduler_TREADY, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n, ap_CS_fsm_state2, exitcond4_i_fu_333_p2, p_read_1_read_fu_124_p2, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (p_read_1_read_fu_124_p2 = ap_const_lv1_0) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (p_read4 = ap_const_lv1_1) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_i_fu_333_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if (((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(toScheduler_TREADY, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
                ap_block_state1 <= ((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(toScheduler_TREADY, ap_predicate_op58_write_state2)
    begin
                ap_block_state2 <= ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1));
    end process;


    ap_block_state2_io_assign_proc : process(toScheduler_TREADY, ap_predicate_op58_write_state2)
    begin
                ap_block_state2_io <= ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op58_write_state2_assign_proc : process(p_read4, exitcond4_i_fu_333_p2)
    begin
                ap_predicate_op58_write_state2 <= ((p_read4 = ap_const_lv1_1) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_1_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_1_blk_n <= data_1_empty_n;
        else 
            data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_1_read <= ap_const_logic_1;
        else 
            data_1_read <= ap_const_logic_0;
        end if; 
    end process;


    data_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_2_blk_n <= data_2_empty_n;
        else 
            data_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_2_read <= ap_const_logic_1;
        else 
            data_2_read <= ap_const_logic_0;
        end if; 
    end process;


    data_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_3_blk_n <= data_3_empty_n;
        else 
            data_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_3_read <= ap_const_logic_1;
        else 
            data_3_read <= ap_const_logic_0;
        end if; 
    end process;


    data_4_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_4_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_4_blk_n <= data_4_empty_n;
        else 
            data_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_4_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_4_read <= ap_const_logic_1;
        else 
            data_4_read <= ap_const_logic_0;
        end if; 
    end process;


    data_5_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_5_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_5_blk_n <= data_5_empty_n;
        else 
            data_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_5_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_5_read <= ap_const_logic_1;
        else 
            data_5_read <= ap_const_logic_0;
        end if; 
    end process;


    data_6_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_6_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_6_blk_n <= data_6_empty_n;
        else 
            data_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_6_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_6_read <= ap_const_logic_1;
        else 
            data_6_read <= ap_const_logic_0;
        end if; 
    end process;


    data_7_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_7_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_7_blk_n <= data_7_empty_n;
        else 
            data_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_7_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_7_read <= ap_const_logic_1;
        else 
            data_7_read <= ap_const_logic_0;
        end if; 
    end process;


    data_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_empty_n, data_1_empty_n, data_2_empty_n, data_3_empty_n, data_4_empty_n, data_5_empty_n, data_6_empty_n, data_7_empty_n)
    begin
        if ((not(((data_7_empty_n = ap_const_logic_0) or (data_6_empty_n = ap_const_logic_0) or (data_5_empty_n = ap_const_logic_0) or (data_4_empty_n = ap_const_logic_0) or (data_3_empty_n = ap_const_logic_0) or (data_2_empty_n = ap_const_logic_0) or (data_1_empty_n = ap_const_logic_0) or (data_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_39_fu_339_p2 <= std_logic_vector(unsigned(loop_index3_i_fu_116) + unsigned(ap_const_lv4_1));
    empty_40_fu_365_p1 <= outcome_AOV_load_reg_505;
    empty_41_fu_368_p1 <= outcome_AOV_load_1_reg_510;
    empty_42_fu_371_p1 <= outcome_AOV_load_2_reg_525;
    empty_43_fu_374_p1 <= outcome_AOV_load_3_reg_530;
    empty_44_fu_377_p1 <= outcome_AOV_load_4_reg_545;
    empty_45_fu_380_p1 <= outcome_AOV_load_5_reg_550;
    empty_46_fu_383_p1 <= outcome_AOV_q0;
    empty_47_fu_387_p1 <= outcome_AOV_q1;
    errorInTask1_cast_i_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),64));
    errorInTask_address0 <= errorInTask1_cast_i_reg_482(4 - 1 downto 0);

    errorInTask_ce0_assign_proc : process(toScheduler_TREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            errorInTask_ce0 <= ap_const_logic_1;
        else 
            errorInTask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    errorInTask_d0 <= ap_const_lv1_1;

    errorInTask_we0_assign_proc : process(p_read4, toScheduler_TREADY, ap_CS_fsm_state2, exitcond4_i_fu_333_p2, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (p_read4 = ap_const_lv1_1) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1))) then 
            errorInTask_we0 <= ap_const_logic_1;
        else 
            errorInTask_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond4_i_fu_333_p2 <= "1" when (loop_index3_i_fu_116 = ap_const_lv4_8) else "0";
    loop_index3_cast_i_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index3_i_fu_116),64));
    outcomeInRam_address0 <= ap_const_lv64_0(4 - 1 downto 0);

    outcomeInRam_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            outcomeInRam_ce0 <= ap_const_logic_1;
        else 
            outcomeInRam_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outcomeInRam_d0 <= ((((((((((empty_47_fu_387_p1 & empty_46_fu_383_p1) & empty_45_fu_380_p1) & empty_44_fu_377_p1) & empty_43_fu_374_p1) & empty_42_fu_371_p1) & empty_41_fu_368_p1) & empty_40_fu_365_p1) & p_read3) & ap_const_lv8_0) & p_read1);

    outcomeInRam_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outcomeInRam_we0 <= ap_const_lv36_FFFFFFFFD;
        else 
            outcomeInRam_we0 <= ap_const_lv36_0;
        end if; 
    end process;


    outcome_AOV_address0_assign_proc : process(p_read4, ap_CS_fsm_state2, exitcond4_i_fu_333_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, loop_index3_cast_i_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outcome_AOV_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outcome_AOV_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outcome_AOV_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (p_read4 = ap_const_lv1_1) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1))) then 
            outcome_AOV_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_i_fu_333_p2 = ap_const_lv1_0))) then 
            outcome_AOV_address0 <= loop_index3_cast_i_fu_328_p1(3 - 1 downto 0);
        else 
            outcome_AOV_address0 <= "XXX";
        end if; 
    end process;


    outcome_AOV_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outcome_AOV_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outcome_AOV_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outcome_AOV_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            outcome_AOV_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            outcome_AOV_address1 <= "XXX";
        end if; 
    end process;


    outcome_AOV_ce0_assign_proc : process(p_read4, toScheduler_TREADY, ap_CS_fsm_state2, exitcond4_i_fu_333_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_i_fu_333_p2 = ap_const_lv1_0)) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (p_read4 = ap_const_lv1_1) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1)))) then 
            outcome_AOV_ce0 <= ap_const_logic_1;
        else 
            outcome_AOV_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outcome_AOV_ce1_assign_proc : process(toScheduler_TREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            outcome_AOV_ce1 <= ap_const_logic_1;
        else 
            outcome_AOV_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outcome_AOV_we0_assign_proc : process(toScheduler_TREADY, ap_CS_fsm_state2, exitcond4_i_fu_333_p2, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_i_fu_333_p2 = ap_const_lv1_0))) then 
            outcome_AOV_we0 <= ap_const_logic_1;
        else 
            outcome_AOV_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_read_1_read_fu_124_p2 <= p_read4;
    toScheduler_TDATA <= p_read2;

    toScheduler_TDATA_blk_n_assign_proc : process(p_read4, toScheduler_TREADY, ap_CS_fsm_state2, exitcond4_i_fu_333_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (p_read4 = ap_const_lv1_1) and (exitcond4_i_fu_333_p2 = ap_const_lv1_1))) then 
            toScheduler_TDATA_blk_n <= toScheduler_TREADY;
        else 
            toScheduler_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    toScheduler_TVALID_assign_proc : process(toScheduler_TREADY, ap_CS_fsm_state2, ap_predicate_op58_write_state2, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state2_io) or ((toScheduler_TREADY = ap_const_logic_0) and (ap_predicate_op58_write_state2 = ap_const_boolean_1)))) and (ap_predicate_op58_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            toScheduler_TVALID <= ap_const_logic_1;
        else 
            toScheduler_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
