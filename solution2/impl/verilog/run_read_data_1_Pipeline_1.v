// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_read_data_1_Pipeline_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dest_AOV_address0,
        dest_AOV_ce0,
        dest_AOV_q0,
        AOV_7_c102_0_out,
        AOV_7_c102_0_out_ap_vld,
        AOV_6_c101_0_out,
        AOV_6_c101_0_out_ap_vld,
        AOV_5_c100_0_out,
        AOV_5_c100_0_out_ap_vld,
        AOV_4_c99_0_out,
        AOV_4_c99_0_out_ap_vld,
        AOV_3_c98_0_out,
        AOV_3_c98_0_out_ap_vld,
        AOV_2_c97_0_out,
        AOV_2_c97_0_out_ap_vld,
        AOV_1_c96_0_out,
        AOV_1_c96_0_out_ap_vld,
        AOV_c95_0_out,
        AOV_c95_0_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] dest_AOV_address0;
output   dest_AOV_ce0;
input  [31:0] dest_AOV_q0;
output  [31:0] AOV_7_c102_0_out;
output   AOV_7_c102_0_out_ap_vld;
output  [31:0] AOV_6_c101_0_out;
output   AOV_6_c101_0_out_ap_vld;
output  [31:0] AOV_5_c100_0_out;
output   AOV_5_c100_0_out_ap_vld;
output  [31:0] AOV_4_c99_0_out;
output   AOV_4_c99_0_out_ap_vld;
output  [31:0] AOV_3_c98_0_out;
output   AOV_3_c98_0_out_ap_vld;
output  [31:0] AOV_2_c97_0_out;
output   AOV_2_c97_0_out_ap_vld;
output  [31:0] AOV_1_c96_0_out;
output   AOV_1_c96_0_out_ap_vld;
output  [31:0] AOV_c95_0_out;
output   AOV_c95_0_out_ap_vld;

reg ap_idle;
reg dest_AOV_ce0;
reg AOV_7_c102_0_out_ap_vld;
reg AOV_6_c101_0_out_ap_vld;
reg AOV_5_c100_0_out_ap_vld;
reg AOV_4_c99_0_out_ap_vld;
reg AOV_3_c98_0_out_ap_vld;
reg AOV_2_c97_0_out_ap_vld;
reg AOV_1_c96_0_out_ap_vld;
reg AOV_c95_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond1_fu_169_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] empty_195_fu_186_p1;
reg   [2:0] empty_195_reg_330;
wire   [63:0] loop_index_cast1_fu_181_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] loop_index_fu_56;
wire   [3:0] empty_fu_175_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_loop_index_load;
reg   [31:0] AOV_c95_0_fu_60;
reg   [31:0] AOV_1_c96_0_fu_64;
reg   [31:0] AOV_2_c97_0_fu_68;
reg   [31:0] AOV_3_c98_0_fu_72;
reg   [31:0] AOV_4_c99_0_fu_76;
reg   [31:0] AOV_5_c100_0_fu_80;
reg   [31:0] AOV_6_c101_0_fu_84;
reg   [31:0] AOV_7_c102_0_fu_88;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

run_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond1_fu_169_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            loop_index_fu_56 <= empty_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_fu_56 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_1_c96_0_fu_64 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_2_c97_0_fu_68 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_3_c98_0_fu_72 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_4_c99_0_fu_76 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_5_c100_0_fu_80 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_6_c101_0_fu_84 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_7_c102_0_fu_88 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_195_reg_330 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_c95_0_fu_60 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_169_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_195_reg_330 <= empty_195_fu_186_p1;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_1_c96_0_out_ap_vld = 1'b1;
    end else begin
        AOV_1_c96_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_2_c97_0_out_ap_vld = 1'b1;
    end else begin
        AOV_2_c97_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_3_c98_0_out_ap_vld = 1'b1;
    end else begin
        AOV_3_c98_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_4_c99_0_out_ap_vld = 1'b1;
    end else begin
        AOV_4_c99_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_5_c100_0_out_ap_vld = 1'b1;
    end else begin
        AOV_5_c100_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_6_c101_0_out_ap_vld = 1'b1;
    end else begin
        AOV_6_c101_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_7_c102_0_out_ap_vld = 1'b1;
    end else begin
        AOV_7_c102_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AOV_c95_0_out_ap_vld = 1'b1;
    end else begin
        AOV_c95_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_169_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_loop_index_load = 4'd0;
    end else begin
        ap_sig_allocacmp_loop_index_load = loop_index_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_AOV_ce0 = 1'b1;
    end else begin
        dest_AOV_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AOV_1_c96_0_out = AOV_1_c96_0_fu_64;

assign AOV_2_c97_0_out = AOV_2_c97_0_fu_68;

assign AOV_3_c98_0_out = AOV_3_c98_0_fu_72;

assign AOV_4_c99_0_out = AOV_4_c99_0_fu_76;

assign AOV_5_c100_0_out = AOV_5_c100_0_fu_80;

assign AOV_6_c101_0_out = AOV_6_c101_0_fu_84;

assign AOV_7_c102_0_out = AOV_7_c102_0_fu_88;

assign AOV_c95_0_out = AOV_c95_0_fu_60;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dest_AOV_address0 = loop_index_cast1_fu_181_p1;

assign empty_195_fu_186_p1 = ap_sig_allocacmp_loop_index_load[2:0];

assign empty_fu_175_p2 = (ap_sig_allocacmp_loop_index_load + 4'd1);

assign exitcond1_fu_169_p2 = ((ap_sig_allocacmp_loop_index_load == 4'd8) ? 1'b1 : 1'b0);

assign loop_index_cast1_fu_181_p1 = ap_sig_allocacmp_loop_index_load;

endmodule //run_read_data_1_Pipeline_1
