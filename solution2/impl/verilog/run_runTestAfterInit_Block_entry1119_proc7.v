// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_runTestAfterInit_Block_entry1119_proc7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        errorInTask_address0,
        errorInTask_ce0,
        errorInTask_we0,
        errorInTask_d0,
        errorInTask_q0,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        copyInputAOV_in_dout,
        copyInputAOV_in_num_data_valid,
        copyInputAOV_in_fifo_cap,
        copyInputAOV_in_empty_n,
        copyInputAOV_in_read,
        copyInputAOV_out,
        copyInputAOV_out_ap_vld,
        p_read311,
        toScheduler_TDATA,
        toScheduler_TVALID,
        toScheduler_TREADY,
        outcomeInRam_address0,
        outcomeInRam_ce0,
        outcomeInRam_we0,
        outcomeInRam_d0,
        regions_address0,
        regions_ce0,
        regions_we0,
        regions_d0,
        regions_q0,
        regions_address1,
        regions_ce1,
        regions_we1,
        regions_d1,
        regions_q1,
        regions_1_address0,
        regions_1_ce0,
        regions_1_we0,
        regions_1_d0,
        regions_1_q0,
        regions_1_address1,
        regions_1_ce1,
        regions_1_we1,
        regions_1_d1,
        regions_1_q1,
        regions_2_address0,
        regions_2_ce0,
        regions_2_we0,
        regions_2_d0,
        regions_2_q0,
        regions_2_address1,
        regions_2_ce1,
        regions_2_we1,
        regions_2_d1,
        regions_2_q1,
        regions_3_address0,
        regions_3_ce0,
        regions_3_we0,
        regions_3_d0,
        regions_3_q0,
        regions_3_address1,
        regions_3_ce1,
        regions_3_we1,
        regions_3_d1,
        regions_3_q1,
        regions_4_address0,
        regions_4_ce0,
        regions_4_we0,
        regions_4_d0,
        regions_4_q0,
        regions_4_address1,
        regions_4_ce1,
        regions_4_we1,
        regions_4_d1,
        regions_4_q1,
        regions_5_address0,
        regions_5_ce0,
        regions_5_we0,
        regions_5_d0,
        regions_5_q0,
        regions_5_address1,
        regions_5_ce1,
        regions_5_we1,
        regions_5_d1,
        regions_5_q1,
        n_regions_V_address0,
        n_regions_V_ce0,
        n_regions_V_we0,
        n_regions_V_d0,
        n_regions_V_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
output  [3:0] errorInTask_address0;
output   errorInTask_ce0;
output   errorInTask_we0;
output  [0:0] errorInTask_d0;
input  [0:0] errorInTask_q0;
input  [7:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [7:0] copyInputAOV_in_dout;
input  [1:0] copyInputAOV_in_num_data_valid;
input  [1:0] copyInputAOV_in_fifo_cap;
input   copyInputAOV_in_empty_n;
output   copyInputAOV_in_read;
output  [7:0] copyInputAOV_out;
output   copyInputAOV_out_ap_vld;
input  [15:0] p_read311;
output  [7:0] toScheduler_TDATA;
output   toScheduler_TVALID;
input   toScheduler_TREADY;
output  [3:0] outcomeInRam_address0;
output   outcomeInRam_ce0;
output  [35:0] outcomeInRam_we0;
output  [287:0] outcomeInRam_d0;
output  [11:0] regions_address0;
output   regions_ce0;
output   regions_we0;
output  [31:0] regions_d0;
input  [31:0] regions_q0;
output  [11:0] regions_address1;
output   regions_ce1;
output   regions_we1;
output  [31:0] regions_d1;
input  [31:0] regions_q1;
output  [11:0] regions_1_address0;
output   regions_1_ce0;
output   regions_1_we0;
output  [31:0] regions_1_d0;
input  [31:0] regions_1_q0;
output  [11:0] regions_1_address1;
output   regions_1_ce1;
output   regions_1_we1;
output  [31:0] regions_1_d1;
input  [31:0] regions_1_q1;
output  [11:0] regions_2_address0;
output   regions_2_ce0;
output   regions_2_we0;
output  [31:0] regions_2_d0;
input  [31:0] regions_2_q0;
output  [11:0] regions_2_address1;
output   regions_2_ce1;
output   regions_2_we1;
output  [31:0] regions_2_d1;
input  [31:0] regions_2_q1;
output  [11:0] regions_3_address0;
output   regions_3_ce0;
output   regions_3_we0;
output  [31:0] regions_3_d0;
input  [31:0] regions_3_q0;
output  [11:0] regions_3_address1;
output   regions_3_ce1;
output   regions_3_we1;
output  [31:0] regions_3_d1;
input  [31:0] regions_3_q1;
output  [11:0] regions_4_address0;
output   regions_4_ce0;
output   regions_4_we0;
output  [31:0] regions_4_d0;
input  [31:0] regions_4_q0;
output  [11:0] regions_4_address1;
output   regions_4_ce1;
output   regions_4_we1;
output  [31:0] regions_4_d1;
input  [31:0] regions_4_q1;
output  [11:0] regions_5_address0;
output   regions_5_ce0;
output   regions_5_we0;
output  [31:0] regions_5_d0;
input  [31:0] regions_5_q0;
output  [11:0] regions_5_address1;
output   regions_5_ce1;
output   regions_5_we1;
output  [31:0] regions_5_d1;
input  [31:0] regions_5_q1;
output  [5:0] n_regions_V_address0;
output   n_regions_V_ce0;
output   n_regions_V_we0;
output  [7:0] n_regions_V_d0;
input  [7:0] n_regions_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] errorInTask_address0;
reg errorInTask_ce0;
reg errorInTask_we0;
reg copyInputAOV_in_read;
reg[7:0] copyInputAOV_out;
reg copyInputAOV_out_ap_vld;
reg[11:0] regions_address0;
reg regions_ce0;
reg regions_we0;
reg[11:0] regions_address1;
reg regions_ce1;
reg regions_we1;
reg[11:0] regions_1_address0;
reg regions_1_ce0;
reg regions_1_we0;
reg[11:0] regions_1_address1;
reg regions_1_ce1;
reg regions_1_we1;
reg[11:0] regions_2_address0;
reg regions_2_ce0;
reg regions_2_we0;
reg[11:0] regions_2_address1;
reg regions_2_ce1;
reg regions_2_we1;
reg[11:0] regions_3_address0;
reg regions_3_ce0;
reg regions_3_we0;
reg[11:0] regions_3_address1;
reg regions_3_ce1;
reg regions_3_we1;
reg[11:0] regions_4_address0;
reg regions_4_ce0;
reg regions_4_we0;
reg[11:0] regions_4_address1;
reg regions_4_ce1;
reg regions_4_we1;
reg[11:0] regions_5_address0;
reg regions_5_ce0;
reg regions_5_we0;
reg[11:0] regions_5_address1;
reg regions_5_ce1;
reg regions_5_we1;
reg[5:0] n_regions_V_address0;
reg n_regions_V_ce0;
reg n_regions_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    copyInputAOV_in_blk_n;
wire   [7:0] p_read12_read_fu_216_p2;
reg   [7:0] copyInputAOV_in_read_reg_592;
wire   [5:0] trunc_ln556_fu_389_p1;
reg   [5:0] trunc_ln556_reg_598;
wire   [31:0] zext_ln552_fu_394_p1;
reg   [31:0] zext_ln552_reg_603;
wire   [5:0] trunc_ln552_fu_399_p1;
reg   [5:0] trunc_ln552_reg_613;
wire    ap_CS_fsm_state3;
wire   [3:0] trunc_ln552_1_fu_402_p1;
reg   [3:0] trunc_ln552_1_reg_618;
reg   [0:0] errorInTask_load_reg_623;
reg   [7:0] n_regions_V_load_reg_639;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln74_fu_413_p2;
reg   [0:0] icmp_ln74_reg_644;
wire    ap_CS_fsm_state5;
wire   [3:0] add_ln74_fu_419_p2;
reg   [3:0] add_ln74_reg_648;
wire   [31:0] p_x_assign_fu_425_p10;
wire   [0:0] icmp_ln76_fu_460_p2;
reg   [0:0] icmp_ln76_reg_660;
wire   [0:0] icmp_ln76_1_fu_466_p2;
reg   [0:0] icmp_ln76_1_reg_665;
wire    grp_insert_point_fu_289_ap_start;
wire    grp_insert_point_fu_289_ap_done;
wire    grp_insert_point_fu_289_ap_idle;
wire    grp_insert_point_fu_289_ap_ready;
wire   [11:0] grp_insert_point_fu_289_regions_min_0_address0;
wire    grp_insert_point_fu_289_regions_min_0_ce0;
wire    grp_insert_point_fu_289_regions_min_0_we0;
wire   [31:0] grp_insert_point_fu_289_regions_min_0_d0;
wire   [11:0] grp_insert_point_fu_289_regions_min_0_address1;
wire    grp_insert_point_fu_289_regions_min_0_ce1;
wire    grp_insert_point_fu_289_regions_min_0_we1;
wire   [31:0] grp_insert_point_fu_289_regions_min_0_d1;
wire   [11:0] grp_insert_point_fu_289_regions_min_1_address0;
wire    grp_insert_point_fu_289_regions_min_1_ce0;
wire    grp_insert_point_fu_289_regions_min_1_we0;
wire   [31:0] grp_insert_point_fu_289_regions_min_1_d0;
wire   [11:0] grp_insert_point_fu_289_regions_min_1_address1;
wire    grp_insert_point_fu_289_regions_min_1_ce1;
wire    grp_insert_point_fu_289_regions_min_1_we1;
wire   [31:0] grp_insert_point_fu_289_regions_min_1_d1;
wire   [11:0] grp_insert_point_fu_289_regions_max_0_address0;
wire    grp_insert_point_fu_289_regions_max_0_ce0;
wire    grp_insert_point_fu_289_regions_max_0_we0;
wire   [31:0] grp_insert_point_fu_289_regions_max_0_d0;
wire   [11:0] grp_insert_point_fu_289_regions_max_0_address1;
wire    grp_insert_point_fu_289_regions_max_0_ce1;
wire    grp_insert_point_fu_289_regions_max_0_we1;
wire   [31:0] grp_insert_point_fu_289_regions_max_0_d1;
wire   [11:0] grp_insert_point_fu_289_regions_max_1_address0;
wire    grp_insert_point_fu_289_regions_max_1_ce0;
wire    grp_insert_point_fu_289_regions_max_1_we0;
wire   [31:0] grp_insert_point_fu_289_regions_max_1_d0;
wire   [11:0] grp_insert_point_fu_289_regions_max_1_address1;
wire    grp_insert_point_fu_289_regions_max_1_ce1;
wire    grp_insert_point_fu_289_regions_max_1_we1;
wire   [31:0] grp_insert_point_fu_289_regions_max_1_d1;
wire   [11:0] grp_insert_point_fu_289_regions_center_0_address0;
wire    grp_insert_point_fu_289_regions_center_0_ce0;
wire    grp_insert_point_fu_289_regions_center_0_we0;
wire   [31:0] grp_insert_point_fu_289_regions_center_0_d0;
wire   [11:0] grp_insert_point_fu_289_regions_center_0_address1;
wire    grp_insert_point_fu_289_regions_center_0_ce1;
wire    grp_insert_point_fu_289_regions_center_0_we1;
wire   [31:0] grp_insert_point_fu_289_regions_center_0_d1;
wire   [11:0] grp_insert_point_fu_289_regions_center_1_address0;
wire    grp_insert_point_fu_289_regions_center_1_ce0;
wire    grp_insert_point_fu_289_regions_center_1_we0;
wire   [31:0] grp_insert_point_fu_289_regions_center_1_d0;
wire   [11:0] grp_insert_point_fu_289_regions_center_1_address1;
wire    grp_insert_point_fu_289_regions_center_1_ce1;
wire    grp_insert_point_fu_289_regions_center_1_we1;
wire   [31:0] grp_insert_point_fu_289_regions_center_1_d1;
wire   [5:0] grp_insert_point_fu_289_n_regions_address0;
wire    grp_insert_point_fu_289_n_regions_ce0;
wire    grp_insert_point_fu_289_n_regions_we0;
wire   [7:0] grp_insert_point_fu_289_n_regions_d0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_673_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_673_p_din1;
wire   [4:0] grp_insert_point_fu_289_grp_fu_673_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_673_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_677_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_677_p_din1;
wire   [4:0] grp_insert_point_fu_289_grp_fu_677_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_677_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_681_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_681_p_din1;
wire   [4:0] grp_insert_point_fu_289_grp_fu_681_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_681_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_685_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_685_p_din1;
wire   [1:0] grp_insert_point_fu_289_grp_fu_685_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_685_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_689_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_689_p_din1;
wire   [0:0] grp_insert_point_fu_289_grp_fu_689_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_689_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_693_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_693_p_din1;
wire   [0:0] grp_insert_point_fu_289_grp_fu_693_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_693_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_697_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_697_p_din1;
wire   [0:0] grp_insert_point_fu_289_grp_fu_697_p_opcode;
wire    grp_insert_point_fu_289_grp_fu_697_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_701_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_701_p_din1;
wire    grp_insert_point_fu_289_grp_fu_701_p_ce;
wire   [31:0] grp_insert_point_fu_289_grp_fu_705_p_din0;
wire   [31:0] grp_insert_point_fu_289_grp_fu_705_p_din1;
wire    grp_insert_point_fu_289_grp_fu_705_p_ce;
wire    grp_find_region_fu_324_ap_start;
wire    grp_find_region_fu_324_ap_done;
wire    grp_find_region_fu_324_ap_idle;
wire    grp_find_region_fu_324_ap_ready;
wire   [11:0] grp_find_region_fu_324_regions_min_0_address0;
wire    grp_find_region_fu_324_regions_min_0_ce0;
wire   [11:0] grp_find_region_fu_324_regions_min_0_address1;
wire    grp_find_region_fu_324_regions_min_0_ce1;
wire   [11:0] grp_find_region_fu_324_regions_min_1_address0;
wire    grp_find_region_fu_324_regions_min_1_ce0;
wire   [11:0] grp_find_region_fu_324_regions_min_1_address1;
wire    grp_find_region_fu_324_regions_min_1_ce1;
wire   [11:0] grp_find_region_fu_324_regions_max_0_address0;
wire    grp_find_region_fu_324_regions_max_0_ce0;
wire   [11:0] grp_find_region_fu_324_regions_max_0_address1;
wire    grp_find_region_fu_324_regions_max_0_ce1;
wire   [11:0] grp_find_region_fu_324_regions_max_1_address0;
wire    grp_find_region_fu_324_regions_max_1_ce0;
wire   [11:0] grp_find_region_fu_324_regions_max_1_address1;
wire    grp_find_region_fu_324_regions_max_1_ce1;
wire   [11:0] grp_find_region_fu_324_regions_center_0_address0;
wire    grp_find_region_fu_324_regions_center_0_ce0;
wire   [11:0] grp_find_region_fu_324_regions_center_0_address1;
wire    grp_find_region_fu_324_regions_center_0_ce1;
wire   [11:0] grp_find_region_fu_324_regions_center_1_address0;
wire    grp_find_region_fu_324_regions_center_1_ce0;
wire   [11:0] grp_find_region_fu_324_regions_center_1_address1;
wire    grp_find_region_fu_324_regions_center_1_ce1;
wire   [31:0] grp_find_region_fu_324_ap_return;
wire   [31:0] grp_find_region_fu_324_grp_fu_685_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_685_p_din1;
wire   [0:0] grp_find_region_fu_324_grp_fu_685_p_opcode;
wire    grp_find_region_fu_324_grp_fu_685_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_689_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_689_p_din1;
wire   [1:0] grp_find_region_fu_324_grp_fu_689_p_opcode;
wire    grp_find_region_fu_324_grp_fu_689_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_693_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_693_p_din1;
wire   [1:0] grp_find_region_fu_324_grp_fu_693_p_opcode;
wire    grp_find_region_fu_324_grp_fu_693_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_697_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_697_p_din1;
wire   [0:0] grp_find_region_fu_324_grp_fu_697_p_opcode;
wire    grp_find_region_fu_324_grp_fu_697_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_701_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_701_p_din1;
wire    grp_find_region_fu_324_grp_fu_701_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_705_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_705_p_din1;
wire    grp_find_region_fu_324_grp_fu_705_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_673_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_673_p_din1;
wire   [4:0] grp_find_region_fu_324_grp_fu_673_p_opcode;
wire    grp_find_region_fu_324_grp_fu_673_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_677_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_677_p_din1;
wire   [4:0] grp_find_region_fu_324_grp_fu_677_p_opcode;
wire    grp_find_region_fu_324_grp_fu_677_p_ce;
wire   [31:0] grp_find_region_fu_324_grp_fu_681_p_din0;
wire   [31:0] grp_find_region_fu_324_grp_fu_681_p_din1;
wire   [4:0] grp_find_region_fu_324_grp_fu_681_p_opcode;
wire    grp_find_region_fu_324_grp_fu_681_p_ce;
wire    grp_writeOutcome_fu_350_ap_start;
wire    grp_writeOutcome_fu_350_ap_done;
wire    grp_writeOutcome_fu_350_ap_idle;
wire    grp_writeOutcome_fu_350_ap_ready;
wire   [3:0] grp_writeOutcome_fu_350_errorInTask_address0;
wire    grp_writeOutcome_fu_350_errorInTask_ce0;
wire    grp_writeOutcome_fu_350_errorInTask_we0;
wire   [0:0] grp_writeOutcome_fu_350_errorInTask_d0;
wire   [7:0] grp_writeOutcome_fu_350_toScheduler_TDATA;
wire    grp_writeOutcome_fu_350_toScheduler_TVALID;
wire    grp_writeOutcome_fu_350_toScheduler_TREADY;
wire   [3:0] grp_writeOutcome_fu_350_outcomeInRam_address0;
wire    grp_writeOutcome_fu_350_outcomeInRam_ce0;
wire   [35:0] grp_writeOutcome_fu_350_outcomeInRam_we0;
wire   [287:0] grp_writeOutcome_fu_350_outcomeInRam_d0;
reg   [0:0] error_reg_261;
wire    ap_CS_fsm_state6;
reg    ap_block_state6_on_subcall_done;
wire   [0:0] or_ln76_2_fu_488_p2;
reg   [7:0] ap_phi_mux_copyInputAOV_copy_1_phi_fu_276_p8;
reg   [7:0] copyInputAOV_copy_1_reg_272;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
reg    ap_predicate_op78_call_state7;
reg    ap_block_state7_on_subcall_done;
reg    grp_insert_point_fu_289_ap_start_reg;
reg    ap_block_state1_ignore_call1;
reg    grp_find_region_fu_324_ap_start_reg;
reg    grp_writeOutcome_fu_350_ap_start_reg;
reg   [3:0] i_fu_146;
reg   [7:0] copyInputAOV_out_preg;
wire   [31:0] bitcast_ln76_fu_442_p1;
wire   [7:0] tmp_1_fu_446_p4;
wire   [22:0] trunc_ln76_fu_456_p1;
wire   [0:0] grp_fu_379_p2;
wire   [0:0] grp_fu_384_p2;
wire   [0:0] or_ln76_fu_472_p2;
wire   [0:0] or_ln76_1_fu_476_p2;
wire   [0:0] and_ln76_fu_482_p2;
wire   [0:0] grp_fu_374_p2;
reg    grp_fu_374_ce;
reg    grp_fu_379_ce;
reg    grp_fu_384_ce;
wire   [0:0] grp_fu_673_p2;
reg   [31:0] grp_fu_673_p0;
reg   [31:0] grp_fu_673_p1;
reg    grp_fu_673_ce;
reg   [4:0] grp_fu_673_opcode;
wire   [0:0] grp_fu_677_p2;
reg   [31:0] grp_fu_677_p0;
reg   [31:0] grp_fu_677_p1;
reg    grp_fu_677_ce;
reg   [4:0] grp_fu_677_opcode;
wire   [0:0] grp_fu_681_p2;
reg   [31:0] grp_fu_681_p0;
reg   [31:0] grp_fu_681_p1;
reg    grp_fu_681_ce;
reg   [4:0] grp_fu_681_opcode;
wire   [31:0] grp_fu_685_p2;
reg   [31:0] grp_fu_685_p0;
reg   [31:0] grp_fu_685_p1;
reg   [1:0] grp_fu_685_opcode;
reg    grp_fu_685_ce;
wire   [31:0] grp_fu_689_p2;
reg   [31:0] grp_fu_689_p0;
reg   [31:0] grp_fu_689_p1;
reg   [1:0] grp_fu_689_opcode;
reg    grp_fu_689_ce;
wire   [31:0] grp_fu_693_p2;
reg   [31:0] grp_fu_693_p0;
reg   [31:0] grp_fu_693_p1;
reg   [1:0] grp_fu_693_opcode;
reg    grp_fu_693_ce;
wire   [31:0] grp_fu_697_p2;
reg   [31:0] grp_fu_697_p0;
reg   [31:0] grp_fu_697_p1;
reg   [1:0] grp_fu_697_opcode;
reg    grp_fu_697_ce;
wire   [31:0] grp_fu_701_p2;
reg   [31:0] grp_fu_701_p0;
reg   [31:0] grp_fu_701_p1;
reg    grp_fu_701_ce;
wire   [31:0] grp_fu_705_p2;
reg   [31:0] grp_fu_705_p0;
reg   [31:0] grp_fu_705_p1;
reg    grp_fu_705_ce;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 grp_insert_point_fu_289_ap_start_reg = 1'b0;
#0 grp_find_region_fu_324_ap_start_reg = 1'b0;
#0 grp_writeOutcome_fu_350_ap_start_reg = 1'b0;
#0 copyInputAOV_out_preg = 8'd0;
end

run_insert_point grp_insert_point_fu_289(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_insert_point_fu_289_ap_start),
    .ap_done(grp_insert_point_fu_289_ap_done),
    .ap_idle(grp_insert_point_fu_289_ap_idle),
    .ap_ready(grp_insert_point_fu_289_ap_ready),
    .regions_min_0_address0(grp_insert_point_fu_289_regions_min_0_address0),
    .regions_min_0_ce0(grp_insert_point_fu_289_regions_min_0_ce0),
    .regions_min_0_we0(grp_insert_point_fu_289_regions_min_0_we0),
    .regions_min_0_d0(grp_insert_point_fu_289_regions_min_0_d0),
    .regions_min_0_q0(regions_q0),
    .regions_min_0_address1(grp_insert_point_fu_289_regions_min_0_address1),
    .regions_min_0_ce1(grp_insert_point_fu_289_regions_min_0_ce1),
    .regions_min_0_we1(grp_insert_point_fu_289_regions_min_0_we1),
    .regions_min_0_d1(grp_insert_point_fu_289_regions_min_0_d1),
    .regions_min_0_q1(regions_q1),
    .regions_min_0_offset(trunc_ln556_reg_598),
    .regions_min_1_address0(grp_insert_point_fu_289_regions_min_1_address0),
    .regions_min_1_ce0(grp_insert_point_fu_289_regions_min_1_ce0),
    .regions_min_1_we0(grp_insert_point_fu_289_regions_min_1_we0),
    .regions_min_1_d0(grp_insert_point_fu_289_regions_min_1_d0),
    .regions_min_1_q0(regions_1_q0),
    .regions_min_1_address1(grp_insert_point_fu_289_regions_min_1_address1),
    .regions_min_1_ce1(grp_insert_point_fu_289_regions_min_1_ce1),
    .regions_min_1_we1(grp_insert_point_fu_289_regions_min_1_we1),
    .regions_min_1_d1(grp_insert_point_fu_289_regions_min_1_d1),
    .regions_min_1_q1(regions_1_q1),
    .regions_max_0_address0(grp_insert_point_fu_289_regions_max_0_address0),
    .regions_max_0_ce0(grp_insert_point_fu_289_regions_max_0_ce0),
    .regions_max_0_we0(grp_insert_point_fu_289_regions_max_0_we0),
    .regions_max_0_d0(grp_insert_point_fu_289_regions_max_0_d0),
    .regions_max_0_q0(regions_2_q0),
    .regions_max_0_address1(grp_insert_point_fu_289_regions_max_0_address1),
    .regions_max_0_ce1(grp_insert_point_fu_289_regions_max_0_ce1),
    .regions_max_0_we1(grp_insert_point_fu_289_regions_max_0_we1),
    .regions_max_0_d1(grp_insert_point_fu_289_regions_max_0_d1),
    .regions_max_0_q1(regions_2_q1),
    .regions_max_1_address0(grp_insert_point_fu_289_regions_max_1_address0),
    .regions_max_1_ce0(grp_insert_point_fu_289_regions_max_1_ce0),
    .regions_max_1_we0(grp_insert_point_fu_289_regions_max_1_we0),
    .regions_max_1_d0(grp_insert_point_fu_289_regions_max_1_d0),
    .regions_max_1_q0(regions_3_q0),
    .regions_max_1_address1(grp_insert_point_fu_289_regions_max_1_address1),
    .regions_max_1_ce1(grp_insert_point_fu_289_regions_max_1_ce1),
    .regions_max_1_we1(grp_insert_point_fu_289_regions_max_1_we1),
    .regions_max_1_d1(grp_insert_point_fu_289_regions_max_1_d1),
    .regions_max_1_q1(regions_3_q1),
    .regions_center_0_address0(grp_insert_point_fu_289_regions_center_0_address0),
    .regions_center_0_ce0(grp_insert_point_fu_289_regions_center_0_ce0),
    .regions_center_0_we0(grp_insert_point_fu_289_regions_center_0_we0),
    .regions_center_0_d0(grp_insert_point_fu_289_regions_center_0_d0),
    .regions_center_0_q0(regions_4_q0),
    .regions_center_0_address1(grp_insert_point_fu_289_regions_center_0_address1),
    .regions_center_0_ce1(grp_insert_point_fu_289_regions_center_0_ce1),
    .regions_center_0_we1(grp_insert_point_fu_289_regions_center_0_we1),
    .regions_center_0_d1(grp_insert_point_fu_289_regions_center_0_d1),
    .regions_center_0_q1(regions_4_q1),
    .regions_center_1_address0(grp_insert_point_fu_289_regions_center_1_address0),
    .regions_center_1_ce0(grp_insert_point_fu_289_regions_center_1_ce0),
    .regions_center_1_we0(grp_insert_point_fu_289_regions_center_1_we0),
    .regions_center_1_d0(grp_insert_point_fu_289_regions_center_1_d0),
    .regions_center_1_q0(regions_5_q0),
    .regions_center_1_address1(grp_insert_point_fu_289_regions_center_1_address1),
    .regions_center_1_ce1(grp_insert_point_fu_289_regions_center_1_ce1),
    .regions_center_1_we1(grp_insert_point_fu_289_regions_center_1_we1),
    .regions_center_1_d1(grp_insert_point_fu_289_regions_center_1_d1),
    .regions_center_1_q1(regions_5_q1),
    .n_regions_address0(grp_insert_point_fu_289_n_regions_address0),
    .n_regions_ce0(grp_insert_point_fu_289_n_regions_ce0),
    .n_regions_we0(grp_insert_point_fu_289_n_regions_we0),
    .n_regions_d0(grp_insert_point_fu_289_n_regions_d0),
    .n_regions_q0(n_regions_V_q0),
    .d_read(p_read3),
    .d_read_38(p_read4),
    .d_read_39(p_read5),
    .d_read_40(p_read6),
    .d_read_41(p_read7),
    .d_read_42(p_read8),
    .d_read_43(p_read9),
    .d_read_44(p_read10),
    .grp_fu_673_p_din0(grp_insert_point_fu_289_grp_fu_673_p_din0),
    .grp_fu_673_p_din1(grp_insert_point_fu_289_grp_fu_673_p_din1),
    .grp_fu_673_p_opcode(grp_insert_point_fu_289_grp_fu_673_p_opcode),
    .grp_fu_673_p_dout0(grp_fu_673_p2),
    .grp_fu_673_p_ce(grp_insert_point_fu_289_grp_fu_673_p_ce),
    .grp_fu_677_p_din0(grp_insert_point_fu_289_grp_fu_677_p_din0),
    .grp_fu_677_p_din1(grp_insert_point_fu_289_grp_fu_677_p_din1),
    .grp_fu_677_p_opcode(grp_insert_point_fu_289_grp_fu_677_p_opcode),
    .grp_fu_677_p_dout0(grp_fu_677_p2),
    .grp_fu_677_p_ce(grp_insert_point_fu_289_grp_fu_677_p_ce),
    .grp_fu_681_p_din0(grp_insert_point_fu_289_grp_fu_681_p_din0),
    .grp_fu_681_p_din1(grp_insert_point_fu_289_grp_fu_681_p_din1),
    .grp_fu_681_p_opcode(grp_insert_point_fu_289_grp_fu_681_p_opcode),
    .grp_fu_681_p_dout0(grp_fu_681_p2),
    .grp_fu_681_p_ce(grp_insert_point_fu_289_grp_fu_681_p_ce),
    .grp_fu_685_p_din0(grp_insert_point_fu_289_grp_fu_685_p_din0),
    .grp_fu_685_p_din1(grp_insert_point_fu_289_grp_fu_685_p_din1),
    .grp_fu_685_p_opcode(grp_insert_point_fu_289_grp_fu_685_p_opcode),
    .grp_fu_685_p_dout0(grp_fu_685_p2),
    .grp_fu_685_p_ce(grp_insert_point_fu_289_grp_fu_685_p_ce),
    .grp_fu_689_p_din0(grp_insert_point_fu_289_grp_fu_689_p_din0),
    .grp_fu_689_p_din1(grp_insert_point_fu_289_grp_fu_689_p_din1),
    .grp_fu_689_p_opcode(grp_insert_point_fu_289_grp_fu_689_p_opcode),
    .grp_fu_689_p_dout0(grp_fu_689_p2),
    .grp_fu_689_p_ce(grp_insert_point_fu_289_grp_fu_689_p_ce),
    .grp_fu_693_p_din0(grp_insert_point_fu_289_grp_fu_693_p_din0),
    .grp_fu_693_p_din1(grp_insert_point_fu_289_grp_fu_693_p_din1),
    .grp_fu_693_p_opcode(grp_insert_point_fu_289_grp_fu_693_p_opcode),
    .grp_fu_693_p_dout0(grp_fu_693_p2),
    .grp_fu_693_p_ce(grp_insert_point_fu_289_grp_fu_693_p_ce),
    .grp_fu_697_p_din0(grp_insert_point_fu_289_grp_fu_697_p_din0),
    .grp_fu_697_p_din1(grp_insert_point_fu_289_grp_fu_697_p_din1),
    .grp_fu_697_p_opcode(grp_insert_point_fu_289_grp_fu_697_p_opcode),
    .grp_fu_697_p_dout0(grp_fu_697_p2),
    .grp_fu_697_p_ce(grp_insert_point_fu_289_grp_fu_697_p_ce),
    .grp_fu_701_p_din0(grp_insert_point_fu_289_grp_fu_701_p_din0),
    .grp_fu_701_p_din1(grp_insert_point_fu_289_grp_fu_701_p_din1),
    .grp_fu_701_p_dout0(grp_fu_701_p2),
    .grp_fu_701_p_ce(grp_insert_point_fu_289_grp_fu_701_p_ce),
    .grp_fu_705_p_din0(grp_insert_point_fu_289_grp_fu_705_p_din0),
    .grp_fu_705_p_din1(grp_insert_point_fu_289_grp_fu_705_p_din1),
    .grp_fu_705_p_dout0(grp_fu_705_p2),
    .grp_fu_705_p_ce(grp_insert_point_fu_289_grp_fu_705_p_ce)
);

run_find_region grp_find_region_fu_324(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_find_region_fu_324_ap_start),
    .ap_done(grp_find_region_fu_324_ap_done),
    .ap_idle(grp_find_region_fu_324_ap_idle),
    .ap_ready(grp_find_region_fu_324_ap_ready),
    .regions_min_0_address0(grp_find_region_fu_324_regions_min_0_address0),
    .regions_min_0_ce0(grp_find_region_fu_324_regions_min_0_ce0),
    .regions_min_0_q0(regions_q0),
    .regions_min_0_address1(grp_find_region_fu_324_regions_min_0_address1),
    .regions_min_0_ce1(grp_find_region_fu_324_regions_min_0_ce1),
    .regions_min_0_q1(regions_q1),
    .regions_min_0_offset(trunc_ln552_reg_613),
    .regions_min_1_address0(grp_find_region_fu_324_regions_min_1_address0),
    .regions_min_1_ce0(grp_find_region_fu_324_regions_min_1_ce0),
    .regions_min_1_q0(regions_1_q0),
    .regions_min_1_address1(grp_find_region_fu_324_regions_min_1_address1),
    .regions_min_1_ce1(grp_find_region_fu_324_regions_min_1_ce1),
    .regions_min_1_q1(regions_1_q1),
    .regions_max_0_address0(grp_find_region_fu_324_regions_max_0_address0),
    .regions_max_0_ce0(grp_find_region_fu_324_regions_max_0_ce0),
    .regions_max_0_q0(regions_2_q0),
    .regions_max_0_address1(grp_find_region_fu_324_regions_max_0_address1),
    .regions_max_0_ce1(grp_find_region_fu_324_regions_max_0_ce1),
    .regions_max_0_q1(regions_2_q1),
    .regions_max_1_address0(grp_find_region_fu_324_regions_max_1_address0),
    .regions_max_1_ce0(grp_find_region_fu_324_regions_max_1_ce0),
    .regions_max_1_q0(regions_3_q0),
    .regions_max_1_address1(grp_find_region_fu_324_regions_max_1_address1),
    .regions_max_1_ce1(grp_find_region_fu_324_regions_max_1_ce1),
    .regions_max_1_q1(regions_3_q1),
    .regions_center_0_address0(grp_find_region_fu_324_regions_center_0_address0),
    .regions_center_0_ce0(grp_find_region_fu_324_regions_center_0_ce0),
    .regions_center_0_q0(regions_4_q0),
    .regions_center_0_address1(grp_find_region_fu_324_regions_center_0_address1),
    .regions_center_0_ce1(grp_find_region_fu_324_regions_center_0_ce1),
    .regions_center_0_q1(regions_4_q1),
    .regions_center_1_address0(grp_find_region_fu_324_regions_center_1_address0),
    .regions_center_1_ce0(grp_find_region_fu_324_regions_center_1_ce0),
    .regions_center_1_q0(regions_5_q0),
    .regions_center_1_address1(grp_find_region_fu_324_regions_center_1_address1),
    .regions_center_1_ce1(grp_find_region_fu_324_regions_center_1_ce1),
    .regions_center_1_q1(regions_5_q1),
    .n_regions(n_regions_V_load_reg_639),
    .d_read(p_read3),
    .d_read_60(p_read4),
    .d_read_61(p_read5),
    .d_read_62(p_read6),
    .d_read_63(p_read7),
    .d_read_64(p_read8),
    .d_read_65(p_read9),
    .d_read_66(p_read10),
    .ap_return(grp_find_region_fu_324_ap_return),
    .grp_fu_685_p_din0(grp_find_region_fu_324_grp_fu_685_p_din0),
    .grp_fu_685_p_din1(grp_find_region_fu_324_grp_fu_685_p_din1),
    .grp_fu_685_p_opcode(grp_find_region_fu_324_grp_fu_685_p_opcode),
    .grp_fu_685_p_dout0(grp_fu_685_p2),
    .grp_fu_685_p_ce(grp_find_region_fu_324_grp_fu_685_p_ce),
    .grp_fu_689_p_din0(grp_find_region_fu_324_grp_fu_689_p_din0),
    .grp_fu_689_p_din1(grp_find_region_fu_324_grp_fu_689_p_din1),
    .grp_fu_689_p_opcode(grp_find_region_fu_324_grp_fu_689_p_opcode),
    .grp_fu_689_p_dout0(grp_fu_689_p2),
    .grp_fu_689_p_ce(grp_find_region_fu_324_grp_fu_689_p_ce),
    .grp_fu_693_p_din0(grp_find_region_fu_324_grp_fu_693_p_din0),
    .grp_fu_693_p_din1(grp_find_region_fu_324_grp_fu_693_p_din1),
    .grp_fu_693_p_opcode(grp_find_region_fu_324_grp_fu_693_p_opcode),
    .grp_fu_693_p_dout0(grp_fu_693_p2),
    .grp_fu_693_p_ce(grp_find_region_fu_324_grp_fu_693_p_ce),
    .grp_fu_697_p_din0(grp_find_region_fu_324_grp_fu_697_p_din0),
    .grp_fu_697_p_din1(grp_find_region_fu_324_grp_fu_697_p_din1),
    .grp_fu_697_p_opcode(grp_find_region_fu_324_grp_fu_697_p_opcode),
    .grp_fu_697_p_dout0(grp_fu_697_p2),
    .grp_fu_697_p_ce(grp_find_region_fu_324_grp_fu_697_p_ce),
    .grp_fu_701_p_din0(grp_find_region_fu_324_grp_fu_701_p_din0),
    .grp_fu_701_p_din1(grp_find_region_fu_324_grp_fu_701_p_din1),
    .grp_fu_701_p_dout0(grp_fu_701_p2),
    .grp_fu_701_p_ce(grp_find_region_fu_324_grp_fu_701_p_ce),
    .grp_fu_705_p_din0(grp_find_region_fu_324_grp_fu_705_p_din0),
    .grp_fu_705_p_din1(grp_find_region_fu_324_grp_fu_705_p_din1),
    .grp_fu_705_p_dout0(grp_fu_705_p2),
    .grp_fu_705_p_ce(grp_find_region_fu_324_grp_fu_705_p_ce),
    .grp_fu_673_p_din0(grp_find_region_fu_324_grp_fu_673_p_din0),
    .grp_fu_673_p_din1(grp_find_region_fu_324_grp_fu_673_p_din1),
    .grp_fu_673_p_opcode(grp_find_region_fu_324_grp_fu_673_p_opcode),
    .grp_fu_673_p_dout0(grp_fu_673_p2),
    .grp_fu_673_p_ce(grp_find_region_fu_324_grp_fu_673_p_ce),
    .grp_fu_677_p_din0(grp_find_region_fu_324_grp_fu_677_p_din0),
    .grp_fu_677_p_din1(grp_find_region_fu_324_grp_fu_677_p_din1),
    .grp_fu_677_p_opcode(grp_find_region_fu_324_grp_fu_677_p_opcode),
    .grp_fu_677_p_dout0(grp_fu_677_p2),
    .grp_fu_677_p_ce(grp_find_region_fu_324_grp_fu_677_p_ce),
    .grp_fu_681_p_din0(grp_find_region_fu_324_grp_fu_681_p_din0),
    .grp_fu_681_p_din1(grp_find_region_fu_324_grp_fu_681_p_din1),
    .grp_fu_681_p_opcode(grp_find_region_fu_324_grp_fu_681_p_opcode),
    .grp_fu_681_p_dout0(grp_fu_681_p2),
    .grp_fu_681_p_ce(grp_find_region_fu_324_grp_fu_681_p_ce)
);

run_writeOutcome grp_writeOutcome_fu_350(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_writeOutcome_fu_350_ap_start),
    .ap_done(grp_writeOutcome_fu_350_ap_done),
    .ap_idle(grp_writeOutcome_fu_350_ap_idle),
    .ap_ready(grp_writeOutcome_fu_350_ap_ready),
    .errorInTask_address0(grp_writeOutcome_fu_350_errorInTask_address0),
    .errorInTask_ce0(grp_writeOutcome_fu_350_errorInTask_ce0),
    .errorInTask_we0(grp_writeOutcome_fu_350_errorInTask_we0),
    .errorInTask_d0(grp_writeOutcome_fu_350_errorInTask_d0),
    .errorInTask1(trunc_ln552_1_reg_618),
    .checkId(p_read2),
    .taskId(p_read1),
    .uniId(p_read311),
    .error(error_reg_261),
    .toScheduler_TDATA(grp_writeOutcome_fu_350_toScheduler_TDATA),
    .toScheduler_TVALID(grp_writeOutcome_fu_350_toScheduler_TVALID),
    .toScheduler_TREADY(grp_writeOutcome_fu_350_toScheduler_TREADY),
    .outcomeInRam_address0(grp_writeOutcome_fu_350_outcomeInRam_address0),
    .outcomeInRam_ce0(grp_writeOutcome_fu_350_outcomeInRam_ce0),
    .outcomeInRam_we0(grp_writeOutcome_fu_350_outcomeInRam_we0),
    .outcomeInRam_d0(grp_writeOutcome_fu_350_outcomeInRam_d0),
    .p_read(p_read3),
    .p_read1(p_read4),
    .p_read2(p_read5),
    .p_read3(p_read6),
    .p_read4(p_read7),
    .p_read5(p_read8),
    .p_read6(p_read9),
    .p_read7(p_read10)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_assign_fu_425_p10),
    .din1(32'd0),
    .ce(grp_fu_374_ce),
    .opcode(5'd8),
    .dout(grp_fu_374_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_assign_fu_425_p10),
    .din1(32'd2139095040),
    .ce(grp_fu_379_ce),
    .opcode(5'd1),
    .dout(grp_fu_379_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_assign_fu_425_p10),
    .din1(32'd4286578688),
    .ce(grp_fu_384_ce),
    .opcode(5'd1),
    .dout(grp_fu_384_p2)
);

run_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U165(
    .din0(p_read3),
    .din1(p_read4),
    .din2(p_read5),
    .din3(p_read6),
    .din4(p_read7),
    .din5(p_read8),
    .din6(p_read9),
    .din7(p_read10),
    .din8(i_fu_146),
    .dout(p_x_assign_fu_425_p10)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_673_p0),
    .din1(grp_fu_673_p1),
    .ce(grp_fu_673_ce),
    .opcode(grp_fu_673_opcode),
    .dout(grp_fu_673_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_677_p0),
    .din1(grp_fu_677_p1),
    .ce(grp_fu_677_ce),
    .opcode(grp_fu_677_opcode),
    .dout(grp_fu_677_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_681_p0),
    .din1(grp_fu_681_p1),
    .ce(grp_fu_681_ce),
    .opcode(grp_fu_681_opcode),
    .dout(grp_fu_681_p2)
);

run_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_685_p0),
    .din1(grp_fu_685_p1),
    .opcode(grp_fu_685_opcode),
    .ce(grp_fu_685_ce),
    .dout(grp_fu_685_p2)
);

run_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_689_p0),
    .din1(grp_fu_689_p1),
    .opcode(grp_fu_689_opcode),
    .ce(grp_fu_689_ce),
    .dout(grp_fu_689_p2)
);

run_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_693_p0),
    .din1(grp_fu_693_p1),
    .opcode(grp_fu_693_opcode),
    .ce(grp_fu_693_ce),
    .dout(grp_fu_693_p2)
);

run_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_697_p0),
    .din1(grp_fu_697_p1),
    .opcode(grp_fu_697_opcode),
    .ce(grp_fu_697_ce),
    .dout(grp_fu_697_p2)
);

run_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_701_p0),
    .din1(grp_fu_701_p1),
    .ce(grp_fu_701_ce),
    .dout(grp_fu_701_p2)
);

run_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_705_p0),
    .din1(grp_fu_705_p1),
    .ce(grp_fu_705_ce),
    .dout(grp_fu_705_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        copyInputAOV_out_preg <= 8'd0;
    end else begin
        if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
            copyInputAOV_out_preg <= ap_phi_mux_copyInputAOV_copy_1_phi_fu_276_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_find_region_fu_324_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln74_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_find_region_fu_324_ap_start_reg <= 1'b1;
        end else if ((grp_find_region_fu_324_ap_ready == 1'b1)) begin
            grp_find_region_fu_324_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_insert_point_fu_289_ap_start_reg <= 1'b0;
    end else begin
        if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (p_read12_read_fu_216_p2 == 8'd3))) begin
            grp_insert_point_fu_289_ap_start_reg <= 1'b1;
        end else if ((grp_insert_point_fu_289_ap_ready == 1'b1)) begin
            grp_insert_point_fu_289_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_writeOutcome_fu_350_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6) & ((or_ln76_2_fu_488_p2 == 1'd1) | (icmp_ln74_reg_644 == 1'd1)))) begin
            grp_writeOutcome_fu_350_ap_start_reg <= 1'b1;
        end else if ((grp_writeOutcome_fu_350_ap_ready == 1'b1)) begin
            grp_writeOutcome_fu_350_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((errorInTask_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        copyInputAOV_copy_1_reg_272 <= copyInputAOV_in_read_reg_592;
    end else if ((((1'b0 == ap_block_state7_on_subcall_done) & (errorInTask_load_reg_623 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (p_read == 8'd2)) | ((grp_insert_point_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        copyInputAOV_copy_1_reg_272 <= 8'd0;
    end else if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & ~(p_read == 8'd2) & ~(p_read12_read_fu_216_p2 == 8'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        copyInputAOV_copy_1_reg_272 <= copyInputAOV_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6))) begin
        if (((or_ln76_2_fu_488_p2 == 1'd1) & (icmp_ln74_reg_644 == 1'd0))) begin
            error_reg_261 <= 1'd1;
        end else if ((icmp_ln74_reg_644 == 1'd1)) begin
            error_reg_261 <= grp_find_region_fu_324_ap_return[32'd31];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((errorInTask_q0 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_fu_146 <= 4'd0;
    end else if (((or_ln76_2_fu_488_p2 == 1'd0) & (1'b0 == ap_block_state6_on_subcall_done) & (icmp_ln74_reg_644 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_fu_146 <= add_ln74_reg_648;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln74_reg_648 <= add_ln74_fu_419_p2;
        icmp_ln74_reg_644 <= icmp_ln74_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        copyInputAOV_in_read_reg_592 <= copyInputAOV_in_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        errorInTask_load_reg_623 <= errorInTask_q0;
        trunc_ln552_1_reg_618 <= trunc_ln552_1_fu_402_p1;
        trunc_ln552_reg_613 <= trunc_ln552_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln76_1_reg_665 <= icmp_ln76_1_fu_466_p2;
        icmp_ln76_reg_660 <= icmp_ln76_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_regions_V_load_reg_639 <= n_regions_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (p_read12_read_fu_216_p2 == 8'd3))) begin
        trunc_ln556_reg_598 <= trunc_ln556_fu_389_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (p_read == 8'd2))) begin
        zext_ln552_reg_603[7 : 0] <= zext_ln552_fu_394_p1[7 : 0];
    end
end

always @ (*) begin
    if (((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_insert_point_fu_289_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state6_on_subcall_done)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7_on_subcall_done)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((errorInTask_load_reg_623 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (p_read == 8'd2))) begin
        ap_phi_mux_copyInputAOV_copy_1_phi_fu_276_p8 = 8'd0;
    end else begin
        ap_phi_mux_copyInputAOV_copy_1_phi_fu_276_p8 = copyInputAOV_copy_1_reg_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        copyInputAOV_in_blk_n = copyInputAOV_in_empty_n;
    end else begin
        copyInputAOV_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        copyInputAOV_in_read = 1'b1;
    end else begin
        copyInputAOV_in_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        copyInputAOV_out = ap_phi_mux_copyInputAOV_copy_1_phi_fu_276_p8;
    end else begin
        copyInputAOV_out = copyInputAOV_out_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
        copyInputAOV_out_ap_vld = 1'b1;
    end else begin
        copyInputAOV_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        errorInTask_address0 = zext_ln552_fu_394_p1;
    end else if (((ap_predicate_op78_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        errorInTask_address0 = grp_writeOutcome_fu_350_errorInTask_address0;
    end else begin
        errorInTask_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        errorInTask_ce0 = 1'b1;
    end else if (((ap_predicate_op78_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        errorInTask_ce0 = grp_writeOutcome_fu_350_errorInTask_ce0;
    end else begin
        errorInTask_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op78_call_state7 == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        errorInTask_we0 = grp_writeOutcome_fu_350_errorInTask_we0;
    end else begin
        errorInTask_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_379_ce = 1'b1;
    end else begin
        grp_fu_379_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_384_ce = 1'b1;
    end else begin
        grp_fu_384_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_673_ce = grp_find_region_fu_324_grp_fu_673_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_673_ce = grp_insert_point_fu_289_grp_fu_673_p_ce;
    end else begin
        grp_fu_673_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_673_opcode = grp_find_region_fu_324_grp_fu_673_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_673_opcode = grp_insert_point_fu_289_grp_fu_673_p_opcode;
    end else begin
        grp_fu_673_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_673_p0 = grp_find_region_fu_324_grp_fu_673_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_673_p0 = grp_insert_point_fu_289_grp_fu_673_p_din0;
    end else begin
        grp_fu_673_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_673_p1 = grp_find_region_fu_324_grp_fu_673_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_673_p1 = grp_insert_point_fu_289_grp_fu_673_p_din1;
    end else begin
        grp_fu_673_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_677_ce = grp_find_region_fu_324_grp_fu_677_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_677_ce = grp_insert_point_fu_289_grp_fu_677_p_ce;
    end else begin
        grp_fu_677_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_677_opcode = grp_find_region_fu_324_grp_fu_677_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_677_opcode = grp_insert_point_fu_289_grp_fu_677_p_opcode;
    end else begin
        grp_fu_677_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_677_p0 = grp_find_region_fu_324_grp_fu_677_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_677_p0 = grp_insert_point_fu_289_grp_fu_677_p_din0;
    end else begin
        grp_fu_677_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_677_p1 = grp_find_region_fu_324_grp_fu_677_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_677_p1 = grp_insert_point_fu_289_grp_fu_677_p_din1;
    end else begin
        grp_fu_677_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_681_ce = grp_find_region_fu_324_grp_fu_681_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_681_ce = grp_insert_point_fu_289_grp_fu_681_p_ce;
    end else begin
        grp_fu_681_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_681_opcode = grp_find_region_fu_324_grp_fu_681_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_681_opcode = grp_insert_point_fu_289_grp_fu_681_p_opcode;
    end else begin
        grp_fu_681_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_681_p0 = grp_find_region_fu_324_grp_fu_681_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_681_p0 = grp_insert_point_fu_289_grp_fu_681_p_din0;
    end else begin
        grp_fu_681_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_681_p1 = grp_find_region_fu_324_grp_fu_681_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_681_p1 = grp_insert_point_fu_289_grp_fu_681_p_din1;
    end else begin
        grp_fu_681_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_685_ce = grp_find_region_fu_324_grp_fu_685_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_685_ce = grp_insert_point_fu_289_grp_fu_685_p_ce;
    end else begin
        grp_fu_685_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_685_opcode = grp_find_region_fu_324_grp_fu_685_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_685_opcode = grp_insert_point_fu_289_grp_fu_685_p_opcode;
    end else begin
        grp_fu_685_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_685_p0 = grp_find_region_fu_324_grp_fu_685_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_685_p0 = grp_insert_point_fu_289_grp_fu_685_p_din0;
    end else begin
        grp_fu_685_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_685_p1 = grp_find_region_fu_324_grp_fu_685_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_685_p1 = grp_insert_point_fu_289_grp_fu_685_p_din1;
    end else begin
        grp_fu_685_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_689_ce = grp_find_region_fu_324_grp_fu_689_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_689_ce = grp_insert_point_fu_289_grp_fu_689_p_ce;
    end else begin
        grp_fu_689_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_689_opcode = grp_find_region_fu_324_grp_fu_689_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_689_opcode = grp_insert_point_fu_289_grp_fu_689_p_opcode;
    end else begin
        grp_fu_689_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_689_p0 = grp_find_region_fu_324_grp_fu_689_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_689_p0 = grp_insert_point_fu_289_grp_fu_689_p_din0;
    end else begin
        grp_fu_689_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_689_p1 = grp_find_region_fu_324_grp_fu_689_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_689_p1 = grp_insert_point_fu_289_grp_fu_689_p_din1;
    end else begin
        grp_fu_689_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_693_ce = grp_find_region_fu_324_grp_fu_693_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_693_ce = grp_insert_point_fu_289_grp_fu_693_p_ce;
    end else begin
        grp_fu_693_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_693_opcode = grp_find_region_fu_324_grp_fu_693_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_693_opcode = grp_insert_point_fu_289_grp_fu_693_p_opcode;
    end else begin
        grp_fu_693_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_693_p0 = grp_find_region_fu_324_grp_fu_693_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_693_p0 = grp_insert_point_fu_289_grp_fu_693_p_din0;
    end else begin
        grp_fu_693_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_693_p1 = grp_find_region_fu_324_grp_fu_693_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_693_p1 = grp_insert_point_fu_289_grp_fu_693_p_din1;
    end else begin
        grp_fu_693_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_697_ce = grp_find_region_fu_324_grp_fu_697_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_697_ce = grp_insert_point_fu_289_grp_fu_697_p_ce;
    end else begin
        grp_fu_697_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_697_opcode = grp_find_region_fu_324_grp_fu_697_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_697_opcode = grp_insert_point_fu_289_grp_fu_697_p_opcode;
    end else begin
        grp_fu_697_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_697_p0 = grp_find_region_fu_324_grp_fu_697_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_697_p0 = grp_insert_point_fu_289_grp_fu_697_p_din0;
    end else begin
        grp_fu_697_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_697_p1 = grp_find_region_fu_324_grp_fu_697_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_697_p1 = grp_insert_point_fu_289_grp_fu_697_p_din1;
    end else begin
        grp_fu_697_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_701_ce = grp_find_region_fu_324_grp_fu_701_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_701_ce = grp_insert_point_fu_289_grp_fu_701_p_ce;
    end else begin
        grp_fu_701_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_701_p0 = grp_find_region_fu_324_grp_fu_701_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_701_p0 = grp_insert_point_fu_289_grp_fu_701_p_din0;
    end else begin
        grp_fu_701_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_701_p1 = grp_find_region_fu_324_grp_fu_701_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_701_p1 = grp_insert_point_fu_289_grp_fu_701_p_din1;
    end else begin
        grp_fu_701_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_705_ce = grp_find_region_fu_324_grp_fu_705_p_ce;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_705_ce = grp_insert_point_fu_289_grp_fu_705_p_ce;
    end else begin
        grp_fu_705_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_705_p0 = grp_find_region_fu_324_grp_fu_705_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_705_p0 = grp_insert_point_fu_289_grp_fu_705_p_din0;
    end else begin
        grp_fu_705_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_705_p1 = grp_find_region_fu_324_grp_fu_705_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_705_p1 = grp_insert_point_fu_289_grp_fu_705_p_din1;
    end else begin
        grp_fu_705_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_regions_V_address0 = zext_ln552_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        n_regions_V_address0 = grp_insert_point_fu_289_n_regions_address0;
    end else begin
        n_regions_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_regions_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        n_regions_V_ce0 = grp_insert_point_fu_289_n_regions_ce0;
    end else begin
        n_regions_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_regions_V_we0 = grp_insert_point_fu_289_n_regions_we0;
    end else begin
        n_regions_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_1_address0 = grp_find_region_fu_324_regions_min_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_1_address0 = grp_insert_point_fu_289_regions_min_1_address0;
    end else begin
        regions_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_1_address1 = grp_find_region_fu_324_regions_min_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_1_address1 = grp_insert_point_fu_289_regions_min_1_address1;
    end else begin
        regions_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_1_ce0 = grp_find_region_fu_324_regions_min_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_1_ce0 = grp_insert_point_fu_289_regions_min_1_ce0;
    end else begin
        regions_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_1_ce1 = grp_find_region_fu_324_regions_min_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_1_ce1 = grp_insert_point_fu_289_regions_min_1_ce1;
    end else begin
        regions_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_1_we0 = grp_insert_point_fu_289_regions_min_1_we0;
    end else begin
        regions_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_1_we1 = grp_insert_point_fu_289_regions_min_1_we1;
    end else begin
        regions_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_2_address0 = grp_find_region_fu_324_regions_max_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_2_address0 = grp_insert_point_fu_289_regions_max_0_address0;
    end else begin
        regions_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_2_address1 = grp_find_region_fu_324_regions_max_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_2_address1 = grp_insert_point_fu_289_regions_max_0_address1;
    end else begin
        regions_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_2_ce0 = grp_find_region_fu_324_regions_max_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_2_ce0 = grp_insert_point_fu_289_regions_max_0_ce0;
    end else begin
        regions_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_2_ce1 = grp_find_region_fu_324_regions_max_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_2_ce1 = grp_insert_point_fu_289_regions_max_0_ce1;
    end else begin
        regions_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_2_we0 = grp_insert_point_fu_289_regions_max_0_we0;
    end else begin
        regions_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_2_we1 = grp_insert_point_fu_289_regions_max_0_we1;
    end else begin
        regions_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_3_address0 = grp_find_region_fu_324_regions_max_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_3_address0 = grp_insert_point_fu_289_regions_max_1_address0;
    end else begin
        regions_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_3_address1 = grp_find_region_fu_324_regions_max_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_3_address1 = grp_insert_point_fu_289_regions_max_1_address1;
    end else begin
        regions_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_3_ce0 = grp_find_region_fu_324_regions_max_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_3_ce0 = grp_insert_point_fu_289_regions_max_1_ce0;
    end else begin
        regions_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_3_ce1 = grp_find_region_fu_324_regions_max_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_3_ce1 = grp_insert_point_fu_289_regions_max_1_ce1;
    end else begin
        regions_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_3_we0 = grp_insert_point_fu_289_regions_max_1_we0;
    end else begin
        regions_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_3_we1 = grp_insert_point_fu_289_regions_max_1_we1;
    end else begin
        regions_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_4_address0 = grp_find_region_fu_324_regions_center_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_4_address0 = grp_insert_point_fu_289_regions_center_0_address0;
    end else begin
        regions_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_4_address1 = grp_find_region_fu_324_regions_center_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_4_address1 = grp_insert_point_fu_289_regions_center_0_address1;
    end else begin
        regions_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_4_ce0 = grp_find_region_fu_324_regions_center_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_4_ce0 = grp_insert_point_fu_289_regions_center_0_ce0;
    end else begin
        regions_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_4_ce1 = grp_find_region_fu_324_regions_center_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_4_ce1 = grp_insert_point_fu_289_regions_center_0_ce1;
    end else begin
        regions_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_4_we0 = grp_insert_point_fu_289_regions_center_0_we0;
    end else begin
        regions_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_4_we1 = grp_insert_point_fu_289_regions_center_0_we1;
    end else begin
        regions_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_5_address0 = grp_find_region_fu_324_regions_center_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_5_address0 = grp_insert_point_fu_289_regions_center_1_address0;
    end else begin
        regions_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_5_address1 = grp_find_region_fu_324_regions_center_1_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_5_address1 = grp_insert_point_fu_289_regions_center_1_address1;
    end else begin
        regions_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_5_ce0 = grp_find_region_fu_324_regions_center_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_5_ce0 = grp_insert_point_fu_289_regions_center_1_ce0;
    end else begin
        regions_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_5_ce1 = grp_find_region_fu_324_regions_center_1_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_5_ce1 = grp_insert_point_fu_289_regions_center_1_ce1;
    end else begin
        regions_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_5_we0 = grp_insert_point_fu_289_regions_center_1_we0;
    end else begin
        regions_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_5_we1 = grp_insert_point_fu_289_regions_center_1_we1;
    end else begin
        regions_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_address0 = grp_find_region_fu_324_regions_min_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_address0 = grp_insert_point_fu_289_regions_min_0_address0;
    end else begin
        regions_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_address1 = grp_find_region_fu_324_regions_min_0_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_address1 = grp_insert_point_fu_289_regions_min_0_address1;
    end else begin
        regions_address1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_ce0 = grp_find_region_fu_324_regions_min_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_ce0 = grp_insert_point_fu_289_regions_min_0_ce0;
    end else begin
        regions_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_644 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        regions_ce1 = grp_find_region_fu_324_regions_min_0_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_ce1 = grp_insert_point_fu_289_regions_min_0_ce1;
    end else begin
        regions_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_we0 = grp_insert_point_fu_289_regions_min_0_we0;
    end else begin
        regions_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regions_we1 = grp_insert_point_fu_289_regions_min_0_we1;
    end else begin
        regions_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & ~(p_read == 8'd2) & ~(p_read12_read_fu_216_p2 == 8'd3) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (p_read == 8'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (p_read12_read_fu_216_p2 == 8'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_insert_point_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((errorInTask_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b0 == ap_block_state6_on_subcall_done) & (1'b1 == ap_CS_fsm_state6) & ((or_ln76_2_fu_488_p2 == 1'd1) | (icmp_ln74_reg_644 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((or_ln76_2_fu_488_p2 == 1'd0) & (1'b0 == ap_block_state6_on_subcall_done) & (icmp_ln74_reg_644 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_on_subcall_done) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln74_fu_419_p2 = (i_fu_146 + 4'd1);

assign and_ln76_fu_482_p2 = (or_ln76_fu_472_p2 & or_ln76_1_fu_476_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call1 = ((copyInputAOV_in_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_find_region_fu_324_ap_done == 1'b0) & (icmp_ln74_reg_644 == 1'd1));
end

always @ (*) begin
    ap_block_state7_on_subcall_done = ((ap_predicate_op78_call_state7 == 1'b1) & (grp_writeOutcome_fu_350_ap_done == 1'b0));
end

always @ (*) begin
    ap_predicate_op78_call_state7 = ((errorInTask_load_reg_623 == 1'd0) & (p_read == 8'd2));
end

assign bitcast_ln76_fu_442_p1 = p_x_assign_fu_425_p10;

assign errorInTask_d0 = grp_writeOutcome_fu_350_errorInTask_d0;

assign grp_find_region_fu_324_ap_start = grp_find_region_fu_324_ap_start_reg;

assign grp_insert_point_fu_289_ap_start = grp_insert_point_fu_289_ap_start_reg;

assign grp_writeOutcome_fu_350_ap_start = grp_writeOutcome_fu_350_ap_start_reg;

assign grp_writeOutcome_fu_350_toScheduler_TREADY = (toScheduler_TREADY & ap_CS_fsm_state7);

assign icmp_ln74_fu_413_p2 = ((i_fu_146 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_466_p2 = ((trunc_ln76_fu_456_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_460_p2 = ((tmp_1_fu_446_p4 != 8'd255) ? 1'b1 : 1'b0);

assign n_regions_V_d0 = grp_insert_point_fu_289_n_regions_d0;

assign or_ln76_1_fu_476_p2 = (grp_fu_384_p2 | grp_fu_379_p2);

assign or_ln76_2_fu_488_p2 = (grp_fu_374_p2 | and_ln76_fu_482_p2);

assign or_ln76_fu_472_p2 = (icmp_ln76_reg_660 | icmp_ln76_1_reg_665);

assign outcomeInRam_address0 = grp_writeOutcome_fu_350_outcomeInRam_address0;

assign outcomeInRam_ce0 = grp_writeOutcome_fu_350_outcomeInRam_ce0;

assign outcomeInRam_d0 = grp_writeOutcome_fu_350_outcomeInRam_d0;

assign outcomeInRam_we0 = grp_writeOutcome_fu_350_outcomeInRam_we0;

assign p_read12_read_fu_216_p2 = p_read;

assign regions_1_d0 = grp_insert_point_fu_289_regions_min_1_d0;

assign regions_1_d1 = grp_insert_point_fu_289_regions_min_1_d1;

assign regions_2_d0 = grp_insert_point_fu_289_regions_max_0_d0;

assign regions_2_d1 = grp_insert_point_fu_289_regions_max_0_d1;

assign regions_3_d0 = grp_insert_point_fu_289_regions_max_1_d0;

assign regions_3_d1 = grp_insert_point_fu_289_regions_max_1_d1;

assign regions_4_d0 = grp_insert_point_fu_289_regions_center_0_d0;

assign regions_4_d1 = grp_insert_point_fu_289_regions_center_0_d1;

assign regions_5_d0 = grp_insert_point_fu_289_regions_center_1_d0;

assign regions_5_d1 = grp_insert_point_fu_289_regions_center_1_d1;

assign regions_d0 = grp_insert_point_fu_289_regions_min_0_d0;

assign regions_d1 = grp_insert_point_fu_289_regions_min_0_d1;

assign tmp_1_fu_446_p4 = {{bitcast_ln76_fu_442_p1[30:23]}};

assign toScheduler_TDATA = grp_writeOutcome_fu_350_toScheduler_TDATA;

assign toScheduler_TVALID = grp_writeOutcome_fu_350_toScheduler_TVALID;

assign trunc_ln552_1_fu_402_p1 = p_read1[3:0];

assign trunc_ln552_fu_399_p1 = p_read1[5:0];

assign trunc_ln556_fu_389_p1 = p_read2[5:0];

assign trunc_ln76_fu_456_p1 = bitcast_ln76_fu_442_p1[22:0];

assign zext_ln552_fu_394_p1 = p_read1;

always @ (posedge ap_clk) begin
    zext_ln552_reg_603[31:8] <= 24'b000000000000000000000000;
end

endmodule //run_runTestAfterInit_Block_entry1119_proc7
