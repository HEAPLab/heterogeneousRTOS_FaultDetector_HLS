// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_run_test_Pipeline_VITIS_LOOP_55_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tmp_11,
        regions_address0,
        regions_ce0,
        regions_q0,
        regions_2_address0,
        regions_2_ce0,
        regions_2_q0,
        regions_3_address0,
        regions_3_ce0,
        regions_3_q0,
        regions_4_address0,
        regions_4_ce0,
        regions_4_q0,
        trunc_ln1,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        ap_return,
        grp_fu_462_p_din0,
        grp_fu_462_p_din1,
        grp_fu_462_p_opcode,
        grp_fu_462_p_dout0,
        grp_fu_462_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] tmp_11;
output  [11:0] regions_address0;
output   regions_ce0;
input  [31:0] regions_q0;
output  [11:0] regions_2_address0;
output   regions_2_ce0;
input  [31:0] regions_2_q0;
output  [11:0] regions_3_address0;
output   regions_3_ce0;
input  [31:0] regions_3_q0;
output  [11:0] regions_4_address0;
output   regions_4_ce0;
input  [31:0] regions_4_q0;
input  [0:0] trunc_ln1;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
output  [1:0] ap_return;
output  [31:0] grp_fu_462_p_din0;
output  [31:0] grp_fu_462_p_din1;
output  [4:0] grp_fu_462_p_opcode;
input  [0:0] grp_fu_462_p_dout0;
output   grp_fu_462_p_ce;

reg ap_idle;
reg regions_ce0;
reg regions_2_ce0;
reg regions_3_ce0;
reg regions_4_ce0;
reg[1:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln60_fu_398_p2;
wire   [0:0] and_ln59_2_fu_392_p2;
reg   [0:0] and_ln59_1_reg_512;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
reg   [1:0] merge_reg_194;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] j_1_reg_465;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [11:0] regions_3_addr_reg_481;
reg   [11:0] regions_4_addr_reg_486;
wire   [31:0] tmp_1_i_fu_238_p10;
reg   [31:0] tmp_1_i_reg_491;
wire   [31:0] tmp_i_fu_252_p4;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln59_fu_280_p2;
reg   [0:0] icmp_ln59_reg_502;
wire   [0:0] icmp_ln59_1_fu_286_p2;
reg   [0:0] icmp_ln59_1_reg_507;
wire   [0:0] and_ln59_1_fu_337_p2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [63:0] add_ln55_fu_343_p2;
reg   [63:0] add_ln55_reg_516;
wire   [31:0] tmp_2_i_fu_348_p4;
wire    ap_block_pp0_stage4_11001;
wire   [0:0] icmp_ln59_4_fu_376_p2;
reg   [0:0] icmp_ln59_4_reg_526;
wire   [0:0] icmp_ln59_5_fu_382_p2;
reg   [0:0] icmp_ln59_5_reg_531;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [1:0] ap_phi_mux_merge_phi_fu_198_p6;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln59_fu_230_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] j_fu_80;
wire    ap_loop_init;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_209_p0;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage4;
wire   [11:0] trunc_ln59_fu_221_p1;
wire   [11:0] add_ln59_fu_225_p2;
wire   [31:0] bitcast_ln59_fu_262_p1;
wire   [7:0] tmp_fu_266_p4;
wire   [22:0] trunc_ln59_1_fu_276_p1;
wire   [31:0] bitcast_ln59_1_fu_292_p1;
wire   [7:0] tmp_5_fu_295_p4;
wire   [22:0] trunc_ln59_2_fu_305_p1;
wire   [0:0] icmp_ln59_3_fu_319_p2;
wire   [0:0] icmp_ln59_2_fu_313_p2;
wire   [0:0] or_ln59_fu_309_p2;
wire   [0:0] or_ln59_1_fu_325_p2;
wire   [0:0] and_ln59_fu_331_p2;
wire   [31:0] bitcast_ln59_2_fu_358_p1;
wire   [7:0] tmp_7_fu_362_p4;
wire   [22:0] trunc_ln59_3_fu_372_p1;
wire   [0:0] or_ln59_2_fu_388_p2;
reg   [4:0] grp_fu_209_opcode;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage4_00001;
reg   [1:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_444;
reg    ap_condition_450;
reg    ap_condition_455;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_return_preg = 2'd0;
#0 ap_done_reg = 1'b0;
end

run_mux_864_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_864_32_1_1_U845(
    .din0(p_read3),
    .din1(p_read4),
    .din2(p_read5),
    .din3(p_read6),
    .din4(p_read7),
    .din5(p_read8),
    .din6(p_read9),
    .din7(p_read10),
    .din8(j_fu_80),
    .dout(tmp_1_i_fu_238_p10)
);

run_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U846(
    .din0(regions_q0),
    .din1(regions_2_q0),
    .din2(trunc_ln1),
    .dout(tmp_i_fu_252_p4)
);

run_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U847(
    .din0(regions_3_q0),
    .din1(regions_4_q0),
    .din2(trunc_ln1),
    .dout(tmp_2_i_fu_348_p4)
);

run_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 2'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((1'd0 == and_ln59_1_reg_512) | ((1'd0 == and_ln59_2_fu_392_p2) | (icmp_ln60_fu_398_p2 == 1'd1))))) begin
            ap_return_preg <= ap_phi_mux_merge_phi_fu_198_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_80 <= 64'd0;
        end else if ((1'b1 == ap_condition_455)) begin
            j_fu_80 <= add_ln55_reg_516;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln59_2_fu_392_p2) & (1'd1 == and_ln59_1_reg_512) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        merge_reg_194 <= 2'd2;
    end else if (((1'd1 == and_ln59_1_reg_512) & (1'd1 == and_ln59_2_fu_392_p2) & (icmp_ln60_fu_398_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        merge_reg_194 <= 2'd1;
    end else if (((1'd0 == and_ln59_1_fu_337_p2) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        merge_reg_194 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln55_reg_516 <= add_ln55_fu_343_p2;
        and_ln59_1_reg_512 <= and_ln59_1_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln59_1_reg_507 <= icmp_ln59_1_fu_286_p2;
        icmp_ln59_reg_502 <= icmp_ln59_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln59_1_reg_512) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        icmp_ln59_4_reg_526 <= icmp_ln59_4_fu_376_p2;
        icmp_ln59_5_reg_531 <= icmp_ln59_5_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_1_reg_465 <= j_fu_80;
        regions_3_addr_reg_481 <= zext_ln59_fu_230_p1;
        regions_4_addr_reg_486 <= zext_ln59_fu_230_p1;
        tmp_1_i_reg_491 <= tmp_1_i_fu_238_p10;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((1'd0 == and_ln59_1_reg_512) | ((1'd0 == and_ln59_2_fu_392_p2) | (icmp_ln60_fu_398_p2 == 1'd1))))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_444)) begin
        if ((1'd0 == and_ln59_2_fu_392_p2)) begin
            ap_phi_mux_merge_phi_fu_198_p6 = 2'd2;
        end else if (((1'd1 == and_ln59_2_fu_392_p2) & (icmp_ln60_fu_398_p2 == 1'd1))) begin
            ap_phi_mux_merge_phi_fu_198_p6 = 2'd1;
        end else begin
            ap_phi_mux_merge_phi_fu_198_p6 = merge_reg_194;
        end
    end else begin
        ap_phi_mux_merge_phi_fu_198_p6 = merge_reg_194;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((1'd0 == and_ln59_1_reg_512) | ((1'd0 == and_ln59_2_fu_392_p2) | (icmp_ln60_fu_398_p2 == 1'd1))))) begin
        ap_return = ap_phi_mux_merge_phi_fu_198_p6;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_450)) begin
            grp_fu_209_opcode = 5'd3;
        end else if (((1'b0 == ap_block_pp0_stage2_00001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_209_opcode = 5'd5;
        end else begin
            grp_fu_209_opcode = 'bx;
        end
    end else begin
        grp_fu_209_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_209_p0 = tmp_2_i_fu_348_p4;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_209_p0 = tmp_i_fu_252_p4;
        end else begin
            grp_fu_209_p0 = 'bx;
        end
    end else begin
        grp_fu_209_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        regions_2_ce0 = 1'b1;
    end else begin
        regions_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        regions_3_ce0 = 1'b1;
    end else begin
        regions_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        regions_4_ce0 = 1'b1;
    end else begin
        regions_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        regions_ce0 = 1'b1;
    end else begin
        regions_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_343_p2 = (j_1_reg_465 + 64'd1);

assign add_ln59_fu_225_p2 = (tmp_11 + trunc_ln59_fu_221_p1);

assign and_ln59_1_fu_337_p2 = (grp_fu_462_p_dout0 & and_ln59_fu_331_p2);

assign and_ln59_2_fu_392_p2 = (or_ln59_2_fu_388_p2 & grp_fu_462_p_dout0);

assign and_ln59_fu_331_p2 = (or_ln59_fu_309_p2 & or_ln59_1_fu_325_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_444 = ((1'd1 == and_ln59_1_reg_512) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_450 = ((1'd1 == and_ln59_1_reg_512) & (1'b0 == ap_block_pp0_stage4_00001) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_condition_455 = ((1'd1 == and_ln59_1_reg_512) & (1'd1 == and_ln59_2_fu_392_p2) & (icmp_ln60_fu_398_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln59_1_fu_292_p1 = tmp_1_i_reg_491;

assign bitcast_ln59_2_fu_358_p1 = tmp_2_i_fu_348_p4;

assign bitcast_ln59_fu_262_p1 = tmp_i_fu_252_p4;

assign grp_fu_462_p_ce = 1'b1;

assign grp_fu_462_p_din0 = grp_fu_209_p0;

assign grp_fu_462_p_din1 = tmp_1_i_reg_491;

assign grp_fu_462_p_opcode = grp_fu_209_opcode;

assign icmp_ln59_1_fu_286_p2 = ((trunc_ln59_1_fu_276_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_313_p2 = ((tmp_5_fu_295_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_3_fu_319_p2 = ((trunc_ln59_2_fu_305_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_4_fu_376_p2 = ((tmp_7_fu_362_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_5_fu_382_p2 = ((trunc_ln59_3_fu_372_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_280_p2 = ((tmp_fu_266_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_398_p2 = ((j_1_reg_465 == 64'd7) ? 1'b1 : 1'b0);

assign or_ln59_1_fu_325_p2 = (icmp_ln59_3_fu_319_p2 | icmp_ln59_2_fu_313_p2);

assign or_ln59_2_fu_388_p2 = (icmp_ln59_5_reg_531 | icmp_ln59_4_reg_526);

assign or_ln59_fu_309_p2 = (icmp_ln59_reg_502 | icmp_ln59_1_reg_507);

assign regions_2_address0 = zext_ln59_fu_230_p1;

assign regions_3_address0 = regions_3_addr_reg_481;

assign regions_4_address0 = regions_4_addr_reg_486;

assign regions_address0 = zext_ln59_fu_230_p1;

assign tmp_5_fu_295_p4 = {{bitcast_ln59_1_fu_292_p1[30:23]}};

assign tmp_7_fu_362_p4 = {{bitcast_ln59_2_fu_358_p1[30:23]}};

assign tmp_fu_266_p4 = {{bitcast_ln59_fu_262_p1[30:23]}};

assign trunc_ln59_1_fu_276_p1 = bitcast_ln59_fu_262_p1[22:0];

assign trunc_ln59_2_fu_305_p1 = bitcast_ln59_1_fu_292_p1[22:0];

assign trunc_ln59_3_fu_372_p1 = bitcast_ln59_2_fu_358_p1[22:0];

assign trunc_ln59_fu_221_p1 = j_fu_80[11:0];

assign zext_ln59_fu_230_p1 = add_ln59_fu_225_p2;

endmodule //run_run_test_Pipeline_VITIS_LOOP_55_2
