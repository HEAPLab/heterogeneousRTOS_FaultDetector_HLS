// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_read_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        data_in_vld_i,
        data_in_vld_o,
        data_in_vld_o_ap_vld,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        inputAOV,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12
);

parameter    ap_ST_fsm_state1 = 79'd1;
parameter    ap_ST_fsm_state2 = 79'd2;
parameter    ap_ST_fsm_state3 = 79'd4;
parameter    ap_ST_fsm_state4 = 79'd8;
parameter    ap_ST_fsm_state5 = 79'd16;
parameter    ap_ST_fsm_state6 = 79'd32;
parameter    ap_ST_fsm_state7 = 79'd64;
parameter    ap_ST_fsm_state8 = 79'd128;
parameter    ap_ST_fsm_state9 = 79'd256;
parameter    ap_ST_fsm_state10 = 79'd512;
parameter    ap_ST_fsm_state11 = 79'd1024;
parameter    ap_ST_fsm_state12 = 79'd2048;
parameter    ap_ST_fsm_state13 = 79'd4096;
parameter    ap_ST_fsm_state14 = 79'd8192;
parameter    ap_ST_fsm_state15 = 79'd16384;
parameter    ap_ST_fsm_state16 = 79'd32768;
parameter    ap_ST_fsm_state17 = 79'd65536;
parameter    ap_ST_fsm_state18 = 79'd131072;
parameter    ap_ST_fsm_state19 = 79'd262144;
parameter    ap_ST_fsm_state20 = 79'd524288;
parameter    ap_ST_fsm_state21 = 79'd1048576;
parameter    ap_ST_fsm_state22 = 79'd2097152;
parameter    ap_ST_fsm_state23 = 79'd4194304;
parameter    ap_ST_fsm_state24 = 79'd8388608;
parameter    ap_ST_fsm_state25 = 79'd16777216;
parameter    ap_ST_fsm_state26 = 79'd33554432;
parameter    ap_ST_fsm_state27 = 79'd67108864;
parameter    ap_ST_fsm_state28 = 79'd134217728;
parameter    ap_ST_fsm_state29 = 79'd268435456;
parameter    ap_ST_fsm_state30 = 79'd536870912;
parameter    ap_ST_fsm_state31 = 79'd1073741824;
parameter    ap_ST_fsm_state32 = 79'd2147483648;
parameter    ap_ST_fsm_state33 = 79'd4294967296;
parameter    ap_ST_fsm_state34 = 79'd8589934592;
parameter    ap_ST_fsm_state35 = 79'd17179869184;
parameter    ap_ST_fsm_state36 = 79'd34359738368;
parameter    ap_ST_fsm_state37 = 79'd68719476736;
parameter    ap_ST_fsm_state38 = 79'd137438953472;
parameter    ap_ST_fsm_state39 = 79'd274877906944;
parameter    ap_ST_fsm_state40 = 79'd549755813888;
parameter    ap_ST_fsm_state41 = 79'd1099511627776;
parameter    ap_ST_fsm_state42 = 79'd2199023255552;
parameter    ap_ST_fsm_state43 = 79'd4398046511104;
parameter    ap_ST_fsm_state44 = 79'd8796093022208;
parameter    ap_ST_fsm_state45 = 79'd17592186044416;
parameter    ap_ST_fsm_state46 = 79'd35184372088832;
parameter    ap_ST_fsm_state47 = 79'd70368744177664;
parameter    ap_ST_fsm_state48 = 79'd140737488355328;
parameter    ap_ST_fsm_state49 = 79'd281474976710656;
parameter    ap_ST_fsm_state50 = 79'd562949953421312;
parameter    ap_ST_fsm_state51 = 79'd1125899906842624;
parameter    ap_ST_fsm_state52 = 79'd2251799813685248;
parameter    ap_ST_fsm_state53 = 79'd4503599627370496;
parameter    ap_ST_fsm_state54 = 79'd9007199254740992;
parameter    ap_ST_fsm_state55 = 79'd18014398509481984;
parameter    ap_ST_fsm_state56 = 79'd36028797018963968;
parameter    ap_ST_fsm_state57 = 79'd72057594037927936;
parameter    ap_ST_fsm_state58 = 79'd144115188075855872;
parameter    ap_ST_fsm_state59 = 79'd288230376151711744;
parameter    ap_ST_fsm_state60 = 79'd576460752303423488;
parameter    ap_ST_fsm_state61 = 79'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 79'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 79'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 79'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 79'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 79'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 79'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 79'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 79'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 79'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 79'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 79'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 79'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 79'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 79'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 79'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 79'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 79'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 79'd302231454903657293676544;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] p_read;
input  [7:0] data_in_vld_i;
output  [7:0] data_in_vld_o;
output   data_in_vld_o_ap_vld;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [15:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;
input  [31:0] p_read8;
input  [31:0] p_read9;
input  [31:0] p_read10;
input  [31:0] p_read11;
input  [31:0] p_read12;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] inputAOV;
output  [0:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [15:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;
output  [31:0] ap_return_12;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] data_in_vld_o;
reg data_in_vld_o_ap_vld;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg[0:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[15:0] ap_return_4;
reg[31:0] ap_return_5;
reg[31:0] ap_return_6;
reg[31:0] ap_return_7;
reg[31:0] ap_return_8;
reg[31:0] ap_return_9;
reg[31:0] ap_return_10;
reg[31:0] ap_return_11;
reg[31:0] ap_return_12;

(* fsm_encoding = "none" *) reg   [78:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln482_reg_1193;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state72;
wire   [0:0] icmp_ln482_fu_665_p2;
reg   [31:0] tmp_reg_1268;
reg   [31:0] tmp_73_reg_1273;
reg   [31:0] tmp_s_reg_1278;
reg   [31:0] tmp_76_reg_1283;
reg   [31:0] tmp_77_reg_1288;
reg   [31:0] tmp_78_reg_1293;
reg   [31:0] tmp_79_reg_1298;
reg   [31:0] tmp_80_reg_1303;
wire   [7:0] empty_78_fu_772_p1;
reg   [7:0] empty_78_reg_1308;
reg   [7:0] taskId_reg_1313;
reg   [7:0] executionId_reg_1318;
reg   [15:0] uniId_reg_1323;
reg   [7:0] tmp_81_reg_1328;
wire   [0:0] icmp_ln491_fu_824_p2;
reg   [0:0] icmp_ln491_reg_1333;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state77;
wire   [3:0] empty_79_fu_960_p2;
reg   [3:0] empty_79_reg_1531;
wire   [0:0] exitcond1_fu_954_p2;
wire   [2:0] empty_80_fu_966_p1;
reg   [2:0] empty_80_reg_1541;
reg   [2:0] dest_AOV_address0;
reg    dest_AOV_ce0;
reg    dest_AOV_we0;
reg   [31:0] dest_AOV_d0;
wire   [31:0] dest_AOV_q0;
reg   [2:0] dest_AOV_address1;
reg    dest_AOV_ce1;
reg    dest_AOV_we1;
reg   [31:0] dest_AOV_d1;
reg   [0:0] write_flag15_2_reg_440;
reg    ap_block_state2_io;
reg   [15:0] phi_ln499_reg_451;
reg   [31:0] AOV_0_2_reg_460;
reg   [0:0] write_flag18_2_reg_471;
reg   [31:0] AOV_1_2_reg_482;
reg   [0:0] write_flag21_2_reg_493;
reg   [7:0] phi_ln499_1_reg_504;
reg   [31:0] AOV_2_2_reg_513;
reg   [0:0] write_flag24_2_reg_524;
reg   [31:0] AOV_3_2_reg_535;
reg   [0:0] write_flag27_2_reg_546;
reg   [7:0] phi_ln499_2_reg_557;
reg   [31:0] AOV_4_2_reg_566;
reg   [0:0] write_flag30_2_reg_577;
reg   [31:0] AOV_5_2_reg_588;
reg   [0:0] write_flag33_2_reg_599;
reg   [7:0] phi_ln499_3_reg_610;
reg   [31:0] AOV_6_2_reg_619;
reg   [0:0] write_flag36_2_reg_630;
reg   [0:0] write_flag_0_reg_641;
reg   [31:0] AOV_7_2_reg_654;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire   [63:0] loop_index_cast25_fu_949_p1;
wire  signed [63:0] p_cast_cast_fu_681_p1;
reg   [3:0] loop_index_fu_182;
wire    ap_CS_fsm_state78;
reg   [31:0] AOV_7_013_fu_186;
reg   [0:0] write_flag36_0_fu_190;
reg   [31:0] AOV_6_014_fu_194;
reg   [0:0] write_flag33_0_fu_198;
reg   [31:0] AOV_5_015_fu_202;
reg   [0:0] write_flag30_0_fu_206;
reg   [31:0] AOV_4_017_fu_210;
reg   [0:0] write_flag27_0_fu_214;
reg   [31:0] AOV_3_018_fu_218;
reg   [0:0] write_flag24_0_fu_222;
reg   [31:0] AOV_2_020_fu_226;
reg   [0:0] write_flag21_0_fu_230;
reg   [31:0] AOV_1_021_fu_234;
reg   [0:0] write_flag18_0_fu_238;
reg   [31:0] AOV_0_023_fu_242;
reg   [0:0] write_flag15_0_fu_246;
wire   [31:0] empty_fu_816_p1;
wire   [31:0] empty_71_fu_820_p1;
wire   [31:0] empty_72_fu_829_p1;
wire   [31:0] empty_73_fu_833_p1;
wire   [31:0] empty_74_fu_837_p1;
wire   [31:0] empty_75_fu_841_p1;
wire   [31:0] empty_76_fu_845_p1;
wire   [31:0] empty_77_fu_849_p1;
wire   [57:0] p_cast_fu_671_p4;
wire    ap_CS_fsm_state79;
wire   [0:0] or_ln499_fu_1054_p2;
wire   [31:0] select_ln499_fu_1059_p3;
wire   [31:0] select_ln499_1_fu_1066_p3;
wire   [31:0] select_ln499_2_fu_1073_p3;
wire   [31:0] select_ln499_3_fu_1080_p3;
wire   [31:0] select_ln499_4_fu_1087_p3;
wire   [31:0] select_ln499_5_fu_1094_p3;
wire   [31:0] select_ln499_6_fu_1101_p3;
wire   [31:0] select_ln499_7_fu_1108_p3;
reg   [0:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [15:0] ap_return_4_preg;
reg   [31:0] ap_return_5_preg;
reg   [31:0] ap_return_6_preg;
reg   [31:0] ap_return_7_preg;
reg   [31:0] ap_return_8_preg;
reg   [31:0] ap_return_9_preg;
reg   [31:0] ap_return_10_preg;
reg   [31:0] ap_return_11_preg;
reg   [31:0] ap_return_12_preg;
reg   [78:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
reg    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 79'd1;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 16'd0;
#0 ap_return_5_preg = 32'd0;
#0 ap_return_6_preg = 32'd0;
#0 ap_return_7_preg = 32'd0;
#0 ap_return_8_preg = 32'd0;
#0 ap_return_9_preg = 32'd0;
#0 ap_return_10_preg = 32'd0;
#0 ap_return_11_preg = 32'd0;
#0 ap_return_12_preg = 32'd0;
end

run_read_data_1_dest_AOV_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dest_AOV_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dest_AOV_address0),
    .ce0(dest_AOV_ce0),
    .we0(dest_AOV_we0),
    .d0(dest_AOV_d0),
    .q0(dest_AOV_q0),
    .address1(dest_AOV_address1),
    .ce1(dest_AOV_ce1),
    .we1(dest_AOV_we1),
    .d1(dest_AOV_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_0_preg <= or_ln499_fu_1054_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_10_preg <= select_ln499_5_fu_1094_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_11_preg <= select_ln499_6_fu_1101_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_12_preg <= select_ln499_7_fu_1108_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_1_preg <= phi_ln499_3_reg_610;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_2_preg <= phi_ln499_2_reg_557;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_3_preg <= phi_ln499_1_reg_504;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_4_preg <= phi_ln499_reg_451;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_5_preg <= select_ln499_fu_1059_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_6_preg <= select_ln499_1_fu_1066_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_7_preg <= select_ln499_2_fu_1073_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_8_preg <= select_ln499_3_fu_1080_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            ap_return_9_preg <= select_ln499_4_fu_1087_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        loop_index_fu_182 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        loop_index_fu_182 <= empty_79_reg_1531;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        phi_ln499_1_reg_504 <= executionId_reg_1318;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        phi_ln499_1_reg_504 <= p_read3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        phi_ln499_2_reg_557 <= taskId_reg_1313;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        phi_ln499_2_reg_557 <= p_read2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        phi_ln499_3_reg_610 <= empty_78_reg_1308;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        phi_ln499_3_reg_610 <= p_read1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        phi_ln499_reg_451 <= uniId_reg_1323;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        phi_ln499_reg_451 <= p_read4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag15_0_fu_246 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag15_0_fu_246 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag15_2_reg_440 <= write_flag15_0_fu_246;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag15_2_reg_440 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag18_0_fu_238 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag18_0_fu_238 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag18_2_reg_471 <= write_flag18_0_fu_238;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag18_2_reg_471 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag21_0_fu_230 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd2) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag21_0_fu_230 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag21_2_reg_493 <= write_flag21_0_fu_230;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag21_2_reg_493 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag24_0_fu_222 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd3) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag24_0_fu_222 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag24_2_reg_524 <= write_flag24_0_fu_222;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag24_2_reg_524 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag27_0_fu_214 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd4) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag27_0_fu_214 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag27_2_reg_546 <= write_flag27_0_fu_214;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag27_2_reg_546 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag30_0_fu_206 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd5) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag30_0_fu_206 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag30_2_reg_577 <= write_flag30_0_fu_206;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag30_2_reg_577 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag33_0_fu_198 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd6) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag33_0_fu_198 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag33_2_reg_599 <= write_flag33_0_fu_198;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag33_2_reg_599 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        write_flag36_0_fu_190 <= 1'd0;
    end else if (((empty_80_reg_1541 == 3'd7) & (1'b1 == ap_CS_fsm_state78))) begin
        write_flag36_0_fu_190 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag36_2_reg_630 <= write_flag36_0_fu_190;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag36_2_reg_630 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        write_flag_0_reg_641 <= 1'd0;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
        write_flag_0_reg_641 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_0_023_fu_242 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        AOV_0_2_reg_460 <= AOV_0_023_fu_242;
        AOV_1_2_reg_482 <= AOV_1_021_fu_234;
        AOV_2_2_reg_513 <= AOV_2_020_fu_226;
        AOV_3_2_reg_535 <= AOV_3_018_fu_218;
        AOV_4_2_reg_566 <= AOV_4_017_fu_210;
        AOV_5_2_reg_588 <= AOV_5_015_fu_202;
        AOV_6_2_reg_619 <= AOV_6_014_fu_194;
        AOV_7_2_reg_654 <= AOV_7_013_fu_186;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_1_021_fu_234 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd2) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_2_020_fu_226 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd3) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_3_018_fu_218 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd4) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_4_017_fu_210 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd5) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_5_015_fu_202 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd6) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_6_014_fu_194 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_80_reg_1541 == 3'd7) & (1'b1 == ap_CS_fsm_state78))) begin
        AOV_7_013_fu_186 <= dest_AOV_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        empty_78_reg_1308 <= empty_78_fu_772_p1;
        executionId_reg_1318 <= {{m_axi_gmem_RDATA[23:16]}};
        taskId_reg_1313 <= {{m_axi_gmem_RDATA[15:8]}};
        tmp_73_reg_1273 <= {{m_axi_gmem_RDATA[159:128]}};
        tmp_76_reg_1283 <= {{m_axi_gmem_RDATA[223:192]}};
        tmp_77_reg_1288 <= {{m_axi_gmem_RDATA[255:224]}};
        tmp_78_reg_1293 <= {{m_axi_gmem_RDATA[287:256]}};
        tmp_79_reg_1298 <= {{m_axi_gmem_RDATA[319:288]}};
        tmp_80_reg_1303 <= {{m_axi_gmem_RDATA[351:320]}};
        tmp_81_reg_1328 <= {{m_axi_gmem_RDATA[55:48]}};
        tmp_reg_1268 <= {{m_axi_gmem_RDATA[127:96]}};
        tmp_s_reg_1278 <= {{m_axi_gmem_RDATA[191:160]}};
        uniId_reg_1323 <= {{m_axi_gmem_RDATA[47:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        empty_79_reg_1531 <= empty_79_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_954_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        empty_80_reg_1541 <= empty_80_fu_966_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln482_reg_1193 <= icmp_ln482_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        icmp_ln491_reg_1333 <= icmp_ln491_fu_824_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state2_io)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_RVALID == 1'b0)) begin
        ap_ST_fsm_state72_blk = 1'b1;
    end else begin
        ap_ST_fsm_state72_blk = 1'b0;
    end
end

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_0 = or_ln499_fu_1054_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_1 = phi_ln499_3_reg_610;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_10 = select_ln499_5_fu_1094_p3;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_11 = select_ln499_6_fu_1101_p3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_12 = select_ln499_7_fu_1108_p3;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_2 = phi_ln499_2_reg_557;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_3 = phi_ln499_1_reg_504;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_4 = phi_ln499_reg_451;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_5 = select_ln499_fu_1059_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_6 = select_ln499_1_fu_1066_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_7 = select_ln499_2_fu_1073_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_8 = select_ln499_3_fu_1080_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        ap_return_9 = select_ln499_4_fu_1087_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((icmp_ln491_reg_1333 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        data_in_vld_o = 8'd0;
    end else begin
        data_in_vld_o = data_in_vld_i;
    end
end

always @ (*) begin
    if (((icmp_ln491_reg_1333 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
        data_in_vld_o_ap_vld = 1'b1;
    end else begin
        data_in_vld_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        dest_AOV_address0 = loop_index_cast25_fu_949_p1;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        dest_AOV_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        dest_AOV_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        dest_AOV_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        dest_AOV_address0 = 64'd1;
    end else begin
        dest_AOV_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        dest_AOV_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        dest_AOV_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        dest_AOV_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        dest_AOV_address1 = 64'd0;
    end else begin
        dest_AOV_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state73))) begin
        dest_AOV_ce0 = 1'b1;
    end else begin
        dest_AOV_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        dest_AOV_ce1 = 1'b1;
    end else begin
        dest_AOV_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        dest_AOV_d0 = empty_77_fu_849_p1;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        dest_AOV_d0 = empty_75_fu_841_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        dest_AOV_d0 = empty_73_fu_833_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        dest_AOV_d0 = empty_71_fu_820_p1;
    end else begin
        dest_AOV_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        dest_AOV_d1 = empty_76_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        dest_AOV_d1 = empty_74_fu_837_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        dest_AOV_d1 = empty_72_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        dest_AOV_d1 = empty_fu_816_p1;
    end else begin
        dest_AOV_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        dest_AOV_we0 = 1'b1;
    end else begin
        dest_AOV_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        dest_AOV_we1 = 1'b1;
    end else begin
        dest_AOV_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd0))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_RVALID == 1'b1))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln482_reg_1193 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (m_axi_gmem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((exitcond1_fu_954_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

always @ (*) begin
    ap_block_state2_io = ((icmp_ln482_reg_1193 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign empty_71_fu_820_p1 = tmp_73_reg_1273;

assign empty_72_fu_829_p1 = tmp_s_reg_1278;

assign empty_73_fu_833_p1 = tmp_76_reg_1283;

assign empty_74_fu_837_p1 = tmp_77_reg_1288;

assign empty_75_fu_841_p1 = tmp_78_reg_1293;

assign empty_76_fu_845_p1 = tmp_79_reg_1298;

assign empty_77_fu_849_p1 = tmp_80_reg_1303;

assign empty_78_fu_772_p1 = m_axi_gmem_RDATA[7:0];

assign empty_79_fu_960_p2 = (loop_index_fu_182 + 4'd1);

assign empty_80_fu_966_p1 = loop_index_fu_182[2:0];

assign empty_fu_816_p1 = tmp_reg_1268;

assign exitcond1_fu_954_p2 = ((loop_index_fu_182 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln482_fu_665_p2 = ((data_in_vld_i == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln491_fu_824_p2 = ((tmp_81_reg_1328 == 8'd0) ? 1'b1 : 1'b0);

assign loop_index_cast25_fu_949_p1 = loop_index_fu_182;

assign m_axi_gmem_ARADDR = p_cast_cast_fu_681_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 512'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln499_fu_1054_p2 = (write_flag_0_reg_641 | p_read);

assign p_cast_cast_fu_681_p1 = $signed(p_cast_fu_671_p4);

assign p_cast_fu_671_p4 = {{inputAOV[63:6]}};

assign select_ln499_1_fu_1066_p3 = ((write_flag18_2_reg_471[0:0] == 1'b1) ? AOV_1_2_reg_482 : p_read6);

assign select_ln499_2_fu_1073_p3 = ((write_flag21_2_reg_493[0:0] == 1'b1) ? AOV_2_2_reg_513 : p_read7);

assign select_ln499_3_fu_1080_p3 = ((write_flag24_2_reg_524[0:0] == 1'b1) ? AOV_3_2_reg_535 : p_read8);

assign select_ln499_4_fu_1087_p3 = ((write_flag27_2_reg_546[0:0] == 1'b1) ? AOV_4_2_reg_566 : p_read9);

assign select_ln499_5_fu_1094_p3 = ((write_flag30_2_reg_577[0:0] == 1'b1) ? AOV_5_2_reg_588 : p_read10);

assign select_ln499_6_fu_1101_p3 = ((write_flag33_2_reg_599[0:0] == 1'b1) ? AOV_6_2_reg_619 : p_read11);

assign select_ln499_7_fu_1108_p3 = ((write_flag36_2_reg_630[0:0] == 1'b1) ? AOV_7_2_reg_654 : p_read12);

assign select_ln499_fu_1059_p3 = ((write_flag15_2_reg_440[0:0] == 1'b1) ? AOV_0_2_reg_460 : p_read5);

endmodule //run_read_data
