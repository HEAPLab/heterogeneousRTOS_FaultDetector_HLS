// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_writeOutcome (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        errorInTask_address0,
        errorInTask_ce0,
        errorInTask_we0,
        errorInTask_d0,
        errorInTask1,
        checkId,
        taskId,
        uniId,
        error,
        toScheduler_TDATA,
        toScheduler_TVALID,
        toScheduler_TREADY,
        outcomeInRam_address0,
        outcomeInRam_ce0,
        outcomeInRam_we0,
        outcomeInRam_d0,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] errorInTask_address0;
output   errorInTask_ce0;
output   errorInTask_we0;
output  [0:0] errorInTask_d0;
input  [3:0] errorInTask1;
input  [7:0] checkId;
input  [7:0] taskId;
input  [15:0] uniId;
input  [0:0] error;
output  [7:0] toScheduler_TDATA;
output   toScheduler_TVALID;
input   toScheduler_TREADY;
output  [3:0] outcomeInRam_address0;
output   outcomeInRam_ce0;
output  [35:0] outcomeInRam_we0;
output  [287:0] outcomeInRam_d0;
input  [31:0] p_read;
input  [31:0] p_read1;
input  [31:0] p_read2;
input  [31:0] p_read3;
input  [31:0] p_read4;
input  [31:0] p_read5;
input  [31:0] p_read6;
input  [31:0] p_read7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg errorInTask_ce0;
reg errorInTask_we0;
reg toScheduler_TVALID;
reg outcomeInRam_ce0;
reg[35:0] outcomeInRam_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    toScheduler_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire   [63:0] errorInTask1_cast_fu_306_p1;
reg   [63:0] errorInTask1_cast_reg_472;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond4_fu_323_p2;
wire   [31:0] outcome_AOV_q1;
reg   [31:0] outcome_AOV_load_reg_490;
wire    ap_CS_fsm_state3;
wire   [31:0] outcome_AOV_q0;
reg   [31:0] outcome_AOV_load_1_reg_495;
reg   [31:0] outcome_AOV_load_2_reg_510;
wire    ap_CS_fsm_state4;
reg   [31:0] outcome_AOV_load_3_reg_515;
reg   [31:0] outcome_AOV_load_4_reg_530;
wire    ap_CS_fsm_state5;
reg   [31:0] outcome_AOV_load_5_reg_535;
wire    ap_CS_fsm_state6;
reg   [2:0] outcome_AOV_address0;
reg    outcome_AOV_ce0;
reg    outcome_AOV_we0;
reg   [2:0] outcome_AOV_address1;
reg    outcome_AOV_ce1;
wire   [63:0] loop_index3_cast_fu_318_p1;
reg   [3:0] loop_index3_fu_106;
wire   [3:0] empty_fu_329_p2;
reg    ap_block_state7;
reg    ap_block_state7_io;
wire   [31:0] tmp_fu_335_p10;
wire    ap_CS_fsm_state8;
wire   [31:0] empty_61_fu_377_p1;
wire   [31:0] empty_60_fu_373_p1;
wire   [31:0] empty_59_fu_370_p1;
wire   [31:0] empty_58_fu_367_p1;
wire   [31:0] empty_57_fu_364_p1;
wire   [31:0] empty_56_fu_361_p1;
wire   [31:0] empty_55_fu_358_p1;
wire   [31:0] empty_54_fu_355_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

run_writeOutcome_outcome_AOV_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
outcome_AOV_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(outcome_AOV_address0),
    .ce0(outcome_AOV_ce0),
    .we0(outcome_AOV_we0),
    .d0(tmp_fu_335_p10),
    .q0(outcome_AOV_q0),
    .address1(outcome_AOV_address1),
    .ce1(outcome_AOV_ce1),
    .q1(outcome_AOV_q1)
);

run_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U144(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(p_read4),
    .din5(p_read5),
    .din6(p_read6),
    .din7(p_read7),
    .din8(loop_index3_fu_106),
    .dout(tmp_fu_335_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        loop_index3_fu_106 <= 4'd0;
    end else if (((exitcond4_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_index3_fu_106 <= empty_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        errorInTask1_cast_reg_472[3 : 0] <= errorInTask1_cast_fu_306_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outcome_AOV_load_1_reg_495 <= outcome_AOV_q0;
        outcome_AOV_load_reg_490 <= outcome_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outcome_AOV_load_2_reg_510 <= outcome_AOV_q0;
        outcome_AOV_load_3_reg_515 <= outcome_AOV_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        outcome_AOV_load_4_reg_530 <= outcome_AOV_q0;
        outcome_AOV_load_5_reg_535 <= outcome_AOV_q1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state7_io) | ((error == 1'd1) & (toScheduler_TREADY == 1'b0)))) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (~((1'b1 == ap_block_state7_io) | ((error == 1'd1) & (toScheduler_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7)))) begin
        errorInTask_ce0 = 1'b1;
    end else begin
        errorInTask_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state7_io) | ((error == 1'd1) & (toScheduler_TREADY == 1'b0))) & (error == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        errorInTask_we0 = 1'b1;
    end else begin
        errorInTask_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~((1'b1 == ap_block_state7_io) | ((error == 1'd1) & (toScheduler_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7)))) begin
        outcomeInRam_ce0 = 1'b1;
    end else begin
        outcomeInRam_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outcomeInRam_we0 = 36'd68719476733;
    end else begin
        outcomeInRam_we0 = 36'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        outcome_AOV_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outcome_AOV_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        outcome_AOV_address0 = 64'd2;
    end else if (((exitcond4_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        outcome_AOV_address0 = 64'd1;
    end else if (((exitcond4_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        outcome_AOV_address0 = loop_index3_cast_fu_318_p1;
    end else begin
        outcome_AOV_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        outcome_AOV_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        outcome_AOV_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        outcome_AOV_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        outcome_AOV_address1 = 64'd0;
    end else begin
        outcome_AOV_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((exitcond4_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond4_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        outcome_AOV_ce0 = 1'b1;
    end else begin
        outcome_AOV_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        outcome_AOV_ce1 = 1'b1;
    end else begin
        outcome_AOV_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        outcome_AOV_we0 = 1'b1;
    end else begin
        outcome_AOV_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((error == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        toScheduler_TDATA_blk_n = toScheduler_TREADY;
    end else begin
        toScheduler_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state7_io) | ((error == 1'd1) & (toScheduler_TREADY == 1'b0))) & (error == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        toScheduler_TVALID = 1'b1;
    end else begin
        toScheduler_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((~((1'b1 == ap_block_state7_io) | ((error == 1'd1) & (toScheduler_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state7 = ((error == 1'd1) & (toScheduler_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((error == 1'd1) & (toScheduler_TREADY == 1'b0));
end

assign empty_54_fu_355_p1 = outcome_AOV_load_reg_490;

assign empty_55_fu_358_p1 = outcome_AOV_load_1_reg_495;

assign empty_56_fu_361_p1 = outcome_AOV_load_2_reg_510;

assign empty_57_fu_364_p1 = outcome_AOV_load_3_reg_515;

assign empty_58_fu_367_p1 = outcome_AOV_load_4_reg_530;

assign empty_59_fu_370_p1 = outcome_AOV_load_5_reg_535;

assign empty_60_fu_373_p1 = outcome_AOV_q0;

assign empty_61_fu_377_p1 = outcome_AOV_q1;

assign empty_fu_329_p2 = (loop_index3_fu_106 + 4'd1);

assign errorInTask1_cast_fu_306_p1 = errorInTask1;

assign errorInTask_address0 = errorInTask1_cast_reg_472;

assign errorInTask_d0 = 1'd1;

assign exitcond4_fu_323_p2 = ((loop_index3_fu_106 == 4'd8) ? 1'b1 : 1'b0);

assign loop_index3_cast_fu_318_p1 = loop_index3_fu_106;

assign outcomeInRam_address0 = 64'd0;

assign outcomeInRam_d0 = {{{{{{{{{{{empty_61_fu_377_p1}, {empty_60_fu_373_p1}}, {empty_59_fu_370_p1}}, {empty_58_fu_367_p1}}, {empty_57_fu_364_p1}}, {empty_56_fu_361_p1}}, {empty_55_fu_358_p1}}, {empty_54_fu_355_p1}}, {uniId}}, {8'd0}}, {checkId}};

assign toScheduler_TDATA = taskId;

always @ (posedge ap_clk) begin
    errorInTask1_cast_reg_472[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //run_writeOutcome
