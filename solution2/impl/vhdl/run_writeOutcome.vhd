-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_writeOutcome is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    errorInTask_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    errorInTask_ce0 : OUT STD_LOGIC;
    errorInTask_we0 : OUT STD_LOGIC;
    errorInTask_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    errorInTask_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    errorInTask1 : IN STD_LOGIC_VECTOR (3 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    failedTaskExecutionId_read : IN STD_LOGIC_VECTOR (7 downto 0);
    checkId : IN STD_LOGIC_VECTOR (7 downto 0);
    taskId : IN STD_LOGIC_VECTOR (7 downto 0);
    executionId : IN STD_LOGIC_VECTOR (7 downto 0);
    uniId : IN STD_LOGIC_VECTOR (15 downto 0);
    error : IN STD_LOGIC_VECTOR (0 downto 0);
    outcomeInRam_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outcomeInRam_ce0 : OUT STD_LOGIC;
    outcomeInRam_we0 : OUT STD_LOGIC_VECTOR (35 downto 0);
    outcomeInRam_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
    failedTask : OUT STD_LOGIC_VECTOR (15 downto 0);
    failedTask_ap_vld : OUT STD_LOGIC;
    failedTask_ap_ack : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of run_writeOutcome is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv36_FFFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal failedTask_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal error_read_read_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal errorInTask_addr_reg_462 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outcome_AOV_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outcome_AOV_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_1_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_2_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal outcome_AOV_load_3_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal outcome_AOV_load_4_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal outcome_AOV_load_5_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal outcome_AOV_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal outcome_AOV_ce0 : STD_LOGIC;
    signal outcome_AOV_we0 : STD_LOGIC;
    signal outcome_AOV_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal outcome_AOV_ce1 : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_ap_start : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_ap_done : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_ap_idle : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_ap_ready : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_ce0 : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_we0 : STD_LOGIC;
    signal grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln447_reg_304 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal and_ln435_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_writeOutcome_Pipeline_1_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal errorInTask1_cast_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln435_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_58_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_57_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_56_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_55_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_54_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_53_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_52_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_writeOutcome_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (31 downto 0);
        outcome_AOV_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        outcome_AOV_ce0 : OUT STD_LOGIC;
        outcome_AOV_we0 : OUT STD_LOGIC;
        outcome_AOV_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_writeOutcome_outcome_AOV_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    outcome_AOV_U : component run_writeOutcome_outcome_AOV_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outcome_AOV_address0,
        ce0 => outcome_AOV_ce0,
        we0 => outcome_AOV_we0,
        d0 => grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_d0,
        q0 => outcome_AOV_q0,
        address1 => outcome_AOV_address1,
        ce1 => outcome_AOV_ce1,
        q1 => outcome_AOV_q1);

    grp_writeOutcome_Pipeline_1_fu_315 : component run_writeOutcome_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_writeOutcome_Pipeline_1_fu_315_ap_start,
        ap_done => grp_writeOutcome_Pipeline_1_fu_315_ap_done,
        ap_idle => grp_writeOutcome_Pipeline_1_fu_315_ap_idle,
        ap_ready => grp_writeOutcome_Pipeline_1_fu_315_ap_ready,
        p_read1 => p_read1,
        p_read2 => p_read2,
        p_read3 => p_read3,
        p_read4 => p_read4,
        p_read5 => p_read5,
        p_read6 => p_read6,
        p_read7 => p_read7,
        p_read8 => p_read8,
        outcome_AOV_address0 => grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_address0,
        outcome_AOV_ce0 => grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_ce0,
        outcome_AOV_we0 => grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_we0,
        outcome_AOV_d0 => grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_return_preg <= phi_ln447_reg_304;
                end if; 
            end if;
        end if;
    end process;


    grp_writeOutcome_Pipeline_1_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_writeOutcome_Pipeline_1_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_writeOutcome_Pipeline_1_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_writeOutcome_Pipeline_1_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_writeOutcome_Pipeline_1_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_ln447_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln435_fu_354_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_writeOutcome_Pipeline_1_fu_315_ap_done = ap_const_logic_1)) or (not(((ap_const_boolean_1 = ap_block_state8_io) or ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0)))) and (error_read_read_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                phi_ln447_reg_304 <= p_read;
            elsif ((not(((ap_const_boolean_1 = ap_block_state8_io) or ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0)))) and (error = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                phi_ln447_reg_304 <= executionId;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                errorInTask_addr_reg_462 <= errorInTask1_cast_fu_337_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                outcome_AOV_load_1_reg_517 <= outcome_AOV_q0;
                outcome_AOV_load_reg_512 <= outcome_AOV_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                outcome_AOV_load_2_reg_532 <= outcome_AOV_q1;
                outcome_AOV_load_3_reg_537 <= outcome_AOV_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                outcome_AOV_load_4_reg_552 <= outcome_AOV_q1;
                outcome_AOV_load_5_reg_557 <= outcome_AOV_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, error, failedTask_ap_ack, ap_CS_fsm_state8, ap_CS_fsm_state2, grp_writeOutcome_Pipeline_1_fu_315_ap_done, ap_block_state8_io, and_ln435_fu_354_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = and_ln435_fu_354_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_writeOutcome_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_const_lv1_0 = and_ln435_fu_354_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_writeOutcome_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_const_boolean_1 = ap_block_state8_io) or ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    and_ln435_fu_354_p2 <= (icmp_ln435_fu_342_p2 and icmp_ln1065_fu_348_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_writeOutcome_Pipeline_1_fu_315_ap_done)
    begin
        if ((grp_writeOutcome_Pipeline_1_fu_315_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(error, failedTask_ap_ack, ap_block_state8_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state8_io) or ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0)))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state8_assign_proc : process(error, failedTask_ap_ack)
    begin
                ap_block_state8 <= ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(error, failedTask_ap_ack)
    begin
                ap_block_state8_io <= ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(phi_ln447_reg_304, ap_return_preg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_return <= phi_ln447_reg_304;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    empty_52_fu_368_p1 <= outcome_AOV_load_1_reg_517;
    empty_53_fu_371_p1 <= outcome_AOV_load_2_reg_532;
    empty_54_fu_374_p1 <= outcome_AOV_load_3_reg_537;
    empty_55_fu_377_p1 <= outcome_AOV_load_4_reg_552;
    empty_56_fu_380_p1 <= outcome_AOV_load_5_reg_557;
    empty_57_fu_383_p1 <= outcome_AOV_q1;
    empty_58_fu_387_p1 <= outcome_AOV_q0;
    empty_fu_365_p1 <= outcome_AOV_load_reg_512;
    errorInTask1_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(errorInTask1),64));

    errorInTask_address0_assign_proc : process(ap_CS_fsm_state1, errorInTask_addr_reg_462, ap_CS_fsm_state2, errorInTask1_cast_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            errorInTask_address0 <= errorInTask_addr_reg_462;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            errorInTask_address0 <= errorInTask1_cast_fu_337_p1(4 - 1 downto 0);
        else 
            errorInTask_address0 <= "XXXX";
        end if; 
    end process;


    errorInTask_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_writeOutcome_Pipeline_1_fu_315_ap_done)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_writeOutcome_Pipeline_1_fu_315_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            errorInTask_ce0 <= ap_const_logic_1;
        else 
            errorInTask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    errorInTask_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(error),8));

    errorInTask_we0_assign_proc : process(ap_CS_fsm_state2, grp_writeOutcome_Pipeline_1_fu_315_ap_done, and_ln435_fu_354_p2)
    begin
        if (((ap_const_lv1_0 = and_ln435_fu_354_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_writeOutcome_Pipeline_1_fu_315_ap_done = ap_const_logic_1))) then 
            errorInTask_we0 <= ap_const_logic_1;
        else 
            errorInTask_we0 <= ap_const_logic_0;
        end if; 
    end process;

    error_read_read_fu_156_p2 <= error;
    failedTask <= (executionId & taskId);

    failedTask_ap_vld_assign_proc : process(error, failedTask_ap_ack, ap_CS_fsm_state8, ap_block_state8_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state8_io) or ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0)))) and (error = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            failedTask_ap_vld <= ap_const_logic_1;
        else 
            failedTask_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    failedTask_blk_n_assign_proc : process(error, failedTask_ap_ack, ap_CS_fsm_state8)
    begin
        if (((error = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            failedTask_blk_n <= failedTask_ap_ack;
        else 
            failedTask_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    grp_writeOutcome_Pipeline_1_fu_315_ap_start <= grp_writeOutcome_Pipeline_1_fu_315_ap_start_reg;
    icmp_ln1065_fu_348_p2 <= "1" when (failedTaskExecutionId_read = executionId) else "0";
    icmp_ln435_fu_342_p2 <= "0" when (errorInTask_q0 = ap_const_lv8_0) else "1";
    outcomeInRam_address0 <= ap_const_lv64_0(4 - 1 downto 0);

    outcomeInRam_ce0_assign_proc : process(error, failedTask_ap_ack, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_block_state8_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (not(((ap_const_boolean_1 = ap_block_state8_io) or ((error = ap_const_lv1_1) and (failedTask_ap_ack = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            outcomeInRam_ce0 <= ap_const_logic_1;
        else 
            outcomeInRam_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outcomeInRam_d0 <= ((((((((((empty_58_fu_387_p1 & empty_57_fu_383_p1) & empty_56_fu_380_p1) & empty_55_fu_377_p1) & empty_54_fu_374_p1) & empty_53_fu_371_p1) & empty_52_fu_368_p1) & empty_fu_365_p1) & uniId) & executionId) & checkId);

    outcomeInRam_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            outcomeInRam_we0 <= ap_const_lv36_FFFFFFFFF;
        else 
            outcomeInRam_we0 <= ap_const_lv36_0;
        end if; 
    end process;


    outcome_AOV_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outcome_AOV_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outcome_AOV_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outcome_AOV_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outcome_AOV_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            outcome_AOV_address0 <= grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_address0;
        else 
            outcome_AOV_address0 <= "XXX";
        end if; 
    end process;


    outcome_AOV_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outcome_AOV_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            outcome_AOV_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outcome_AOV_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outcome_AOV_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            outcome_AOV_address1 <= "XXX";
        end if; 
    end process;


    outcome_AOV_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outcome_AOV_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            outcome_AOV_ce0 <= grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_ce0;
        else 
            outcome_AOV_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outcome_AOV_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outcome_AOV_ce1 <= ap_const_logic_1;
        else 
            outcome_AOV_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outcome_AOV_we0_assign_proc : process(ap_CS_fsm_state2, grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            outcome_AOV_we0 <= grp_writeOutcome_Pipeline_1_fu_315_outcome_AOV_we0;
        else 
            outcome_AOV_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
