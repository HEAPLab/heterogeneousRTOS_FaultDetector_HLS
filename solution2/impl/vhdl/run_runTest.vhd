-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_runTest is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
    startCopy : IN STD_LOGIC_VECTOR (7 downto 0);
    copying : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_10 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_11 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_13 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_14 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_16 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_17 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_18 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_19 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_20 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_21 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_22 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_23 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_24 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_25 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_26 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_27 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_28 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_29 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_30 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_31 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_32 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_33 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_34 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_35 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_36 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_37 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_38 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_39 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_40 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_41 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_42 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_43 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_44 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_45 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_46 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_47 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_48 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_49 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_50 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_51 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_52 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_53 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_54 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_55 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_56 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_57 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_58 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_59 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_60 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_61 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_62 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_ZL9n_regions_63 : IN STD_LOGIC_VECTOR (7 downto 0);
    regions_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_ce0 : OUT STD_LOGIC;
    regions_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_we0 : OUT STD_LOGIC;
    regions_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_ce1 : OUT STD_LOGIC;
    regions_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_we1 : OUT STD_LOGIC;
    regions_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_1_ce0 : OUT STD_LOGIC;
    regions_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_1_we0 : OUT STD_LOGIC;
    regions_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_1_ce1 : OUT STD_LOGIC;
    regions_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_1_we1 : OUT STD_LOGIC;
    regions_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_2_ce0 : OUT STD_LOGIC;
    regions_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_2_we0 : OUT STD_LOGIC;
    regions_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_2_ce1 : OUT STD_LOGIC;
    regions_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_2_we1 : OUT STD_LOGIC;
    regions_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_3_ce0 : OUT STD_LOGIC;
    regions_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_3_we0 : OUT STD_LOGIC;
    regions_3_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    regions_3_ce1 : OUT STD_LOGIC;
    regions_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    regions_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regions_3_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inputAOV_ap_vld : IN STD_LOGIC;
    startCopy_ap_vld : IN STD_LOGIC;
    startCopy_ap_ack : OUT STD_LOGIC;
    copying_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    p_ZL9n_regions_0_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_1_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_2_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_3_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_4_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_5_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_6_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_7_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_8_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_9_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_10_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_11_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_12_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_13_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_14_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_15_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_16_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_17_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_18_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_19_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_20_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_21_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_22_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_23_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_24_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_25_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_26_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_27_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_28_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_29_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_30_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_31_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_32_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_33_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_34_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_35_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_36_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_37_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_38_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_39_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_40_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_41_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_42_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_43_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_44_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_45_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_46_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_47_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_48_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_49_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_50_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_51_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_52_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_53_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_54_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_55_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_56_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_57_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_58_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_59_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_60_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_61_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_62_ap_vld : IN STD_LOGIC;
    p_ZL9n_regions_63_ap_vld : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of run_runTest is 
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal read_data_U0_ap_start : STD_LOGIC;
    signal read_data_U0_ap_done : STD_LOGIC;
    signal read_data_U0_ap_continue : STD_LOGIC;
    signal read_data_U0_ap_idle : STD_LOGIC;
    signal read_data_U0_ap_ready : STD_LOGIC;
    signal read_data_U0_copyDest_din : STD_LOGIC_VECTOR (319 downto 0);
    signal read_data_U0_copyDest_write : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read_data_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal read_data_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal read_data_U0_startCopy_ap_ack : STD_LOGIC;
    signal read_data_U0_copying : STD_LOGIC_VECTOR (7 downto 0);
    signal read_data_U0_copying_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal run_test_U0_ap_start : STD_LOGIC;
    signal run_test_U0_ap_done : STD_LOGIC;
    signal run_test_U0_ap_continue : STD_LOGIC;
    signal run_test_U0_ap_idle : STD_LOGIC;
    signal run_test_U0_ap_ready : STD_LOGIC;
    signal run_test_U0_copyDest_read : STD_LOGIC;
    signal run_test_U0_outcomeStream_din : STD_LOGIC_VECTOR (287 downto 0);
    signal run_test_U0_outcomeStream_write : STD_LOGIC;
    signal run_test_U0_regions_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal run_test_U0_regions_ce0 : STD_LOGIC;
    signal run_test_U0_regions_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal run_test_U0_regions_1_ce0 : STD_LOGIC;
    signal run_test_U0_regions_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal run_test_U0_regions_2_ce0 : STD_LOGIC;
    signal run_test_U0_regions_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal run_test_U0_regions_3_ce0 : STD_LOGIC;
    signal ap_sync_reg_run_test_U0_ap_start : STD_LOGIC := '0';
    signal writeOutcome_U0_ap_start : STD_LOGIC;
    signal writeOutcome_U0_ap_done : STD_LOGIC;
    signal writeOutcome_U0_ap_continue : STD_LOGIC;
    signal writeOutcome_U0_ap_idle : STD_LOGIC;
    signal writeOutcome_U0_ap_ready : STD_LOGIC;
    signal writeOutcome_U0_outcomeStream_read : STD_LOGIC;
    signal ap_sync_reg_writeOutcome_U0_ap_start : STD_LOGIC := '0';
    signal copyDest_full_n : STD_LOGIC;
    signal copyDest_dout : STD_LOGIC_VECTOR (319 downto 0);
    signal copyDest_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal copyDest_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal copyDest_empty_n : STD_LOGIC;
    signal outcomeStream_full_n : STD_LOGIC;
    signal outcomeStream_dout : STD_LOGIC_VECTOR (287 downto 0);
    signal outcomeStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal outcomeStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal outcomeStream_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        copyDest_din : OUT STD_LOGIC_VECTOR (319 downto 0);
        copyDest_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        copyDest_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        copyDest_full_n : IN STD_LOGIC;
        copyDest_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputAOV : IN STD_LOGIC_VECTOR (63 downto 0);
        startCopy : IN STD_LOGIC_VECTOR (7 downto 0);
        startCopy_ap_vld : IN STD_LOGIC;
        startCopy_ap_ack : OUT STD_LOGIC;
        copying : OUT STD_LOGIC_VECTOR (7 downto 0);
        copying_ap_vld : OUT STD_LOGIC );
    end component;


    component run_run_test IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        copyDest_dout : IN STD_LOGIC_VECTOR (319 downto 0);
        copyDest_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        copyDest_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        copyDest_empty_n : IN STD_LOGIC;
        copyDest_read : OUT STD_LOGIC;
        outcomeStream_din : OUT STD_LOGIC_VECTOR (287 downto 0);
        outcomeStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outcomeStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outcomeStream_full_n : IN STD_LOGIC;
        outcomeStream_write : OUT STD_LOGIC;
        p_ZL9n_regions_0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_15 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_16 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_17 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_18 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_19 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_20 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_21 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_22 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_23 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_24 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_25 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_26 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_27 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_28 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_29 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_30 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_31 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_32 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_33 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_34 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_35 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_36 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_37 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_38 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_39 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_40 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_41 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_42 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_43 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_44 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_45 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_46 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_47 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_48 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_49 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_50 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_51 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_52 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_53 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_54 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_55 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_56 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_57 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_58 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_59 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_60 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_61 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_62 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_ZL9n_regions_63 : IN STD_LOGIC_VECTOR (7 downto 0);
        regions_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_ce0 : OUT STD_LOGIC;
        regions_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_1_ce0 : OUT STD_LOGIC;
        regions_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_2_ce0 : OUT STD_LOGIC;
        regions_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regions_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        regions_3_ce0 : OUT STD_LOGIC;
        regions_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_writeOutcome IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outcomeStream_dout : IN STD_LOGIC_VECTOR (287 downto 0);
        outcomeStream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outcomeStream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outcomeStream_empty_n : IN STD_LOGIC;
        outcomeStream_read : OUT STD_LOGIC );
    end component;


    component run_fifo_w320_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (319 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (319 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w288_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (287 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (287 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    read_data_U0 : component run_read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_data_U0_ap_start,
        ap_done => read_data_U0_ap_done,
        ap_continue => read_data_U0_ap_continue,
        ap_idle => read_data_U0_ap_idle,
        ap_ready => read_data_U0_ap_ready,
        copyDest_din => read_data_U0_copyDest_din,
        copyDest_num_data_valid => copyDest_num_data_valid,
        copyDest_fifo_cap => copyDest_fifo_cap,
        copyDest_full_n => copyDest_full_n,
        copyDest_write => read_data_U0_copyDest_write,
        m_axi_gmem_AWVALID => read_data_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => read_data_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => read_data_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => read_data_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => read_data_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => read_data_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => read_data_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => read_data_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => read_data_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => read_data_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => read_data_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => read_data_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => read_data_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => read_data_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => read_data_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => read_data_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => read_data_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => read_data_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => read_data_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => read_data_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => read_data_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => read_data_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => read_data_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => read_data_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => read_data_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => read_data_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => read_data_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => read_data_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => read_data_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => read_data_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => read_data_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => read_data_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        inputAOV => inputAOV,
        startCopy => startCopy,
        startCopy_ap_vld => startCopy_ap_vld,
        startCopy_ap_ack => read_data_U0_startCopy_ap_ack,
        copying => read_data_U0_copying,
        copying_ap_vld => read_data_U0_copying_ap_vld);

    run_test_U0 : component run_run_test
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_test_U0_ap_start,
        ap_done => run_test_U0_ap_done,
        ap_continue => run_test_U0_ap_continue,
        ap_idle => run_test_U0_ap_idle,
        ap_ready => run_test_U0_ap_ready,
        copyDest_dout => copyDest_dout,
        copyDest_num_data_valid => copyDest_num_data_valid,
        copyDest_fifo_cap => copyDest_fifo_cap,
        copyDest_empty_n => copyDest_empty_n,
        copyDest_read => run_test_U0_copyDest_read,
        outcomeStream_din => run_test_U0_outcomeStream_din,
        outcomeStream_num_data_valid => outcomeStream_num_data_valid,
        outcomeStream_fifo_cap => outcomeStream_fifo_cap,
        outcomeStream_full_n => outcomeStream_full_n,
        outcomeStream_write => run_test_U0_outcomeStream_write,
        p_ZL9n_regions_0 => p_ZL9n_regions_0,
        p_ZL9n_regions_1 => p_ZL9n_regions_1,
        p_ZL9n_regions_2 => p_ZL9n_regions_2,
        p_ZL9n_regions_3 => p_ZL9n_regions_3,
        p_ZL9n_regions_4 => p_ZL9n_regions_4,
        p_ZL9n_regions_5 => p_ZL9n_regions_5,
        p_ZL9n_regions_6 => p_ZL9n_regions_6,
        p_ZL9n_regions_7 => p_ZL9n_regions_7,
        p_ZL9n_regions_8 => p_ZL9n_regions_8,
        p_ZL9n_regions_9 => p_ZL9n_regions_9,
        p_ZL9n_regions_10 => p_ZL9n_regions_10,
        p_ZL9n_regions_11 => p_ZL9n_regions_11,
        p_ZL9n_regions_12 => p_ZL9n_regions_12,
        p_ZL9n_regions_13 => p_ZL9n_regions_13,
        p_ZL9n_regions_14 => p_ZL9n_regions_14,
        p_ZL9n_regions_15 => p_ZL9n_regions_15,
        p_ZL9n_regions_16 => p_ZL9n_regions_16,
        p_ZL9n_regions_17 => p_ZL9n_regions_17,
        p_ZL9n_regions_18 => p_ZL9n_regions_18,
        p_ZL9n_regions_19 => p_ZL9n_regions_19,
        p_ZL9n_regions_20 => p_ZL9n_regions_20,
        p_ZL9n_regions_21 => p_ZL9n_regions_21,
        p_ZL9n_regions_22 => p_ZL9n_regions_22,
        p_ZL9n_regions_23 => p_ZL9n_regions_23,
        p_ZL9n_regions_24 => p_ZL9n_regions_24,
        p_ZL9n_regions_25 => p_ZL9n_regions_25,
        p_ZL9n_regions_26 => p_ZL9n_regions_26,
        p_ZL9n_regions_27 => p_ZL9n_regions_27,
        p_ZL9n_regions_28 => p_ZL9n_regions_28,
        p_ZL9n_regions_29 => p_ZL9n_regions_29,
        p_ZL9n_regions_30 => p_ZL9n_regions_30,
        p_ZL9n_regions_31 => p_ZL9n_regions_31,
        p_ZL9n_regions_32 => p_ZL9n_regions_32,
        p_ZL9n_regions_33 => p_ZL9n_regions_33,
        p_ZL9n_regions_34 => p_ZL9n_regions_34,
        p_ZL9n_regions_35 => p_ZL9n_regions_35,
        p_ZL9n_regions_36 => p_ZL9n_regions_36,
        p_ZL9n_regions_37 => p_ZL9n_regions_37,
        p_ZL9n_regions_38 => p_ZL9n_regions_38,
        p_ZL9n_regions_39 => p_ZL9n_regions_39,
        p_ZL9n_regions_40 => p_ZL9n_regions_40,
        p_ZL9n_regions_41 => p_ZL9n_regions_41,
        p_ZL9n_regions_42 => p_ZL9n_regions_42,
        p_ZL9n_regions_43 => p_ZL9n_regions_43,
        p_ZL9n_regions_44 => p_ZL9n_regions_44,
        p_ZL9n_regions_45 => p_ZL9n_regions_45,
        p_ZL9n_regions_46 => p_ZL9n_regions_46,
        p_ZL9n_regions_47 => p_ZL9n_regions_47,
        p_ZL9n_regions_48 => p_ZL9n_regions_48,
        p_ZL9n_regions_49 => p_ZL9n_regions_49,
        p_ZL9n_regions_50 => p_ZL9n_regions_50,
        p_ZL9n_regions_51 => p_ZL9n_regions_51,
        p_ZL9n_regions_52 => p_ZL9n_regions_52,
        p_ZL9n_regions_53 => p_ZL9n_regions_53,
        p_ZL9n_regions_54 => p_ZL9n_regions_54,
        p_ZL9n_regions_55 => p_ZL9n_regions_55,
        p_ZL9n_regions_56 => p_ZL9n_regions_56,
        p_ZL9n_regions_57 => p_ZL9n_regions_57,
        p_ZL9n_regions_58 => p_ZL9n_regions_58,
        p_ZL9n_regions_59 => p_ZL9n_regions_59,
        p_ZL9n_regions_60 => p_ZL9n_regions_60,
        p_ZL9n_regions_61 => p_ZL9n_regions_61,
        p_ZL9n_regions_62 => p_ZL9n_regions_62,
        p_ZL9n_regions_63 => p_ZL9n_regions_63,
        regions_address0 => run_test_U0_regions_address0,
        regions_ce0 => run_test_U0_regions_ce0,
        regions_q0 => regions_q0,
        regions_1_address0 => run_test_U0_regions_1_address0,
        regions_1_ce0 => run_test_U0_regions_1_ce0,
        regions_1_q0 => regions_1_q0,
        regions_2_address0 => run_test_U0_regions_2_address0,
        regions_2_ce0 => run_test_U0_regions_2_ce0,
        regions_2_q0 => regions_2_q0,
        regions_3_address0 => run_test_U0_regions_3_address0,
        regions_3_ce0 => run_test_U0_regions_3_ce0,
        regions_3_q0 => regions_3_q0);

    writeOutcome_U0 : component run_writeOutcome
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeOutcome_U0_ap_start,
        ap_done => writeOutcome_U0_ap_done,
        ap_continue => writeOutcome_U0_ap_continue,
        ap_idle => writeOutcome_U0_ap_idle,
        ap_ready => writeOutcome_U0_ap_ready,
        outcomeStream_dout => outcomeStream_dout,
        outcomeStream_num_data_valid => outcomeStream_num_data_valid,
        outcomeStream_fifo_cap => outcomeStream_fifo_cap,
        outcomeStream_empty_n => outcomeStream_empty_n,
        outcomeStream_read => writeOutcome_U0_outcomeStream_read);

    copyDest_U : component run_fifo_w320_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_data_U0_copyDest_din,
        if_full_n => copyDest_full_n,
        if_write => read_data_U0_copyDest_write,
        if_dout => copyDest_dout,
        if_num_data_valid => copyDest_num_data_valid,
        if_fifo_cap => copyDest_fifo_cap,
        if_empty_n => copyDest_empty_n,
        if_read => run_test_U0_copyDest_read);

    outcomeStream_U : component run_fifo_w288_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_test_U0_outcomeStream_din,
        if_full_n => outcomeStream_full_n,
        if_write => run_test_U0_outcomeStream_write,
        if_dout => outcomeStream_dout,
        if_num_data_valid => outcomeStream_num_data_valid,
        if_fifo_cap => outcomeStream_fifo_cap,
        if_empty_n => outcomeStream_empty_n,
        if_read => writeOutcome_U0_outcomeStream_read);





    ap_sync_reg_run_test_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_run_test_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_run_test_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_writeOutcome_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_writeOutcome_U0_ap_start <= ap_const_logic_0;
            else
                if ((ap_start = ap_const_logic_1)) then 
                    ap_sync_reg_writeOutcome_U0_ap_start <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (writeOutcome_U0_ap_idle and run_test_U0_ap_idle and read_data_U0_ap_idle);
    ap_ready <= read_data_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (writeOutcome_U0_ap_done and read_data_U0_ap_done);
    copying <= read_data_U0_copying;
    copying_ap_vld <= read_data_U0_copying_ap_vld;
    m_axi_gmem_ARADDR <= read_data_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= read_data_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= read_data_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= read_data_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= read_data_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= read_data_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= read_data_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= read_data_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= read_data_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= read_data_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= read_data_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= read_data_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= read_data_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    read_data_U0_ap_continue <= ap_sync_continue;
    read_data_U0_ap_start <= ap_start;
    regions_1_address0 <= run_test_U0_regions_1_address0;
    regions_1_address1 <= ap_const_lv12_0;
    regions_1_ce0 <= run_test_U0_regions_1_ce0;
    regions_1_ce1 <= ap_const_logic_0;
    regions_1_d0 <= ap_const_lv32_0;
    regions_1_d1 <= ap_const_lv32_0;
    regions_1_we0 <= ap_const_logic_0;
    regions_1_we1 <= ap_const_logic_0;
    regions_2_address0 <= run_test_U0_regions_2_address0;
    regions_2_address1 <= ap_const_lv12_0;
    regions_2_ce0 <= run_test_U0_regions_2_ce0;
    regions_2_ce1 <= ap_const_logic_0;
    regions_2_d0 <= ap_const_lv32_0;
    regions_2_d1 <= ap_const_lv32_0;
    regions_2_we0 <= ap_const_logic_0;
    regions_2_we1 <= ap_const_logic_0;
    regions_3_address0 <= run_test_U0_regions_3_address0;
    regions_3_address1 <= ap_const_lv12_0;
    regions_3_ce0 <= run_test_U0_regions_3_ce0;
    regions_3_ce1 <= ap_const_logic_0;
    regions_3_d0 <= ap_const_lv32_0;
    regions_3_d1 <= ap_const_lv32_0;
    regions_3_we0 <= ap_const_logic_0;
    regions_3_we1 <= ap_const_logic_0;
    regions_address0 <= run_test_U0_regions_address0;
    regions_address1 <= ap_const_lv12_0;
    regions_ce0 <= run_test_U0_regions_ce0;
    regions_ce1 <= ap_const_logic_0;
    regions_d0 <= ap_const_lv32_0;
    regions_d1 <= ap_const_lv32_0;
    regions_we0 <= ap_const_logic_0;
    regions_we1 <= ap_const_logic_0;
    run_test_U0_ap_continue <= ap_const_logic_1;
    run_test_U0_ap_start <= (ap_sync_reg_run_test_U0_ap_start or ap_start);
    startCopy_ap_ack <= read_data_U0_startCopy_ap_ack;
    writeOutcome_U0_ap_continue <= ap_sync_continue;
    writeOutcome_U0_ap_start <= (ap_sync_reg_writeOutcome_U0_ap_start or ap_start);
end behav;
