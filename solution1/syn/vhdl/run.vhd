-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run is
generic (
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_local_block : OUT STD_LOGIC;
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    control_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    toScheduler_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    control_TVALID : IN STD_LOGIC;
    control_TREADY : OUT STD_LOGIC;
    toScheduler_TVALID : OUT STD_LOGIC;
    toScheduler_TREADY : IN STD_LOGIC );
end;


architecture behav of run is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "run_run,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=5122,HLS_SYN_LUT=5500,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal trainedRegions : STD_LOGIC_VECTOR (63 downto 0);
    signal realTaskId : STD_LOGIC_VECTOR (63 downto 0);
    signal n_regions_in : STD_LOGIC_VECTOR (63 downto 0);
    signal sharedMem : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_ap_start : STD_LOGIC;
    signal read_test_U0_ap_done : STD_LOGIC;
    signal read_test_U0_ap_continue : STD_LOGIC;
    signal read_test_U0_ap_idle : STD_LOGIC;
    signal read_test_U0_ap_ready : STD_LOGIC;
    signal read_test_U0_control_TREADY : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_test_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal read_test_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_test_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal read_test_U0_data_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_0_ce0 : STD_LOGIC;
    signal read_test_U0_data_0_we0 : STD_LOGIC;
    signal read_test_U0_data_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_1_ce0 : STD_LOGIC;
    signal read_test_U0_data_1_we0 : STD_LOGIC;
    signal read_test_U0_data_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_2_ce0 : STD_LOGIC;
    signal read_test_U0_data_2_we0 : STD_LOGIC;
    signal read_test_U0_data_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_3_ce0 : STD_LOGIC;
    signal read_test_U0_data_3_we0 : STD_LOGIC;
    signal read_test_U0_data_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_4_ce0 : STD_LOGIC;
    signal read_test_U0_data_4_we0 : STD_LOGIC;
    signal read_test_U0_data_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_5_ce0 : STD_LOGIC;
    signal read_test_U0_data_5_we0 : STD_LOGIC;
    signal read_test_U0_data_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_6_ce0 : STD_LOGIC;
    signal read_test_U0_data_6_we0 : STD_LOGIC;
    signal read_test_U0_data_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_7_ce0 : STD_LOGIC;
    signal read_test_U0_data_7_we0 : STD_LOGIC;
    signal read_test_U0_data_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal read_test_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_contr_taskId_V_channel : STD_LOGIC;
    signal contr_taskId_V_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_contr_taskId_V_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_contr_taskId_V_channel : STD_LOGIC;
    signal ap_channel_done_contr_taskId_V : STD_LOGIC;
    signal contr_taskId_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_contr_taskId_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_contr_taskId_V : STD_LOGIC;
    signal ap_channel_done_data_7 : STD_LOGIC;
    signal read_test_U0_data_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_7 : STD_LOGIC;
    signal ap_channel_done_data_6 : STD_LOGIC;
    signal read_test_U0_data_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_6 : STD_LOGIC;
    signal ap_channel_done_data_5 : STD_LOGIC;
    signal read_test_U0_data_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_5 : STD_LOGIC;
    signal ap_channel_done_data_4 : STD_LOGIC;
    signal read_test_U0_data_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_4 : STD_LOGIC;
    signal ap_channel_done_data_3 : STD_LOGIC;
    signal read_test_U0_data_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_3 : STD_LOGIC;
    signal ap_channel_done_data_2 : STD_LOGIC;
    signal read_test_U0_data_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_2 : STD_LOGIC;
    signal ap_channel_done_data_1 : STD_LOGIC;
    signal read_test_U0_data_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_1 : STD_LOGIC;
    signal ap_channel_done_data_0 : STD_LOGIC;
    signal read_test_U0_data_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_0 : STD_LOGIC;
    signal run_test_U0_ap_start : STD_LOGIC;
    signal run_test_U0_ap_done : STD_LOGIC;
    signal run_test_U0_ap_continue : STD_LOGIC;
    signal run_test_U0_ap_idle : STD_LOGIC;
    signal run_test_U0_ap_ready : STD_LOGIC;
    signal run_test_U0_data_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_0_ce0 : STD_LOGIC;
    signal run_test_U0_data_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_1_ce0 : STD_LOGIC;
    signal run_test_U0_data_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_2_ce0 : STD_LOGIC;
    signal run_test_U0_data_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_3_ce0 : STD_LOGIC;
    signal run_test_U0_data_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_4_ce0 : STD_LOGIC;
    signal run_test_U0_data_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_5_ce0 : STD_LOGIC;
    signal run_test_U0_data_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_6_ce0 : STD_LOGIC;
    signal run_test_U0_data_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_7_ce0 : STD_LOGIC;
    signal run_test_U0_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal error_full_n : STD_LOGIC;
    signal writeOutcome_U0_ap_start : STD_LOGIC;
    signal writeOutcome_U0_ap_done : STD_LOGIC;
    signal writeOutcome_U0_ap_continue : STD_LOGIC;
    signal writeOutcome_U0_ap_idle : STD_LOGIC;
    signal writeOutcome_U0_ap_ready : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal writeOutcome_U0_toScheduler_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal writeOutcome_U0_toScheduler_TVALID : STD_LOGIC;
    signal data_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_0_i_full_n : STD_LOGIC;
    signal data_0_t_empty_n : STD_LOGIC;
    signal data_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_i_full_n : STD_LOGIC;
    signal data_1_t_empty_n : STD_LOGIC;
    signal data_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_i_full_n : STD_LOGIC;
    signal data_2_t_empty_n : STD_LOGIC;
    signal data_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_i_full_n : STD_LOGIC;
    signal data_3_t_empty_n : STD_LOGIC;
    signal data_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_i_full_n : STD_LOGIC;
    signal data_4_t_empty_n : STD_LOGIC;
    signal data_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_i_full_n : STD_LOGIC;
    signal data_5_t_empty_n : STD_LOGIC;
    signal data_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_i_full_n : STD_LOGIC;
    signal data_6_t_empty_n : STD_LOGIC;
    signal data_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_i_full_n : STD_LOGIC;
    signal data_7_t_empty_n : STD_LOGIC;
    signal contr_taskId_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal contr_taskId_V_empty_n : STD_LOGIC;
    signal contr_taskId_V_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal contr_taskId_V_channel_empty_n : STD_LOGIC;
    signal error_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal error_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_read_test_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_test_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_writeOutcome_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_writeOutcome_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_read_test IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        control_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        control_TVALID : IN STD_LOGIC;
        control_TREADY : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputDataInRam : IN STD_LOGIC_VECTOR (63 downto 0);
        data_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_we0 : OUT STD_LOGIC;
        data_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_1_ce0 : OUT STD_LOGIC;
        data_1_we0 : OUT STD_LOGIC;
        data_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_2_ce0 : OUT STD_LOGIC;
        data_2_we0 : OUT STD_LOGIC;
        data_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_3_ce0 : OUT STD_LOGIC;
        data_3_we0 : OUT STD_LOGIC;
        data_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_4_ce0 : OUT STD_LOGIC;
        data_4_we0 : OUT STD_LOGIC;
        data_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_5_ce0 : OUT STD_LOGIC;
        data_5_we0 : OUT STD_LOGIC;
        data_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_6_ce0 : OUT STD_LOGIC;
        data_6_we0 : OUT STD_LOGIC;
        data_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_7_ce0 : OUT STD_LOGIC;
        data_7_we0 : OUT STD_LOGIC;
        data_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component run_run_test IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_1_ce0 : OUT STD_LOGIC;
        data_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_2_ce0 : OUT STD_LOGIC;
        data_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_3_ce0 : OUT STD_LOGIC;
        data_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_4_ce0 : OUT STD_LOGIC;
        data_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_5_ce0 : OUT STD_LOGIC;
        data_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_6_ce0 : OUT STD_LOGIC;
        data_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_7_ce0 : OUT STD_LOGIC;
        data_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_writeOutcome IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        toScheduler_TREADY : IN STD_LOGIC;
        sharedMem : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (0 downto 0);
        toScheduler_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        toScheduler_TVALID : OUT STD_LOGIC );
    end component;


    component run_data_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component run_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w16_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        trainedRegions : OUT STD_LOGIC_VECTOR (63 downto 0);
        realTaskId : OUT STD_LOGIC_VECTOR (63 downto 0);
        n_regions_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        sharedMem : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_r_s_axi_U : component run_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        trainedRegions => trainedRegions,
        realTaskId => realTaskId,
        n_regions_in => n_regions_in,
        sharedMem => sharedMem,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    gmem_m_axi_U : component run_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_test_U0_m_axi_gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => read_test_U0_m_axi_gmem_ARADDR,
        I_ARID => read_test_U0_m_axi_gmem_ARID,
        I_ARLEN => read_test_U0_m_axi_gmem_ARLEN,
        I_ARSIZE => read_test_U0_m_axi_gmem_ARSIZE,
        I_ARLOCK => read_test_U0_m_axi_gmem_ARLOCK,
        I_ARCACHE => read_test_U0_m_axi_gmem_ARCACHE,
        I_ARQOS => read_test_U0_m_axi_gmem_ARQOS,
        I_ARPROT => read_test_U0_m_axi_gmem_ARPROT,
        I_ARUSER => read_test_U0_m_axi_gmem_ARUSER,
        I_ARBURST => read_test_U0_m_axi_gmem_ARBURST,
        I_ARREGION => read_test_U0_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => read_test_U0_m_axi_gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => writeOutcome_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => writeOutcome_U0_m_axi_gmem_AWADDR,
        I_AWID => writeOutcome_U0_m_axi_gmem_AWID,
        I_AWLEN => writeOutcome_U0_m_axi_gmem_AWLEN,
        I_AWSIZE => writeOutcome_U0_m_axi_gmem_AWSIZE,
        I_AWLOCK => writeOutcome_U0_m_axi_gmem_AWLOCK,
        I_AWCACHE => writeOutcome_U0_m_axi_gmem_AWCACHE,
        I_AWQOS => writeOutcome_U0_m_axi_gmem_AWQOS,
        I_AWPROT => writeOutcome_U0_m_axi_gmem_AWPROT,
        I_AWUSER => writeOutcome_U0_m_axi_gmem_AWUSER,
        I_AWBURST => writeOutcome_U0_m_axi_gmem_AWBURST,
        I_AWREGION => writeOutcome_U0_m_axi_gmem_AWREGION,
        I_WVALID => writeOutcome_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => writeOutcome_U0_m_axi_gmem_WDATA,
        I_WID => writeOutcome_U0_m_axi_gmem_WID,
        I_WUSER => writeOutcome_U0_m_axi_gmem_WUSER,
        I_WLAST => writeOutcome_U0_m_axi_gmem_WLAST,
        I_WSTRB => writeOutcome_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => writeOutcome_U0_m_axi_gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    read_test_U0 : component run_read_test
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_test_U0_ap_start,
        ap_done => read_test_U0_ap_done,
        ap_continue => read_test_U0_ap_continue,
        ap_idle => read_test_U0_ap_idle,
        ap_ready => read_test_U0_ap_ready,
        control_TDATA => control_TDATA,
        control_TVALID => control_TVALID,
        control_TREADY => read_test_U0_control_TREADY,
        m_axi_gmem_AWVALID => read_test_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => read_test_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => read_test_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => read_test_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => read_test_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => read_test_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => read_test_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => read_test_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => read_test_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => read_test_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => read_test_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => read_test_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => read_test_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => read_test_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => read_test_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => read_test_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => read_test_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => read_test_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => read_test_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => read_test_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => read_test_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => read_test_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => read_test_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => read_test_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => read_test_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => read_test_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => read_test_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => read_test_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => read_test_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => read_test_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => read_test_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RFIFONUM => gmem_RFIFONUM,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => read_test_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        inputDataInRam => sharedMem,
        data_0_address0 => read_test_U0_data_0_address0,
        data_0_ce0 => read_test_U0_data_0_ce0,
        data_0_we0 => read_test_U0_data_0_we0,
        data_0_d0 => read_test_U0_data_0_d0,
        data_1_address0 => read_test_U0_data_1_address0,
        data_1_ce0 => read_test_U0_data_1_ce0,
        data_1_we0 => read_test_U0_data_1_we0,
        data_1_d0 => read_test_U0_data_1_d0,
        data_2_address0 => read_test_U0_data_2_address0,
        data_2_ce0 => read_test_U0_data_2_ce0,
        data_2_we0 => read_test_U0_data_2_we0,
        data_2_d0 => read_test_U0_data_2_d0,
        data_3_address0 => read_test_U0_data_3_address0,
        data_3_ce0 => read_test_U0_data_3_ce0,
        data_3_we0 => read_test_U0_data_3_we0,
        data_3_d0 => read_test_U0_data_3_d0,
        data_4_address0 => read_test_U0_data_4_address0,
        data_4_ce0 => read_test_U0_data_4_ce0,
        data_4_we0 => read_test_U0_data_4_we0,
        data_4_d0 => read_test_U0_data_4_d0,
        data_5_address0 => read_test_U0_data_5_address0,
        data_5_ce0 => read_test_U0_data_5_ce0,
        data_5_we0 => read_test_U0_data_5_we0,
        data_5_d0 => read_test_U0_data_5_d0,
        data_6_address0 => read_test_U0_data_6_address0,
        data_6_ce0 => read_test_U0_data_6_ce0,
        data_6_we0 => read_test_U0_data_6_we0,
        data_6_d0 => read_test_U0_data_6_d0,
        data_7_address0 => read_test_U0_data_7_address0,
        data_7_ce0 => read_test_U0_data_7_ce0,
        data_7_we0 => read_test_U0_data_7_we0,
        data_7_d0 => read_test_U0_data_7_d0,
        ap_return_0 => read_test_U0_ap_return_0,
        ap_return_1 => read_test_U0_ap_return_1);

    run_test_U0 : component run_run_test
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => run_test_U0_ap_start,
        ap_done => run_test_U0_ap_done,
        ap_continue => run_test_U0_ap_continue,
        ap_idle => run_test_U0_ap_idle,
        ap_ready => run_test_U0_ap_ready,
        p_read1 => contr_taskId_V_dout,
        data_0_address0 => run_test_U0_data_0_address0,
        data_0_ce0 => run_test_U0_data_0_ce0,
        data_0_q0 => data_0_t_q0,
        data_1_address0 => run_test_U0_data_1_address0,
        data_1_ce0 => run_test_U0_data_1_ce0,
        data_1_q0 => data_1_t_q0,
        data_2_address0 => run_test_U0_data_2_address0,
        data_2_ce0 => run_test_U0_data_2_ce0,
        data_2_q0 => data_2_t_q0,
        data_3_address0 => run_test_U0_data_3_address0,
        data_3_ce0 => run_test_U0_data_3_ce0,
        data_3_q0 => data_3_t_q0,
        data_4_address0 => run_test_U0_data_4_address0,
        data_4_ce0 => run_test_U0_data_4_ce0,
        data_4_q0 => data_4_t_q0,
        data_5_address0 => run_test_U0_data_5_address0,
        data_5_ce0 => run_test_U0_data_5_ce0,
        data_5_q0 => data_5_t_q0,
        data_6_address0 => run_test_U0_data_6_address0,
        data_6_ce0 => run_test_U0_data_6_ce0,
        data_6_q0 => data_6_t_q0,
        data_7_address0 => run_test_U0_data_7_address0,
        data_7_ce0 => run_test_U0_data_7_ce0,
        data_7_q0 => data_7_t_q0,
        ap_return => run_test_U0_ap_return);

    writeOutcome_U0 : component run_writeOutcome
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => writeOutcome_U0_ap_start,
        ap_done => writeOutcome_U0_ap_done,
        ap_continue => writeOutcome_U0_ap_continue,
        ap_idle => writeOutcome_U0_ap_idle,
        ap_ready => writeOutcome_U0_ap_ready,
        m_axi_gmem_AWVALID => writeOutcome_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => writeOutcome_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => writeOutcome_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => writeOutcome_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => writeOutcome_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => writeOutcome_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => writeOutcome_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => writeOutcome_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => writeOutcome_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => writeOutcome_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => writeOutcome_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => writeOutcome_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => writeOutcome_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => writeOutcome_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => writeOutcome_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => writeOutcome_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => writeOutcome_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => writeOutcome_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => writeOutcome_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => writeOutcome_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => writeOutcome_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => writeOutcome_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => writeOutcome_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => writeOutcome_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => writeOutcome_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => writeOutcome_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => writeOutcome_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => writeOutcome_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => writeOutcome_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => writeOutcome_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => writeOutcome_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => writeOutcome_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        toScheduler_TREADY => toScheduler_TREADY,
        sharedMem => sharedMem,
        p_read => contr_taskId_V_channel_dout,
        p_read1 => error_dout,
        toScheduler_TDATA => writeOutcome_U0_toScheduler_TDATA,
        toScheduler_TVALID => writeOutcome_U0_toScheduler_TVALID);

    data_0_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_0_address0,
        i_ce0 => read_test_U0_data_0_ce0,
        i_we0 => read_test_U0_data_0_we0,
        i_d0 => read_test_U0_data_0_d0,
        i_q0 => data_0_i_q0,
        t_address0 => run_test_U0_data_0_address0,
        t_ce0 => run_test_U0_data_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_0_i_full_n,
        i_write => ap_channel_done_data_0,
        t_empty_n => data_0_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_1_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_1_address0,
        i_ce0 => read_test_U0_data_1_ce0,
        i_we0 => read_test_U0_data_1_we0,
        i_d0 => read_test_U0_data_1_d0,
        i_q0 => data_1_i_q0,
        t_address0 => run_test_U0_data_1_address0,
        t_ce0 => run_test_U0_data_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_1_i_full_n,
        i_write => ap_channel_done_data_1,
        t_empty_n => data_1_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_2_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_2_address0,
        i_ce0 => read_test_U0_data_2_ce0,
        i_we0 => read_test_U0_data_2_we0,
        i_d0 => read_test_U0_data_2_d0,
        i_q0 => data_2_i_q0,
        t_address0 => run_test_U0_data_2_address0,
        t_ce0 => run_test_U0_data_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_2_i_full_n,
        i_write => ap_channel_done_data_2,
        t_empty_n => data_2_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_3_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_3_address0,
        i_ce0 => read_test_U0_data_3_ce0,
        i_we0 => read_test_U0_data_3_we0,
        i_d0 => read_test_U0_data_3_d0,
        i_q0 => data_3_i_q0,
        t_address0 => run_test_U0_data_3_address0,
        t_ce0 => run_test_U0_data_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_3_i_full_n,
        i_write => ap_channel_done_data_3,
        t_empty_n => data_3_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_4_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_4_address0,
        i_ce0 => read_test_U0_data_4_ce0,
        i_we0 => read_test_U0_data_4_we0,
        i_d0 => read_test_U0_data_4_d0,
        i_q0 => data_4_i_q0,
        t_address0 => run_test_U0_data_4_address0,
        t_ce0 => run_test_U0_data_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_4_i_full_n,
        i_write => ap_channel_done_data_4,
        t_empty_n => data_4_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_5_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_5_address0,
        i_ce0 => read_test_U0_data_5_ce0,
        i_we0 => read_test_U0_data_5_we0,
        i_d0 => read_test_U0_data_5_d0,
        i_q0 => data_5_i_q0,
        t_address0 => run_test_U0_data_5_address0,
        t_ce0 => run_test_U0_data_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_5_i_full_n,
        i_write => ap_channel_done_data_5,
        t_empty_n => data_5_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_6_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_6_address0,
        i_ce0 => read_test_U0_data_6_ce0,
        i_we0 => read_test_U0_data_6_we0,
        i_d0 => read_test_U0_data_6_d0,
        i_q0 => data_6_i_q0,
        t_address0 => run_test_U0_data_6_address0,
        t_ce0 => run_test_U0_data_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_6_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_6_i_full_n,
        i_write => ap_channel_done_data_6,
        t_empty_n => data_6_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_7_U : component run_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => read_test_U0_data_7_address0,
        i_ce0 => read_test_U0_data_7_ce0,
        i_we0 => read_test_U0_data_7_we0,
        i_d0 => read_test_U0_data_7_d0,
        i_q0 => data_7_i_q0,
        t_address0 => run_test_U0_data_7_address0,
        t_ce0 => run_test_U0_data_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_7_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_7_i_full_n,
        i_write => ap_channel_done_data_7,
        t_empty_n => data_7_t_empty_n,
        t_read => run_test_U0_ap_ready);

    contr_taskId_V_U : component run_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_test_U0_ap_return_0,
        if_full_n => contr_taskId_V_full_n,
        if_write => ap_channel_done_contr_taskId_V,
        if_dout => contr_taskId_V_dout,
        if_empty_n => contr_taskId_V_empty_n,
        if_read => run_test_U0_ap_ready);

    contr_taskId_V_channel_U : component run_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_test_U0_ap_return_1,
        if_full_n => contr_taskId_V_channel_full_n,
        if_write => ap_channel_done_contr_taskId_V_channel,
        if_dout => contr_taskId_V_channel_dout,
        if_empty_n => contr_taskId_V_channel_empty_n,
        if_read => writeOutcome_U0_ap_ready);

    error_U : component run_fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_test_U0_ap_return,
        if_full_n => error_full_n,
        if_write => run_test_U0_ap_done,
        if_dout => error_dout,
        if_empty_n => error_empty_n,
        if_read => writeOutcome_U0_ap_ready);





    ap_sync_reg_channel_write_contr_taskId_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_contr_taskId_V <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_contr_taskId_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_contr_taskId_V <= ap_sync_channel_write_contr_taskId_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_contr_taskId_V_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_contr_taskId_V_channel <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_contr_taskId_V_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_contr_taskId_V_channel <= ap_sync_channel_write_contr_taskId_V_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_0 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_0 <= ap_sync_channel_write_data_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_1 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_1 <= ap_sync_channel_write_data_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_2 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_2 <= ap_sync_channel_write_data_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_3 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_3 <= ap_sync_channel_write_data_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_4 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_4 <= ap_sync_channel_write_data_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_5 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_5 <= ap_sync_channel_write_data_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_6 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_6 <= ap_sync_channel_write_data_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_data_7 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_7 <= ap_sync_channel_write_data_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_test_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_test_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_test_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_test_U0_ap_ready <= ap_sync_read_test_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_writeOutcome_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_writeOutcome_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_writeOutcome_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_writeOutcome_U0_ap_ready <= ap_sync_writeOutcome_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    ap_channel_done_contr_taskId_V <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_contr_taskId_V xor ap_const_logic_1));
    ap_channel_done_contr_taskId_V_channel <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_contr_taskId_V_channel xor ap_const_logic_1));
    ap_channel_done_data_0 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_0 xor ap_const_logic_1));
    ap_channel_done_data_1 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_1 xor ap_const_logic_1));
    ap_channel_done_data_2 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_2 xor ap_const_logic_1));
    ap_channel_done_data_3 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_3 xor ap_const_logic_1));
    ap_channel_done_data_4 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_4 xor ap_const_logic_1));
    ap_channel_done_data_5 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_5 xor ap_const_logic_1));
    ap_channel_done_data_6 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_6 xor ap_const_logic_1));
    ap_channel_done_data_7 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_7 xor ap_const_logic_1));
    ap_done <= writeOutcome_U0_ap_done;
    ap_idle <= (writeOutcome_U0_ap_idle and run_test_U0_ap_idle and read_test_U0_ap_idle and (error_empty_n xor ap_const_logic_1) and (contr_taskId_V_channel_empty_n xor ap_const_logic_1) and (contr_taskId_V_empty_n xor ap_const_logic_1) and (data_7_t_empty_n xor ap_const_logic_1) and (data_6_t_empty_n xor ap_const_logic_1) and (data_5_t_empty_n xor ap_const_logic_1) and (data_4_t_empty_n xor ap_const_logic_1) and (data_3_t_empty_n xor ap_const_logic_1) and (data_2_t_empty_n xor ap_const_logic_1) and (data_1_t_empty_n xor ap_const_logic_1) and (data_0_t_empty_n xor ap_const_logic_1));
    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_contr_taskId_V <= ((contr_taskId_V_full_n and ap_channel_done_contr_taskId_V) or ap_sync_reg_channel_write_contr_taskId_V);
    ap_sync_channel_write_contr_taskId_V_channel <= ((contr_taskId_V_channel_full_n and ap_channel_done_contr_taskId_V_channel) or ap_sync_reg_channel_write_contr_taskId_V_channel);
    ap_sync_channel_write_data_0 <= ((read_test_U0_data_0_full_n and ap_channel_done_data_0) or ap_sync_reg_channel_write_data_0);
    ap_sync_channel_write_data_1 <= ((read_test_U0_data_1_full_n and ap_channel_done_data_1) or ap_sync_reg_channel_write_data_1);
    ap_sync_channel_write_data_2 <= ((read_test_U0_data_2_full_n and ap_channel_done_data_2) or ap_sync_reg_channel_write_data_2);
    ap_sync_channel_write_data_3 <= ((read_test_U0_data_3_full_n and ap_channel_done_data_3) or ap_sync_reg_channel_write_data_3);
    ap_sync_channel_write_data_4 <= ((read_test_U0_data_4_full_n and ap_channel_done_data_4) or ap_sync_reg_channel_write_data_4);
    ap_sync_channel_write_data_5 <= ((read_test_U0_data_5_full_n and ap_channel_done_data_5) or ap_sync_reg_channel_write_data_5);
    ap_sync_channel_write_data_6 <= ((read_test_U0_data_6_full_n and ap_channel_done_data_6) or ap_sync_reg_channel_write_data_6);
    ap_sync_channel_write_data_7 <= ((read_test_U0_data_7_full_n and ap_channel_done_data_7) or ap_sync_reg_channel_write_data_7);
    ap_sync_read_test_U0_ap_ready <= (read_test_U0_ap_ready or ap_sync_reg_read_test_U0_ap_ready);
    ap_sync_ready <= (ap_sync_writeOutcome_U0_ap_ready and ap_sync_read_test_U0_ap_ready);
    ap_sync_writeOutcome_U0_ap_ready <= (writeOutcome_U0_ap_ready or ap_sync_reg_writeOutcome_U0_ap_ready);
    control_TREADY <= read_test_U0_control_TREADY;
    read_test_U0_ap_continue <= (ap_sync_channel_write_data_7 and ap_sync_channel_write_data_6 and ap_sync_channel_write_data_5 and ap_sync_channel_write_data_4 and ap_sync_channel_write_data_3 and ap_sync_channel_write_data_2 and ap_sync_channel_write_data_1 and ap_sync_channel_write_data_0 and ap_sync_channel_write_contr_taskId_V_channel and ap_sync_channel_write_contr_taskId_V);
    read_test_U0_ap_start <= ((ap_sync_reg_read_test_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_test_U0_data_0_full_n <= data_0_i_full_n;
    read_test_U0_data_1_full_n <= data_1_i_full_n;
    read_test_U0_data_2_full_n <= data_2_i_full_n;
    read_test_U0_data_3_full_n <= data_3_i_full_n;
    read_test_U0_data_4_full_n <= data_4_i_full_n;
    read_test_U0_data_5_full_n <= data_5_i_full_n;
    read_test_U0_data_6_full_n <= data_6_i_full_n;
    read_test_U0_data_7_full_n <= data_7_i_full_n;
    run_test_U0_ap_continue <= error_full_n;
    run_test_U0_ap_start <= (data_7_t_empty_n and data_6_t_empty_n and data_5_t_empty_n and data_4_t_empty_n and data_3_t_empty_n and data_2_t_empty_n and data_1_t_empty_n and data_0_t_empty_n and contr_taskId_V_empty_n);
    toScheduler_TDATA <= writeOutcome_U0_toScheduler_TDATA;
    toScheduler_TVALID <= writeOutcome_U0_toScheduler_TVALID;
    writeOutcome_U0_ap_continue <= ap_continue;
    writeOutcome_U0_ap_start <= ((ap_sync_reg_writeOutcome_U0_ap_ready xor ap_const_logic_1) and error_empty_n and contr_taskId_V_channel_empty_n and ap_start);
end behav;
