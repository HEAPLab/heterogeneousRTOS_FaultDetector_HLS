-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_runAfterInit is
port (
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputDataInRam : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    outcomeInRam : IN STD_LOGIC_VECTOR (63 downto 0);
    toScheduler_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    outcomeInRam_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    inputDataInRam_ap_vld : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    toScheduler_TVALID : OUT STD_LOGIC;
    toScheduler_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of run_runAfterInit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_outcomeInRam_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_outcomeInRam_c_write : STD_LOGIC;
    signal read_test_U0_ap_start : STD_LOGIC;
    signal read_test_U0_ap_done : STD_LOGIC;
    signal read_test_U0_ap_continue : STD_LOGIC;
    signal read_test_U0_ap_idle : STD_LOGIC;
    signal read_test_U0_ap_ready : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_test_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_test_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_test_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_test_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_test_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_test_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal read_test_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal read_test_U0_data_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_0_ce0 : STD_LOGIC;
    signal read_test_U0_data_0_we0 : STD_LOGIC;
    signal read_test_U0_data_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_1_ce0 : STD_LOGIC;
    signal read_test_U0_data_1_we0 : STD_LOGIC;
    signal read_test_U0_data_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_2_ce0 : STD_LOGIC;
    signal read_test_U0_data_2_we0 : STD_LOGIC;
    signal read_test_U0_data_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_3_ce0 : STD_LOGIC;
    signal read_test_U0_data_3_we0 : STD_LOGIC;
    signal read_test_U0_data_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_4_ce0 : STD_LOGIC;
    signal read_test_U0_data_4_we0 : STD_LOGIC;
    signal read_test_U0_data_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_5_ce0 : STD_LOGIC;
    signal read_test_U0_data_5_we0 : STD_LOGIC;
    signal read_test_U0_data_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_6_ce0 : STD_LOGIC;
    signal read_test_U0_data_6_we0 : STD_LOGIC;
    signal read_test_U0_data_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_data_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_test_U0_data_7_ce0 : STD_LOGIC;
    signal read_test_U0_data_7_we0 : STD_LOGIC;
    signal read_test_U0_data_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_test_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_contr_taskId_c11_channel : STD_LOGIC;
    signal contr_taskId_c11_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_contr_taskId_c11_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_contr_taskId_c11_channel : STD_LOGIC;
    signal ap_channel_done_data_7 : STD_LOGIC;
    signal read_test_U0_data_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_7 : STD_LOGIC;
    signal ap_channel_done_data_6 : STD_LOGIC;
    signal read_test_U0_data_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_6 : STD_LOGIC;
    signal ap_channel_done_data_5 : STD_LOGIC;
    signal read_test_U0_data_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_5 : STD_LOGIC;
    signal ap_channel_done_data_4 : STD_LOGIC;
    signal read_test_U0_data_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_4 : STD_LOGIC;
    signal ap_channel_done_data_3 : STD_LOGIC;
    signal read_test_U0_data_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_3 : STD_LOGIC;
    signal ap_channel_done_data_2 : STD_LOGIC;
    signal read_test_U0_data_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_2 : STD_LOGIC;
    signal ap_channel_done_data_1 : STD_LOGIC;
    signal read_test_U0_data_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_1 : STD_LOGIC;
    signal ap_channel_done_data_0 : STD_LOGIC;
    signal read_test_U0_data_0_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_data_0 : STD_LOGIC := '0';
    signal ap_sync_channel_write_data_0 : STD_LOGIC;
    signal run_test_U0_ap_start : STD_LOGIC;
    signal run_test_U0_ap_done : STD_LOGIC;
    signal run_test_U0_ap_continue : STD_LOGIC;
    signal run_test_U0_ap_idle : STD_LOGIC;
    signal run_test_U0_ap_ready : STD_LOGIC;
    signal run_test_U0_contr_taskId_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal run_test_U0_contr_taskId_c_write : STD_LOGIC;
    signal run_test_U0_data_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_0_ce0 : STD_LOGIC;
    signal run_test_U0_data_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_1_ce0 : STD_LOGIC;
    signal run_test_U0_data_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_2_ce0 : STD_LOGIC;
    signal run_test_U0_data_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_3_ce0 : STD_LOGIC;
    signal run_test_U0_data_4_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_4_ce0 : STD_LOGIC;
    signal run_test_U0_data_5_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_5_ce0 : STD_LOGIC;
    signal run_test_U0_data_6_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_6_ce0 : STD_LOGIC;
    signal run_test_U0_data_7_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal run_test_U0_data_7_ce0 : STD_LOGIC;
    signal run_test_U0_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal error_full_n : STD_LOGIC;
    signal writeOutcome_U0_ap_start : STD_LOGIC;
    signal writeOutcome_U0_ap_done : STD_LOGIC;
    signal writeOutcome_U0_ap_continue : STD_LOGIC;
    signal writeOutcome_U0_ap_idle : STD_LOGIC;
    signal writeOutcome_U0_ap_ready : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal writeOutcome_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal writeOutcome_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal writeOutcome_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal writeOutcome_U0_outcomeInRam_read : STD_LOGIC;
    signal writeOutcome_U0_contr_taskId_read : STD_LOGIC;
    signal writeOutcome_U0_toScheduler_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal writeOutcome_U0_toScheduler_TVALID : STD_LOGIC;
    signal data_0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_0_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_0_i_full_n : STD_LOGIC;
    signal data_0_t_empty_n : STD_LOGIC;
    signal data_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_i_full_n : STD_LOGIC;
    signal data_1_t_empty_n : STD_LOGIC;
    signal data_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_i_full_n : STD_LOGIC;
    signal data_2_t_empty_n : STD_LOGIC;
    signal data_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_i_full_n : STD_LOGIC;
    signal data_3_t_empty_n : STD_LOGIC;
    signal data_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_4_i_full_n : STD_LOGIC;
    signal data_4_t_empty_n : STD_LOGIC;
    signal data_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_5_i_full_n : STD_LOGIC;
    signal data_5_t_empty_n : STD_LOGIC;
    signal data_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_6_i_full_n : STD_LOGIC;
    signal data_6_t_empty_n : STD_LOGIC;
    signal data_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_7_i_full_n : STD_LOGIC;
    signal data_7_t_empty_n : STD_LOGIC;
    signal outcomeInRam_c_full_n : STD_LOGIC;
    signal outcomeInRam_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal outcomeInRam_c_empty_n : STD_LOGIC;
    signal contr_taskId_c11_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal contr_taskId_c11_channel_empty_n : STD_LOGIC;
    signal contr_taskId_c_full_n : STD_LOGIC;
    signal contr_taskId_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal contr_taskId_c_empty_n : STD_LOGIC;
    signal error_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal error_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_test_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_test_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component run_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outcomeInRam : IN STD_LOGIC_VECTOR (63 downto 0);
        outcomeInRam_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outcomeInRam_c_full_n : IN STD_LOGIC;
        outcomeInRam_c_write : OUT STD_LOGIC );
    end component;


    component run_read_test IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputDataInRam : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_we0 : OUT STD_LOGIC;
        data_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_1_ce0 : OUT STD_LOGIC;
        data_1_we0 : OUT STD_LOGIC;
        data_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_2_ce0 : OUT STD_LOGIC;
        data_2_we0 : OUT STD_LOGIC;
        data_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_3_ce0 : OUT STD_LOGIC;
        data_3_we0 : OUT STD_LOGIC;
        data_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_4_ce0 : OUT STD_LOGIC;
        data_4_we0 : OUT STD_LOGIC;
        data_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_5_ce0 : OUT STD_LOGIC;
        data_5_we0 : OUT STD_LOGIC;
        data_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_6_ce0 : OUT STD_LOGIC;
        data_6_we0 : OUT STD_LOGIC;
        data_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_7_ce0 : OUT STD_LOGIC;
        data_7_we0 : OUT STD_LOGIC;
        data_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component run_run_test IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        contr_taskId_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        contr_taskId_c_full_n : IN STD_LOGIC;
        contr_taskId_c_write : OUT STD_LOGIC;
        data_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_0_ce0 : OUT STD_LOGIC;
        data_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_1_ce0 : OUT STD_LOGIC;
        data_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_2_ce0 : OUT STD_LOGIC;
        data_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_3_ce0 : OUT STD_LOGIC;
        data_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_4_ce0 : OUT STD_LOGIC;
        data_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_5_ce0 : OUT STD_LOGIC;
        data_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_6_ce0 : OUT STD_LOGIC;
        data_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_7_ce0 : OUT STD_LOGIC;
        data_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_writeOutcome IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        toScheduler_TREADY : IN STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outcomeInRam_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outcomeInRam_empty_n : IN STD_LOGIC;
        outcomeInRam_read : OUT STD_LOGIC;
        contr_taskId_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        contr_taskId_empty_n : IN STD_LOGIC;
        contr_taskId_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (0 downto 0);
        toScheduler_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        toScheduler_TVALID : OUT STD_LOGIC );
    end component;


    component run_runAfterInit_data_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component run_fifo_w64_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w16_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component run_fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component run_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        outcomeInRam => outcomeInRam,
        outcomeInRam_c_din => entry_proc_U0_outcomeInRam_c_din,
        outcomeInRam_c_full_n => outcomeInRam_c_full_n,
        outcomeInRam_c_write => entry_proc_U0_outcomeInRam_c_write);

    read_test_U0 : component run_read_test
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_test_U0_ap_start,
        ap_done => read_test_U0_ap_done,
        ap_continue => read_test_U0_ap_continue,
        ap_idle => read_test_U0_ap_idle,
        ap_ready => read_test_U0_ap_ready,
        m_axi_gmem_AWVALID => read_test_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => read_test_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => read_test_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => read_test_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => read_test_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => read_test_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => read_test_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => read_test_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => read_test_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => read_test_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => read_test_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => read_test_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => read_test_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => read_test_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => read_test_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => read_test_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => read_test_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => read_test_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => read_test_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => read_test_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => read_test_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => read_test_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => read_test_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => read_test_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => read_test_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => read_test_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => read_test_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => read_test_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => read_test_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => read_test_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => read_test_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => read_test_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        inputDataInRam => inputDataInRam,
        p_read => p_read,
        data_0_address0 => read_test_U0_data_0_address0,
        data_0_ce0 => read_test_U0_data_0_ce0,
        data_0_we0 => read_test_U0_data_0_we0,
        data_0_d0 => read_test_U0_data_0_d0,
        data_1_address0 => read_test_U0_data_1_address0,
        data_1_ce0 => read_test_U0_data_1_ce0,
        data_1_we0 => read_test_U0_data_1_we0,
        data_1_d0 => read_test_U0_data_1_d0,
        data_2_address0 => read_test_U0_data_2_address0,
        data_2_ce0 => read_test_U0_data_2_ce0,
        data_2_we0 => read_test_U0_data_2_we0,
        data_2_d0 => read_test_U0_data_2_d0,
        data_3_address0 => read_test_U0_data_3_address0,
        data_3_ce0 => read_test_U0_data_3_ce0,
        data_3_we0 => read_test_U0_data_3_we0,
        data_3_d0 => read_test_U0_data_3_d0,
        data_4_address0 => read_test_U0_data_4_address0,
        data_4_ce0 => read_test_U0_data_4_ce0,
        data_4_we0 => read_test_U0_data_4_we0,
        data_4_d0 => read_test_U0_data_4_d0,
        data_5_address0 => read_test_U0_data_5_address0,
        data_5_ce0 => read_test_U0_data_5_ce0,
        data_5_we0 => read_test_U0_data_5_we0,
        data_5_d0 => read_test_U0_data_5_d0,
        data_6_address0 => read_test_U0_data_6_address0,
        data_6_ce0 => read_test_U0_data_6_ce0,
        data_6_we0 => read_test_U0_data_6_we0,
        data_6_d0 => read_test_U0_data_6_d0,
        data_7_address0 => read_test_U0_data_7_address0,
        data_7_ce0 => read_test_U0_data_7_ce0,
        data_7_we0 => read_test_U0_data_7_we0,
        data_7_d0 => read_test_U0_data_7_d0,
        ap_return => read_test_U0_ap_return);

    run_test_U0 : component run_run_test
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_test_U0_ap_start,
        ap_done => run_test_U0_ap_done,
        ap_continue => run_test_U0_ap_continue,
        ap_idle => run_test_U0_ap_idle,
        ap_ready => run_test_U0_ap_ready,
        p_read1 => contr_taskId_c11_channel_dout,
        contr_taskId_c_din => run_test_U0_contr_taskId_c_din,
        contr_taskId_c_full_n => contr_taskId_c_full_n,
        contr_taskId_c_write => run_test_U0_contr_taskId_c_write,
        data_0_address0 => run_test_U0_data_0_address0,
        data_0_ce0 => run_test_U0_data_0_ce0,
        data_0_q0 => data_0_t_q0,
        data_1_address0 => run_test_U0_data_1_address0,
        data_1_ce0 => run_test_U0_data_1_ce0,
        data_1_q0 => data_1_t_q0,
        data_2_address0 => run_test_U0_data_2_address0,
        data_2_ce0 => run_test_U0_data_2_ce0,
        data_2_q0 => data_2_t_q0,
        data_3_address0 => run_test_U0_data_3_address0,
        data_3_ce0 => run_test_U0_data_3_ce0,
        data_3_q0 => data_3_t_q0,
        data_4_address0 => run_test_U0_data_4_address0,
        data_4_ce0 => run_test_U0_data_4_ce0,
        data_4_q0 => data_4_t_q0,
        data_5_address0 => run_test_U0_data_5_address0,
        data_5_ce0 => run_test_U0_data_5_ce0,
        data_5_q0 => data_5_t_q0,
        data_6_address0 => run_test_U0_data_6_address0,
        data_6_ce0 => run_test_U0_data_6_ce0,
        data_6_q0 => data_6_t_q0,
        data_7_address0 => run_test_U0_data_7_address0,
        data_7_ce0 => run_test_U0_data_7_ce0,
        data_7_q0 => data_7_t_q0,
        ap_return => run_test_U0_ap_return);

    writeOutcome_U0 : component run_writeOutcome
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeOutcome_U0_ap_start,
        ap_done => writeOutcome_U0_ap_done,
        ap_continue => writeOutcome_U0_ap_continue,
        ap_idle => writeOutcome_U0_ap_idle,
        ap_ready => writeOutcome_U0_ap_ready,
        toScheduler_TREADY => toScheduler_TREADY,
        m_axi_gmem_AWVALID => writeOutcome_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR => writeOutcome_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => writeOutcome_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => writeOutcome_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => writeOutcome_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => writeOutcome_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => writeOutcome_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => writeOutcome_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => writeOutcome_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => writeOutcome_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => writeOutcome_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => writeOutcome_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => writeOutcome_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => m_axi_gmem_WREADY,
        m_axi_gmem_WDATA => writeOutcome_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => writeOutcome_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => writeOutcome_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => writeOutcome_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => writeOutcome_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => writeOutcome_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => writeOutcome_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => writeOutcome_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => writeOutcome_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => writeOutcome_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => writeOutcome_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => writeOutcome_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => writeOutcome_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => writeOutcome_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => writeOutcome_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => writeOutcome_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => writeOutcome_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => writeOutcome_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => m_axi_gmem_BVALID,
        m_axi_gmem_BREADY => writeOutcome_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => m_axi_gmem_BRESP,
        m_axi_gmem_BID => m_axi_gmem_BID,
        m_axi_gmem_BUSER => m_axi_gmem_BUSER,
        outcomeInRam_dout => outcomeInRam_c_dout,
        outcomeInRam_empty_n => outcomeInRam_c_empty_n,
        outcomeInRam_read => writeOutcome_U0_outcomeInRam_read,
        contr_taskId_dout => contr_taskId_c_dout,
        contr_taskId_empty_n => contr_taskId_c_empty_n,
        contr_taskId_read => writeOutcome_U0_contr_taskId_read,
        p_read => error_dout,
        toScheduler_TDATA => writeOutcome_U0_toScheduler_TDATA,
        toScheduler_TVALID => writeOutcome_U0_toScheduler_TVALID);

    data_0_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_0_address0,
        i_ce0 => read_test_U0_data_0_ce0,
        i_we0 => read_test_U0_data_0_we0,
        i_d0 => read_test_U0_data_0_d0,
        i_q0 => data_0_i_q0,
        t_address0 => run_test_U0_data_0_address0,
        t_ce0 => run_test_U0_data_0_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_0_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_0_i_full_n,
        i_write => ap_channel_done_data_0,
        t_empty_n => data_0_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_1_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_1_address0,
        i_ce0 => read_test_U0_data_1_ce0,
        i_we0 => read_test_U0_data_1_we0,
        i_d0 => read_test_U0_data_1_d0,
        i_q0 => data_1_i_q0,
        t_address0 => run_test_U0_data_1_address0,
        t_ce0 => run_test_U0_data_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_1_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_1_i_full_n,
        i_write => ap_channel_done_data_1,
        t_empty_n => data_1_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_2_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_2_address0,
        i_ce0 => read_test_U0_data_2_ce0,
        i_we0 => read_test_U0_data_2_we0,
        i_d0 => read_test_U0_data_2_d0,
        i_q0 => data_2_i_q0,
        t_address0 => run_test_U0_data_2_address0,
        t_ce0 => run_test_U0_data_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_2_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_2_i_full_n,
        i_write => ap_channel_done_data_2,
        t_empty_n => data_2_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_3_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_3_address0,
        i_ce0 => read_test_U0_data_3_ce0,
        i_we0 => read_test_U0_data_3_we0,
        i_d0 => read_test_U0_data_3_d0,
        i_q0 => data_3_i_q0,
        t_address0 => run_test_U0_data_3_address0,
        t_ce0 => run_test_U0_data_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_3_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_3_i_full_n,
        i_write => ap_channel_done_data_3,
        t_empty_n => data_3_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_4_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_4_address0,
        i_ce0 => read_test_U0_data_4_ce0,
        i_we0 => read_test_U0_data_4_we0,
        i_d0 => read_test_U0_data_4_d0,
        i_q0 => data_4_i_q0,
        t_address0 => run_test_U0_data_4_address0,
        t_ce0 => run_test_U0_data_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_4_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_4_i_full_n,
        i_write => ap_channel_done_data_4,
        t_empty_n => data_4_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_5_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_5_address0,
        i_ce0 => read_test_U0_data_5_ce0,
        i_we0 => read_test_U0_data_5_we0,
        i_d0 => read_test_U0_data_5_d0,
        i_q0 => data_5_i_q0,
        t_address0 => run_test_U0_data_5_address0,
        t_ce0 => run_test_U0_data_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_5_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_5_i_full_n,
        i_write => ap_channel_done_data_5,
        t_empty_n => data_5_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_6_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_6_address0,
        i_ce0 => read_test_U0_data_6_ce0,
        i_we0 => read_test_U0_data_6_we0,
        i_d0 => read_test_U0_data_6_d0,
        i_q0 => data_6_i_q0,
        t_address0 => run_test_U0_data_6_address0,
        t_ce0 => run_test_U0_data_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_6_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_6_i_full_n,
        i_write => ap_channel_done_data_6,
        t_empty_n => data_6_t_empty_n,
        t_read => run_test_U0_ap_ready);

    data_7_U : component run_runAfterInit_data_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => read_test_U0_data_7_address0,
        i_ce0 => read_test_U0_data_7_ce0,
        i_we0 => read_test_U0_data_7_we0,
        i_d0 => read_test_U0_data_7_d0,
        i_q0 => data_7_i_q0,
        t_address0 => run_test_U0_data_7_address0,
        t_ce0 => run_test_U0_data_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => data_7_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => data_7_i_full_n,
        i_write => ap_channel_done_data_7,
        t_empty_n => data_7_t_empty_n,
        t_read => run_test_U0_ap_ready);

    outcomeInRam_c_U : component run_fifo_w64_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_outcomeInRam_c_din,
        if_full_n => outcomeInRam_c_full_n,
        if_write => entry_proc_U0_outcomeInRam_c_write,
        if_dout => outcomeInRam_c_dout,
        if_empty_n => outcomeInRam_c_empty_n,
        if_read => writeOutcome_U0_outcomeInRam_read);

    contr_taskId_c11_channel_U : component run_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_test_U0_ap_return,
        if_full_n => contr_taskId_c11_channel_full_n,
        if_write => ap_channel_done_contr_taskId_c11_channel,
        if_dout => contr_taskId_c11_channel_dout,
        if_empty_n => contr_taskId_c11_channel_empty_n,
        if_read => run_test_U0_ap_ready);

    contr_taskId_c_U : component run_fifo_w16_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_test_U0_contr_taskId_c_din,
        if_full_n => contr_taskId_c_full_n,
        if_write => run_test_U0_contr_taskId_c_write,
        if_dout => contr_taskId_c_dout,
        if_empty_n => contr_taskId_c_empty_n,
        if_read => writeOutcome_U0_contr_taskId_read);

    error_U : component run_fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_test_U0_ap_return,
        if_full_n => error_full_n,
        if_write => run_test_U0_ap_done,
        if_dout => error_dout,
        if_empty_n => error_empty_n,
        if_read => writeOutcome_U0_ap_ready);





    ap_sync_reg_channel_write_contr_taskId_c11_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_contr_taskId_c11_channel <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_contr_taskId_c11_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_contr_taskId_c11_channel <= ap_sync_channel_write_contr_taskId_c11_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_0 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_0 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_0 <= ap_sync_channel_write_data_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_1 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_1 <= ap_sync_channel_write_data_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_2 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_2 <= ap_sync_channel_write_data_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_3 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_3 <= ap_sync_channel_write_data_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_4 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_4 <= ap_sync_channel_write_data_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_5 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_5 <= ap_sync_channel_write_data_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_6 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_6 <= ap_sync_channel_write_data_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_data_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_data_7 <= ap_const_logic_0;
            else
                if (((read_test_U0_ap_done and read_test_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_data_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_data_7 <= ap_sync_channel_write_data_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_test_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_test_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_test_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_test_U0_ap_ready <= ap_sync_read_test_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_contr_taskId_c11_channel <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_contr_taskId_c11_channel xor ap_const_logic_1));
    ap_channel_done_data_0 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_0 xor ap_const_logic_1));
    ap_channel_done_data_1 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_1 xor ap_const_logic_1));
    ap_channel_done_data_2 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_2 xor ap_const_logic_1));
    ap_channel_done_data_3 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_3 xor ap_const_logic_1));
    ap_channel_done_data_4 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_4 xor ap_const_logic_1));
    ap_channel_done_data_5 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_5 xor ap_const_logic_1));
    ap_channel_done_data_6 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_6 xor ap_const_logic_1));
    ap_channel_done_data_7 <= (read_test_U0_ap_done and (ap_sync_reg_channel_write_data_7 xor ap_const_logic_1));
    ap_done <= writeOutcome_U0_ap_done;
    ap_idle <= (writeOutcome_U0_ap_idle and run_test_U0_ap_idle and read_test_U0_ap_idle and (error_empty_n xor ap_const_logic_1) and (contr_taskId_c11_channel_empty_n xor ap_const_logic_1) and (data_7_t_empty_n xor ap_const_logic_1) and (data_6_t_empty_n xor ap_const_logic_1) and (data_5_t_empty_n xor ap_const_logic_1) and (data_4_t_empty_n xor ap_const_logic_1) and (data_3_t_empty_n xor ap_const_logic_1) and (data_2_t_empty_n xor ap_const_logic_1) and (data_1_t_empty_n xor ap_const_logic_1) and (data_0_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_channel_write_contr_taskId_c11_channel <= ((contr_taskId_c11_channel_full_n and ap_channel_done_contr_taskId_c11_channel) or ap_sync_reg_channel_write_contr_taskId_c11_channel);
    ap_sync_channel_write_data_0 <= ((read_test_U0_data_0_full_n and ap_channel_done_data_0) or ap_sync_reg_channel_write_data_0);
    ap_sync_channel_write_data_1 <= ((read_test_U0_data_1_full_n and ap_channel_done_data_1) or ap_sync_reg_channel_write_data_1);
    ap_sync_channel_write_data_2 <= ((read_test_U0_data_2_full_n and ap_channel_done_data_2) or ap_sync_reg_channel_write_data_2);
    ap_sync_channel_write_data_3 <= ((read_test_U0_data_3_full_n and ap_channel_done_data_3) or ap_sync_reg_channel_write_data_3);
    ap_sync_channel_write_data_4 <= ((read_test_U0_data_4_full_n and ap_channel_done_data_4) or ap_sync_reg_channel_write_data_4);
    ap_sync_channel_write_data_5 <= ((read_test_U0_data_5_full_n and ap_channel_done_data_5) or ap_sync_reg_channel_write_data_5);
    ap_sync_channel_write_data_6 <= ((read_test_U0_data_6_full_n and ap_channel_done_data_6) or ap_sync_reg_channel_write_data_6);
    ap_sync_channel_write_data_7 <= ((read_test_U0_data_7_full_n and ap_channel_done_data_7) or ap_sync_reg_channel_write_data_7);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_read_test_U0_ap_ready <= (read_test_U0_ap_ready or ap_sync_reg_read_test_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_test_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem_ARADDR <= read_test_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= read_test_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= read_test_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= read_test_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= read_test_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= read_test_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= read_test_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= read_test_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= read_test_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= read_test_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= read_test_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= read_test_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= writeOutcome_U0_m_axi_gmem_AWADDR;
    m_axi_gmem_AWBURST <= writeOutcome_U0_m_axi_gmem_AWBURST;
    m_axi_gmem_AWCACHE <= writeOutcome_U0_m_axi_gmem_AWCACHE;
    m_axi_gmem_AWID <= writeOutcome_U0_m_axi_gmem_AWID;
    m_axi_gmem_AWLEN <= writeOutcome_U0_m_axi_gmem_AWLEN;
    m_axi_gmem_AWLOCK <= writeOutcome_U0_m_axi_gmem_AWLOCK;
    m_axi_gmem_AWPROT <= writeOutcome_U0_m_axi_gmem_AWPROT;
    m_axi_gmem_AWQOS <= writeOutcome_U0_m_axi_gmem_AWQOS;
    m_axi_gmem_AWREGION <= writeOutcome_U0_m_axi_gmem_AWREGION;
    m_axi_gmem_AWSIZE <= writeOutcome_U0_m_axi_gmem_AWSIZE;
    m_axi_gmem_AWUSER <= writeOutcome_U0_m_axi_gmem_AWUSER;
    m_axi_gmem_AWVALID <= writeOutcome_U0_m_axi_gmem_AWVALID;
    m_axi_gmem_BREADY <= writeOutcome_U0_m_axi_gmem_BREADY;
    m_axi_gmem_RREADY <= read_test_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= writeOutcome_U0_m_axi_gmem_WDATA;
    m_axi_gmem_WID <= writeOutcome_U0_m_axi_gmem_WID;
    m_axi_gmem_WLAST <= writeOutcome_U0_m_axi_gmem_WLAST;
    m_axi_gmem_WSTRB <= writeOutcome_U0_m_axi_gmem_WSTRB;
    m_axi_gmem_WUSER <= writeOutcome_U0_m_axi_gmem_WUSER;
    m_axi_gmem_WVALID <= writeOutcome_U0_m_axi_gmem_WVALID;
    read_test_U0_ap_continue <= (ap_sync_channel_write_data_7 and ap_sync_channel_write_data_6 and ap_sync_channel_write_data_5 and ap_sync_channel_write_data_4 and ap_sync_channel_write_data_3 and ap_sync_channel_write_data_2 and ap_sync_channel_write_data_1 and ap_sync_channel_write_data_0 and ap_sync_channel_write_contr_taskId_c11_channel);
    read_test_U0_ap_start <= ((ap_sync_reg_read_test_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_test_U0_data_0_full_n <= data_0_i_full_n;
    read_test_U0_data_1_full_n <= data_1_i_full_n;
    read_test_U0_data_2_full_n <= data_2_i_full_n;
    read_test_U0_data_3_full_n <= data_3_i_full_n;
    read_test_U0_data_4_full_n <= data_4_i_full_n;
    read_test_U0_data_5_full_n <= data_5_i_full_n;
    read_test_U0_data_6_full_n <= data_6_i_full_n;
    read_test_U0_data_7_full_n <= data_7_i_full_n;
    run_test_U0_ap_continue <= error_full_n;
    run_test_U0_ap_start <= (data_7_t_empty_n and data_6_t_empty_n and data_5_t_empty_n and data_4_t_empty_n and data_3_t_empty_n and data_2_t_empty_n and data_1_t_empty_n and data_0_t_empty_n and contr_taskId_c11_channel_empty_n);
    toScheduler_TDATA <= writeOutcome_U0_toScheduler_TDATA;
    toScheduler_TVALID <= writeOutcome_U0_toScheduler_TVALID;
    writeOutcome_U0_ap_continue <= ap_continue;
    writeOutcome_U0_ap_start <= error_empty_n;
end behav;
