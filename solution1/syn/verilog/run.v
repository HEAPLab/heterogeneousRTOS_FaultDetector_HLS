// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="run_run,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.600000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=5122,HLS_SYN_LUT=5500,HLS_VERSION=2021_2}" *)

module run (
        ap_local_block,
        s_axi_control_r_AWVALID,
        s_axi_control_r_AWREADY,
        s_axi_control_r_AWADDR,
        s_axi_control_r_WVALID,
        s_axi_control_r_WREADY,
        s_axi_control_r_WDATA,
        s_axi_control_r_WSTRB,
        s_axi_control_r_ARVALID,
        s_axi_control_r_ARREADY,
        s_axi_control_r_ARADDR,
        s_axi_control_r_RVALID,
        s_axi_control_r_RREADY,
        s_axi_control_r_RDATA,
        s_axi_control_r_RRESP,
        s_axi_control_r_BVALID,
        s_axi_control_r_BREADY,
        s_axi_control_r_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        control_TDATA,
        toScheduler_TDATA,
        control_TVALID,
        control_TREADY,
        toScheduler_TVALID,
        toScheduler_TREADY
);

parameter    C_S_AXI_CONTROL_R_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_R_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 256;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_R_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   s_axi_control_r_AWVALID;
output   s_axi_control_r_AWREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_AWADDR;
input   s_axi_control_r_WVALID;
output   s_axi_control_r_WREADY;
input  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_WDATA;
input  [C_S_AXI_CONTROL_R_WSTRB_WIDTH - 1:0] s_axi_control_r_WSTRB;
input   s_axi_control_r_ARVALID;
output   s_axi_control_r_ARREADY;
input  [C_S_AXI_CONTROL_R_ADDR_WIDTH - 1:0] s_axi_control_r_ARADDR;
output   s_axi_control_r_RVALID;
input   s_axi_control_r_RREADY;
output  [C_S_AXI_CONTROL_R_DATA_WIDTH - 1:0] s_axi_control_r_RDATA;
output  [1:0] s_axi_control_r_RRESP;
output   s_axi_control_r_BVALID;
input   s_axi_control_r_BREADY;
output  [1:0] s_axi_control_r_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [31:0] control_TDATA;
output  [7:0] toScheduler_TDATA;
input   control_TVALID;
output   control_TREADY;
output   toScheduler_TVALID;
input   toScheduler_TREADY;

wire   [0:0] ap_local_deadlock;
(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire   [63:0] trainedRegions;
wire   [63:0] realTaskId;
wire   [63:0] n_regions_in;
wire   [63:0] sharedMem;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_continue;
wire    ap_idle;
wire    gmem_AWREADY;
wire    gmem_WREADY;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [255:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [8:0] gmem_RFIFONUM;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
wire    read_test_U0_ap_start;
wire    read_test_U0_ap_done;
wire    read_test_U0_ap_continue;
wire    read_test_U0_ap_idle;
wire    read_test_U0_ap_ready;
wire    read_test_U0_control_TREADY;
wire    read_test_U0_m_axi_gmem_AWVALID;
wire   [63:0] read_test_U0_m_axi_gmem_AWADDR;
wire   [0:0] read_test_U0_m_axi_gmem_AWID;
wire   [31:0] read_test_U0_m_axi_gmem_AWLEN;
wire   [2:0] read_test_U0_m_axi_gmem_AWSIZE;
wire   [1:0] read_test_U0_m_axi_gmem_AWBURST;
wire   [1:0] read_test_U0_m_axi_gmem_AWLOCK;
wire   [3:0] read_test_U0_m_axi_gmem_AWCACHE;
wire   [2:0] read_test_U0_m_axi_gmem_AWPROT;
wire   [3:0] read_test_U0_m_axi_gmem_AWQOS;
wire   [3:0] read_test_U0_m_axi_gmem_AWREGION;
wire   [0:0] read_test_U0_m_axi_gmem_AWUSER;
wire    read_test_U0_m_axi_gmem_WVALID;
wire   [255:0] read_test_U0_m_axi_gmem_WDATA;
wire   [31:0] read_test_U0_m_axi_gmem_WSTRB;
wire    read_test_U0_m_axi_gmem_WLAST;
wire   [0:0] read_test_U0_m_axi_gmem_WID;
wire   [0:0] read_test_U0_m_axi_gmem_WUSER;
wire    read_test_U0_m_axi_gmem_ARVALID;
wire   [63:0] read_test_U0_m_axi_gmem_ARADDR;
wire   [0:0] read_test_U0_m_axi_gmem_ARID;
wire   [31:0] read_test_U0_m_axi_gmem_ARLEN;
wire   [2:0] read_test_U0_m_axi_gmem_ARSIZE;
wire   [1:0] read_test_U0_m_axi_gmem_ARBURST;
wire   [1:0] read_test_U0_m_axi_gmem_ARLOCK;
wire   [3:0] read_test_U0_m_axi_gmem_ARCACHE;
wire   [2:0] read_test_U0_m_axi_gmem_ARPROT;
wire   [3:0] read_test_U0_m_axi_gmem_ARQOS;
wire   [3:0] read_test_U0_m_axi_gmem_ARREGION;
wire   [0:0] read_test_U0_m_axi_gmem_ARUSER;
wire    read_test_U0_m_axi_gmem_RREADY;
wire    read_test_U0_m_axi_gmem_BREADY;
wire   [6:0] read_test_U0_data_0_address0;
wire    read_test_U0_data_0_ce0;
wire    read_test_U0_data_0_we0;
wire   [31:0] read_test_U0_data_0_d0;
wire   [6:0] read_test_U0_data_1_address0;
wire    read_test_U0_data_1_ce0;
wire    read_test_U0_data_1_we0;
wire   [31:0] read_test_U0_data_1_d0;
wire   [6:0] read_test_U0_data_2_address0;
wire    read_test_U0_data_2_ce0;
wire    read_test_U0_data_2_we0;
wire   [31:0] read_test_U0_data_2_d0;
wire   [6:0] read_test_U0_data_3_address0;
wire    read_test_U0_data_3_ce0;
wire    read_test_U0_data_3_we0;
wire   [31:0] read_test_U0_data_3_d0;
wire   [6:0] read_test_U0_data_4_address0;
wire    read_test_U0_data_4_ce0;
wire    read_test_U0_data_4_we0;
wire   [31:0] read_test_U0_data_4_d0;
wire   [6:0] read_test_U0_data_5_address0;
wire    read_test_U0_data_5_ce0;
wire    read_test_U0_data_5_we0;
wire   [31:0] read_test_U0_data_5_d0;
wire   [6:0] read_test_U0_data_6_address0;
wire    read_test_U0_data_6_ce0;
wire    read_test_U0_data_6_we0;
wire   [31:0] read_test_U0_data_6_d0;
wire   [6:0] read_test_U0_data_7_address0;
wire    read_test_U0_data_7_ce0;
wire    read_test_U0_data_7_we0;
wire   [31:0] read_test_U0_data_7_d0;
wire   [15:0] read_test_U0_ap_return_0;
wire   [15:0] read_test_U0_ap_return_1;
wire    ap_channel_done_contr_taskId_V_channel;
wire    contr_taskId_V_channel_full_n;
reg    ap_sync_reg_channel_write_contr_taskId_V_channel;
wire    ap_sync_channel_write_contr_taskId_V_channel;
wire    ap_channel_done_contr_taskId_V;
wire    contr_taskId_V_full_n;
reg    ap_sync_reg_channel_write_contr_taskId_V;
wire    ap_sync_channel_write_contr_taskId_V;
wire    ap_channel_done_data_7;
wire    read_test_U0_data_7_full_n;
reg    ap_sync_reg_channel_write_data_7;
wire    ap_sync_channel_write_data_7;
wire    ap_channel_done_data_6;
wire    read_test_U0_data_6_full_n;
reg    ap_sync_reg_channel_write_data_6;
wire    ap_sync_channel_write_data_6;
wire    ap_channel_done_data_5;
wire    read_test_U0_data_5_full_n;
reg    ap_sync_reg_channel_write_data_5;
wire    ap_sync_channel_write_data_5;
wire    ap_channel_done_data_4;
wire    read_test_U0_data_4_full_n;
reg    ap_sync_reg_channel_write_data_4;
wire    ap_sync_channel_write_data_4;
wire    ap_channel_done_data_3;
wire    read_test_U0_data_3_full_n;
reg    ap_sync_reg_channel_write_data_3;
wire    ap_sync_channel_write_data_3;
wire    ap_channel_done_data_2;
wire    read_test_U0_data_2_full_n;
reg    ap_sync_reg_channel_write_data_2;
wire    ap_sync_channel_write_data_2;
wire    ap_channel_done_data_1;
wire    read_test_U0_data_1_full_n;
reg    ap_sync_reg_channel_write_data_1;
wire    ap_sync_channel_write_data_1;
wire    ap_channel_done_data_0;
wire    read_test_U0_data_0_full_n;
reg    ap_sync_reg_channel_write_data_0;
wire    ap_sync_channel_write_data_0;
wire    run_test_U0_ap_start;
wire    run_test_U0_ap_done;
wire    run_test_U0_ap_continue;
wire    run_test_U0_ap_idle;
wire    run_test_U0_ap_ready;
wire   [6:0] run_test_U0_data_0_address0;
wire    run_test_U0_data_0_ce0;
wire   [6:0] run_test_U0_data_1_address0;
wire    run_test_U0_data_1_ce0;
wire   [6:0] run_test_U0_data_2_address0;
wire    run_test_U0_data_2_ce0;
wire   [6:0] run_test_U0_data_3_address0;
wire    run_test_U0_data_3_ce0;
wire   [6:0] run_test_U0_data_4_address0;
wire    run_test_U0_data_4_ce0;
wire   [6:0] run_test_U0_data_5_address0;
wire    run_test_U0_data_5_ce0;
wire   [6:0] run_test_U0_data_6_address0;
wire    run_test_U0_data_6_ce0;
wire   [6:0] run_test_U0_data_7_address0;
wire    run_test_U0_data_7_ce0;
wire   [0:0] run_test_U0_ap_return;
wire    error_full_n;
wire    writeOutcome_U0_ap_start;
wire    writeOutcome_U0_ap_done;
wire    writeOutcome_U0_ap_continue;
wire    writeOutcome_U0_ap_idle;
wire    writeOutcome_U0_ap_ready;
wire    writeOutcome_U0_m_axi_gmem_AWVALID;
wire   [63:0] writeOutcome_U0_m_axi_gmem_AWADDR;
wire   [0:0] writeOutcome_U0_m_axi_gmem_AWID;
wire   [31:0] writeOutcome_U0_m_axi_gmem_AWLEN;
wire   [2:0] writeOutcome_U0_m_axi_gmem_AWSIZE;
wire   [1:0] writeOutcome_U0_m_axi_gmem_AWBURST;
wire   [1:0] writeOutcome_U0_m_axi_gmem_AWLOCK;
wire   [3:0] writeOutcome_U0_m_axi_gmem_AWCACHE;
wire   [2:0] writeOutcome_U0_m_axi_gmem_AWPROT;
wire   [3:0] writeOutcome_U0_m_axi_gmem_AWQOS;
wire   [3:0] writeOutcome_U0_m_axi_gmem_AWREGION;
wire   [0:0] writeOutcome_U0_m_axi_gmem_AWUSER;
wire    writeOutcome_U0_m_axi_gmem_WVALID;
wire   [255:0] writeOutcome_U0_m_axi_gmem_WDATA;
wire   [31:0] writeOutcome_U0_m_axi_gmem_WSTRB;
wire    writeOutcome_U0_m_axi_gmem_WLAST;
wire   [0:0] writeOutcome_U0_m_axi_gmem_WID;
wire   [0:0] writeOutcome_U0_m_axi_gmem_WUSER;
wire    writeOutcome_U0_m_axi_gmem_ARVALID;
wire   [63:0] writeOutcome_U0_m_axi_gmem_ARADDR;
wire   [0:0] writeOutcome_U0_m_axi_gmem_ARID;
wire   [31:0] writeOutcome_U0_m_axi_gmem_ARLEN;
wire   [2:0] writeOutcome_U0_m_axi_gmem_ARSIZE;
wire   [1:0] writeOutcome_U0_m_axi_gmem_ARBURST;
wire   [1:0] writeOutcome_U0_m_axi_gmem_ARLOCK;
wire   [3:0] writeOutcome_U0_m_axi_gmem_ARCACHE;
wire   [2:0] writeOutcome_U0_m_axi_gmem_ARPROT;
wire   [3:0] writeOutcome_U0_m_axi_gmem_ARQOS;
wire   [3:0] writeOutcome_U0_m_axi_gmem_ARREGION;
wire   [0:0] writeOutcome_U0_m_axi_gmem_ARUSER;
wire    writeOutcome_U0_m_axi_gmem_RREADY;
wire    writeOutcome_U0_m_axi_gmem_BREADY;
wire   [7:0] writeOutcome_U0_toScheduler_TDATA;
wire    writeOutcome_U0_toScheduler_TVALID;
wire   [31:0] data_0_i_q0;
wire   [31:0] data_0_t_q0;
wire    data_0_i_full_n;
wire    data_0_t_empty_n;
wire   [31:0] data_1_i_q0;
wire   [31:0] data_1_t_q0;
wire    data_1_i_full_n;
wire    data_1_t_empty_n;
wire   [31:0] data_2_i_q0;
wire   [31:0] data_2_t_q0;
wire    data_2_i_full_n;
wire    data_2_t_empty_n;
wire   [31:0] data_3_i_q0;
wire   [31:0] data_3_t_q0;
wire    data_3_i_full_n;
wire    data_3_t_empty_n;
wire   [31:0] data_4_i_q0;
wire   [31:0] data_4_t_q0;
wire    data_4_i_full_n;
wire    data_4_t_empty_n;
wire   [31:0] data_5_i_q0;
wire   [31:0] data_5_t_q0;
wire    data_5_i_full_n;
wire    data_5_t_empty_n;
wire   [31:0] data_6_i_q0;
wire   [31:0] data_6_t_q0;
wire    data_6_i_full_n;
wire    data_6_t_empty_n;
wire   [31:0] data_7_i_q0;
wire   [31:0] data_7_t_q0;
wire    data_7_i_full_n;
wire    data_7_t_empty_n;
wire   [15:0] contr_taskId_V_dout;
wire    contr_taskId_V_empty_n;
wire   [15:0] contr_taskId_V_channel_dout;
wire    contr_taskId_V_channel_empty_n;
wire   [0:0] error_dout;
wire    error_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_read_test_U0_ap_ready;
wire    ap_sync_read_test_U0_ap_ready;
reg    ap_sync_reg_writeOutcome_U0_ap_ready;
wire    ap_sync_writeOutcome_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_sync_reg_channel_write_contr_taskId_V_channel = 1'b0;
#0 ap_sync_reg_channel_write_contr_taskId_V = 1'b0;
#0 ap_sync_reg_channel_write_data_7 = 1'b0;
#0 ap_sync_reg_channel_write_data_6 = 1'b0;
#0 ap_sync_reg_channel_write_data_5 = 1'b0;
#0 ap_sync_reg_channel_write_data_4 = 1'b0;
#0 ap_sync_reg_channel_write_data_3 = 1'b0;
#0 ap_sync_reg_channel_write_data_2 = 1'b0;
#0 ap_sync_reg_channel_write_data_1 = 1'b0;
#0 ap_sync_reg_channel_write_data_0 = 1'b0;
#0 ap_sync_reg_read_test_U0_ap_ready = 1'b0;
#0 ap_sync_reg_writeOutcome_U0_ap_ready = 1'b0;
end

run_control_r_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_R_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_R_DATA_WIDTH ))
control_r_s_axi_U(
    .AWVALID(s_axi_control_r_AWVALID),
    .AWREADY(s_axi_control_r_AWREADY),
    .AWADDR(s_axi_control_r_AWADDR),
    .WVALID(s_axi_control_r_WVALID),
    .WREADY(s_axi_control_r_WREADY),
    .WDATA(s_axi_control_r_WDATA),
    .WSTRB(s_axi_control_r_WSTRB),
    .ARVALID(s_axi_control_r_ARVALID),
    .ARREADY(s_axi_control_r_ARREADY),
    .ARADDR(s_axi_control_r_ARADDR),
    .RVALID(s_axi_control_r_RVALID),
    .RREADY(s_axi_control_r_RREADY),
    .RDATA(s_axi_control_r_RDATA),
    .RRESP(s_axi_control_r_RRESP),
    .BVALID(s_axi_control_r_BVALID),
    .BREADY(s_axi_control_r_BREADY),
    .BRESP(s_axi_control_r_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .trainedRegions(trainedRegions),
    .realTaskId(realTaskId),
    .n_regions_in(n_regions_in),
    .sharedMem(sharedMem),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

run_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(read_test_U0_m_axi_gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(read_test_U0_m_axi_gmem_ARADDR),
    .I_ARID(read_test_U0_m_axi_gmem_ARID),
    .I_ARLEN(read_test_U0_m_axi_gmem_ARLEN),
    .I_ARSIZE(read_test_U0_m_axi_gmem_ARSIZE),
    .I_ARLOCK(read_test_U0_m_axi_gmem_ARLOCK),
    .I_ARCACHE(read_test_U0_m_axi_gmem_ARCACHE),
    .I_ARQOS(read_test_U0_m_axi_gmem_ARQOS),
    .I_ARPROT(read_test_U0_m_axi_gmem_ARPROT),
    .I_ARUSER(read_test_U0_m_axi_gmem_ARUSER),
    .I_ARBURST(read_test_U0_m_axi_gmem_ARBURST),
    .I_ARREGION(read_test_U0_m_axi_gmem_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(read_test_U0_m_axi_gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RFIFONUM(gmem_RFIFONUM),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(writeOutcome_U0_m_axi_gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(writeOutcome_U0_m_axi_gmem_AWADDR),
    .I_AWID(writeOutcome_U0_m_axi_gmem_AWID),
    .I_AWLEN(writeOutcome_U0_m_axi_gmem_AWLEN),
    .I_AWSIZE(writeOutcome_U0_m_axi_gmem_AWSIZE),
    .I_AWLOCK(writeOutcome_U0_m_axi_gmem_AWLOCK),
    .I_AWCACHE(writeOutcome_U0_m_axi_gmem_AWCACHE),
    .I_AWQOS(writeOutcome_U0_m_axi_gmem_AWQOS),
    .I_AWPROT(writeOutcome_U0_m_axi_gmem_AWPROT),
    .I_AWUSER(writeOutcome_U0_m_axi_gmem_AWUSER),
    .I_AWBURST(writeOutcome_U0_m_axi_gmem_AWBURST),
    .I_AWREGION(writeOutcome_U0_m_axi_gmem_AWREGION),
    .I_WVALID(writeOutcome_U0_m_axi_gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(writeOutcome_U0_m_axi_gmem_WDATA),
    .I_WID(writeOutcome_U0_m_axi_gmem_WID),
    .I_WUSER(writeOutcome_U0_m_axi_gmem_WUSER),
    .I_WLAST(writeOutcome_U0_m_axi_gmem_WLAST),
    .I_WSTRB(writeOutcome_U0_m_axi_gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(writeOutcome_U0_m_axi_gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

run_read_test read_test_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(read_test_U0_ap_start),
    .ap_done(read_test_U0_ap_done),
    .ap_continue(read_test_U0_ap_continue),
    .ap_idle(read_test_U0_ap_idle),
    .ap_ready(read_test_U0_ap_ready),
    .control_TDATA(control_TDATA),
    .control_TVALID(control_TVALID),
    .control_TREADY(read_test_U0_control_TREADY),
    .m_axi_gmem_AWVALID(read_test_U0_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(read_test_U0_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(read_test_U0_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(read_test_U0_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(read_test_U0_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(read_test_U0_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(read_test_U0_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(read_test_U0_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(read_test_U0_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(read_test_U0_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(read_test_U0_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(read_test_U0_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(read_test_U0_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(read_test_U0_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(read_test_U0_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(read_test_U0_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(read_test_U0_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(read_test_U0_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(read_test_U0_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(gmem_ARREADY),
    .m_axi_gmem_ARADDR(read_test_U0_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(read_test_U0_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(read_test_U0_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(read_test_U0_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(read_test_U0_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(read_test_U0_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(read_test_U0_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(read_test_U0_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(read_test_U0_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(read_test_U0_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(read_test_U0_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(gmem_RVALID),
    .m_axi_gmem_RREADY(read_test_U0_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(gmem_RDATA),
    .m_axi_gmem_RLAST(gmem_RLAST),
    .m_axi_gmem_RID(gmem_RID),
    .m_axi_gmem_RFIFONUM(gmem_RFIFONUM),
    .m_axi_gmem_RUSER(gmem_RUSER),
    .m_axi_gmem_RRESP(gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(read_test_U0_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .inputDataInRam(sharedMem),
    .data_0_address0(read_test_U0_data_0_address0),
    .data_0_ce0(read_test_U0_data_0_ce0),
    .data_0_we0(read_test_U0_data_0_we0),
    .data_0_d0(read_test_U0_data_0_d0),
    .data_1_address0(read_test_U0_data_1_address0),
    .data_1_ce0(read_test_U0_data_1_ce0),
    .data_1_we0(read_test_U0_data_1_we0),
    .data_1_d0(read_test_U0_data_1_d0),
    .data_2_address0(read_test_U0_data_2_address0),
    .data_2_ce0(read_test_U0_data_2_ce0),
    .data_2_we0(read_test_U0_data_2_we0),
    .data_2_d0(read_test_U0_data_2_d0),
    .data_3_address0(read_test_U0_data_3_address0),
    .data_3_ce0(read_test_U0_data_3_ce0),
    .data_3_we0(read_test_U0_data_3_we0),
    .data_3_d0(read_test_U0_data_3_d0),
    .data_4_address0(read_test_U0_data_4_address0),
    .data_4_ce0(read_test_U0_data_4_ce0),
    .data_4_we0(read_test_U0_data_4_we0),
    .data_4_d0(read_test_U0_data_4_d0),
    .data_5_address0(read_test_U0_data_5_address0),
    .data_5_ce0(read_test_U0_data_5_ce0),
    .data_5_we0(read_test_U0_data_5_we0),
    .data_5_d0(read_test_U0_data_5_d0),
    .data_6_address0(read_test_U0_data_6_address0),
    .data_6_ce0(read_test_U0_data_6_ce0),
    .data_6_we0(read_test_U0_data_6_we0),
    .data_6_d0(read_test_U0_data_6_d0),
    .data_7_address0(read_test_U0_data_7_address0),
    .data_7_ce0(read_test_U0_data_7_ce0),
    .data_7_we0(read_test_U0_data_7_we0),
    .data_7_d0(read_test_U0_data_7_d0),
    .ap_return_0(read_test_U0_ap_return_0),
    .ap_return_1(read_test_U0_ap_return_1)
);

run_run_test run_test_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(run_test_U0_ap_start),
    .ap_done(run_test_U0_ap_done),
    .ap_continue(run_test_U0_ap_continue),
    .ap_idle(run_test_U0_ap_idle),
    .ap_ready(run_test_U0_ap_ready),
    .p_read1(contr_taskId_V_dout),
    .data_0_address0(run_test_U0_data_0_address0),
    .data_0_ce0(run_test_U0_data_0_ce0),
    .data_0_q0(data_0_t_q0),
    .data_1_address0(run_test_U0_data_1_address0),
    .data_1_ce0(run_test_U0_data_1_ce0),
    .data_1_q0(data_1_t_q0),
    .data_2_address0(run_test_U0_data_2_address0),
    .data_2_ce0(run_test_U0_data_2_ce0),
    .data_2_q0(data_2_t_q0),
    .data_3_address0(run_test_U0_data_3_address0),
    .data_3_ce0(run_test_U0_data_3_ce0),
    .data_3_q0(data_3_t_q0),
    .data_4_address0(run_test_U0_data_4_address0),
    .data_4_ce0(run_test_U0_data_4_ce0),
    .data_4_q0(data_4_t_q0),
    .data_5_address0(run_test_U0_data_5_address0),
    .data_5_ce0(run_test_U0_data_5_ce0),
    .data_5_q0(data_5_t_q0),
    .data_6_address0(run_test_U0_data_6_address0),
    .data_6_ce0(run_test_U0_data_6_ce0),
    .data_6_q0(data_6_t_q0),
    .data_7_address0(run_test_U0_data_7_address0),
    .data_7_ce0(run_test_U0_data_7_ce0),
    .data_7_q0(data_7_t_q0),
    .ap_return(run_test_U0_ap_return)
);

run_writeOutcome writeOutcome_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(writeOutcome_U0_ap_start),
    .ap_done(writeOutcome_U0_ap_done),
    .ap_continue(writeOutcome_U0_ap_continue),
    .ap_idle(writeOutcome_U0_ap_idle),
    .ap_ready(writeOutcome_U0_ap_ready),
    .m_axi_gmem_AWVALID(writeOutcome_U0_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(gmem_AWREADY),
    .m_axi_gmem_AWADDR(writeOutcome_U0_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(writeOutcome_U0_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(writeOutcome_U0_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(writeOutcome_U0_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(writeOutcome_U0_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(writeOutcome_U0_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(writeOutcome_U0_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(writeOutcome_U0_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(writeOutcome_U0_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(writeOutcome_U0_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(writeOutcome_U0_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(writeOutcome_U0_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(gmem_WREADY),
    .m_axi_gmem_WDATA(writeOutcome_U0_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(writeOutcome_U0_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(writeOutcome_U0_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(writeOutcome_U0_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(writeOutcome_U0_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(writeOutcome_U0_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(writeOutcome_U0_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(writeOutcome_U0_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(writeOutcome_U0_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(writeOutcome_U0_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(writeOutcome_U0_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(writeOutcome_U0_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(writeOutcome_U0_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(writeOutcome_U0_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(writeOutcome_U0_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(writeOutcome_U0_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(writeOutcome_U0_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(writeOutcome_U0_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(256'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RFIFONUM(9'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(gmem_BVALID),
    .m_axi_gmem_BREADY(writeOutcome_U0_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(gmem_BRESP),
    .m_axi_gmem_BID(gmem_BID),
    .m_axi_gmem_BUSER(gmem_BUSER),
    .toScheduler_TREADY(toScheduler_TREADY),
    .sharedMem(sharedMem),
    .p_read(contr_taskId_V_channel_dout),
    .p_read1(error_dout),
    .toScheduler_TDATA(writeOutcome_U0_toScheduler_TDATA),
    .toScheduler_TVALID(writeOutcome_U0_toScheduler_TVALID)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_0_address0),
    .i_ce0(read_test_U0_data_0_ce0),
    .i_we0(read_test_U0_data_0_we0),
    .i_d0(read_test_U0_data_0_d0),
    .i_q0(data_0_i_q0),
    .t_address0(run_test_U0_data_0_address0),
    .t_ce0(run_test_U0_data_0_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_0_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_0_i_full_n),
    .i_write(ap_channel_done_data_0),
    .t_empty_n(data_0_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_1_address0),
    .i_ce0(read_test_U0_data_1_ce0),
    .i_we0(read_test_U0_data_1_we0),
    .i_d0(read_test_U0_data_1_d0),
    .i_q0(data_1_i_q0),
    .t_address0(run_test_U0_data_1_address0),
    .t_ce0(run_test_U0_data_1_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_1_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_1_i_full_n),
    .i_write(ap_channel_done_data_1),
    .t_empty_n(data_1_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_2_address0),
    .i_ce0(read_test_U0_data_2_ce0),
    .i_we0(read_test_U0_data_2_we0),
    .i_d0(read_test_U0_data_2_d0),
    .i_q0(data_2_i_q0),
    .t_address0(run_test_U0_data_2_address0),
    .t_ce0(run_test_U0_data_2_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_2_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_2_i_full_n),
    .i_write(ap_channel_done_data_2),
    .t_empty_n(data_2_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_3_address0),
    .i_ce0(read_test_U0_data_3_ce0),
    .i_we0(read_test_U0_data_3_we0),
    .i_d0(read_test_U0_data_3_d0),
    .i_q0(data_3_i_q0),
    .t_address0(run_test_U0_data_3_address0),
    .t_ce0(run_test_U0_data_3_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_3_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_3_i_full_n),
    .i_write(ap_channel_done_data_3),
    .t_empty_n(data_3_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_4_address0),
    .i_ce0(read_test_U0_data_4_ce0),
    .i_we0(read_test_U0_data_4_we0),
    .i_d0(read_test_U0_data_4_d0),
    .i_q0(data_4_i_q0),
    .t_address0(run_test_U0_data_4_address0),
    .t_ce0(run_test_U0_data_4_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_4_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_4_i_full_n),
    .i_write(ap_channel_done_data_4),
    .t_empty_n(data_4_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_5_address0),
    .i_ce0(read_test_U0_data_5_ce0),
    .i_we0(read_test_U0_data_5_we0),
    .i_d0(read_test_U0_data_5_d0),
    .i_q0(data_5_i_q0),
    .t_address0(run_test_U0_data_5_address0),
    .t_ce0(run_test_U0_data_5_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_5_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_5_i_full_n),
    .i_write(ap_channel_done_data_5),
    .t_empty_n(data_5_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_6_address0),
    .i_ce0(read_test_U0_data_6_ce0),
    .i_we0(read_test_U0_data_6_we0),
    .i_d0(read_test_U0_data_6_d0),
    .i_q0(data_6_i_q0),
    .t_address0(run_test_U0_data_6_address0),
    .t_ce0(run_test_U0_data_6_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_6_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_6_i_full_n),
    .i_write(ap_channel_done_data_6),
    .t_empty_n(data_6_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_data_0_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_test_U0_data_7_address0),
    .i_ce0(read_test_U0_data_7_ce0),
    .i_we0(read_test_U0_data_7_we0),
    .i_d0(read_test_U0_data_7_d0),
    .i_q0(data_7_i_q0),
    .t_address0(run_test_U0_data_7_address0),
    .t_ce0(run_test_U0_data_7_ce0),
    .t_we0(1'b0),
    .t_d0(32'd0),
    .t_q0(data_7_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(data_7_i_full_n),
    .i_write(ap_channel_done_data_7),
    .t_empty_n(data_7_t_empty_n),
    .t_read(run_test_U0_ap_ready)
);

run_fifo_w16_d2_S contr_taskId_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_test_U0_ap_return_0),
    .if_full_n(contr_taskId_V_full_n),
    .if_write(ap_channel_done_contr_taskId_V),
    .if_dout(contr_taskId_V_dout),
    .if_empty_n(contr_taskId_V_empty_n),
    .if_read(run_test_U0_ap_ready)
);

run_fifo_w16_d3_S contr_taskId_V_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_test_U0_ap_return_1),
    .if_full_n(contr_taskId_V_channel_full_n),
    .if_write(ap_channel_done_contr_taskId_V_channel),
    .if_dout(contr_taskId_V_channel_dout),
    .if_empty_n(contr_taskId_V_channel_empty_n),
    .if_read(writeOutcome_U0_ap_ready)
);

run_fifo_w1_d2_S error_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_test_U0_ap_return),
    .if_full_n(error_full_n),
    .if_write(run_test_U0_ap_done),
    .if_dout(error_dout),
    .if_empty_n(error_empty_n),
    .if_read(writeOutcome_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_contr_taskId_V <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_contr_taskId_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_contr_taskId_V <= ap_sync_channel_write_contr_taskId_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_contr_taskId_V_channel <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_contr_taskId_V_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_contr_taskId_V_channel <= ap_sync_channel_write_contr_taskId_V_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_0 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_0 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_0 <= ap_sync_channel_write_data_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_1 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_1 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_1 <= ap_sync_channel_write_data_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_2 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_2 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_2 <= ap_sync_channel_write_data_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_3 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_3 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_3 <= ap_sync_channel_write_data_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_4 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_4 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_4 <= ap_sync_channel_write_data_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_5 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_5 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_5 <= ap_sync_channel_write_data_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_6 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_6 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_6 <= ap_sync_channel_write_data_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_data_7 <= 1'b0;
    end else begin
        if (((read_test_U0_ap_done & read_test_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_data_7 <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_data_7 <= ap_sync_channel_write_data_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_read_test_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_read_test_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_read_test_U0_ap_ready <= ap_sync_read_test_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_writeOutcome_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_writeOutcome_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_writeOutcome_U0_ap_ready <= ap_sync_writeOutcome_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

assign ap_channel_done_contr_taskId_V = (read_test_U0_ap_done & (ap_sync_reg_channel_write_contr_taskId_V ^ 1'b1));

assign ap_channel_done_contr_taskId_V_channel = (read_test_U0_ap_done & (ap_sync_reg_channel_write_contr_taskId_V_channel ^ 1'b1));

assign ap_channel_done_data_0 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_0 ^ 1'b1));

assign ap_channel_done_data_1 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_1 ^ 1'b1));

assign ap_channel_done_data_2 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_2 ^ 1'b1));

assign ap_channel_done_data_3 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_3 ^ 1'b1));

assign ap_channel_done_data_4 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_4 ^ 1'b1));

assign ap_channel_done_data_5 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_5 ^ 1'b1));

assign ap_channel_done_data_6 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_6 ^ 1'b1));

assign ap_channel_done_data_7 = (read_test_U0_ap_done & (ap_sync_reg_channel_write_data_7 ^ 1'b1));

assign ap_done = writeOutcome_U0_ap_done;

assign ap_idle = (writeOutcome_U0_ap_idle & run_test_U0_ap_idle & read_test_U0_ap_idle & (error_empty_n ^ 1'b1) & (contr_taskId_V_channel_empty_n ^ 1'b1) & (contr_taskId_V_empty_n ^ 1'b1) & (data_7_t_empty_n ^ 1'b1) & (data_6_t_empty_n ^ 1'b1) & (data_5_t_empty_n ^ 1'b1) & (data_4_t_empty_n ^ 1'b1) & (data_3_t_empty_n ^ 1'b1) & (data_2_t_empty_n ^ 1'b1) & (data_1_t_empty_n ^ 1'b1) & (data_0_t_empty_n ^ 1'b1));

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_contr_taskId_V = ((contr_taskId_V_full_n & ap_channel_done_contr_taskId_V) | ap_sync_reg_channel_write_contr_taskId_V);

assign ap_sync_channel_write_contr_taskId_V_channel = ((contr_taskId_V_channel_full_n & ap_channel_done_contr_taskId_V_channel) | ap_sync_reg_channel_write_contr_taskId_V_channel);

assign ap_sync_channel_write_data_0 = ((read_test_U0_data_0_full_n & ap_channel_done_data_0) | ap_sync_reg_channel_write_data_0);

assign ap_sync_channel_write_data_1 = ((read_test_U0_data_1_full_n & ap_channel_done_data_1) | ap_sync_reg_channel_write_data_1);

assign ap_sync_channel_write_data_2 = ((read_test_U0_data_2_full_n & ap_channel_done_data_2) | ap_sync_reg_channel_write_data_2);

assign ap_sync_channel_write_data_3 = ((read_test_U0_data_3_full_n & ap_channel_done_data_3) | ap_sync_reg_channel_write_data_3);

assign ap_sync_channel_write_data_4 = ((read_test_U0_data_4_full_n & ap_channel_done_data_4) | ap_sync_reg_channel_write_data_4);

assign ap_sync_channel_write_data_5 = ((read_test_U0_data_5_full_n & ap_channel_done_data_5) | ap_sync_reg_channel_write_data_5);

assign ap_sync_channel_write_data_6 = ((read_test_U0_data_6_full_n & ap_channel_done_data_6) | ap_sync_reg_channel_write_data_6);

assign ap_sync_channel_write_data_7 = ((read_test_U0_data_7_full_n & ap_channel_done_data_7) | ap_sync_reg_channel_write_data_7);

assign ap_sync_read_test_U0_ap_ready = (read_test_U0_ap_ready | ap_sync_reg_read_test_U0_ap_ready);

assign ap_sync_ready = (ap_sync_writeOutcome_U0_ap_ready & ap_sync_read_test_U0_ap_ready);

assign ap_sync_writeOutcome_U0_ap_ready = (writeOutcome_U0_ap_ready | ap_sync_reg_writeOutcome_U0_ap_ready);

assign control_TREADY = read_test_U0_control_TREADY;

assign read_test_U0_ap_continue = (ap_sync_channel_write_data_7 & ap_sync_channel_write_data_6 & ap_sync_channel_write_data_5 & ap_sync_channel_write_data_4 & ap_sync_channel_write_data_3 & ap_sync_channel_write_data_2 & ap_sync_channel_write_data_1 & ap_sync_channel_write_data_0 & ap_sync_channel_write_contr_taskId_V_channel & ap_sync_channel_write_contr_taskId_V);

assign read_test_U0_ap_start = ((ap_sync_reg_read_test_U0_ap_ready ^ 1'b1) & ap_start);

assign read_test_U0_data_0_full_n = data_0_i_full_n;

assign read_test_U0_data_1_full_n = data_1_i_full_n;

assign read_test_U0_data_2_full_n = data_2_i_full_n;

assign read_test_U0_data_3_full_n = data_3_i_full_n;

assign read_test_U0_data_4_full_n = data_4_i_full_n;

assign read_test_U0_data_5_full_n = data_5_i_full_n;

assign read_test_U0_data_6_full_n = data_6_i_full_n;

assign read_test_U0_data_7_full_n = data_7_i_full_n;

assign run_test_U0_ap_continue = error_full_n;

assign run_test_U0_ap_start = (data_7_t_empty_n & data_6_t_empty_n & data_5_t_empty_n & data_4_t_empty_n & data_3_t_empty_n & data_2_t_empty_n & data_1_t_empty_n & data_0_t_empty_n & contr_taskId_V_empty_n);

assign toScheduler_TDATA = writeOutcome_U0_toScheduler_TDATA;

assign toScheduler_TVALID = writeOutcome_U0_toScheduler_TVALID;

assign writeOutcome_U0_ap_continue = ap_continue;

assign writeOutcome_U0_ap_start = ((ap_sync_reg_writeOutcome_U0_ap_ready ^ 1'b1) & error_empty_n & contr_taskId_V_channel_empty_n & ap_start);

endmodule //run
