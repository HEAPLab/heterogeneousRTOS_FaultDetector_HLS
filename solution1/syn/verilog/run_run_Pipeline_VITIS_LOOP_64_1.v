// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_run_Pipeline_VITIS_LOOP_64_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln64,
        idx_out,
        idx_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sext_ln64;
output  [31:0] idx_out;
output   idx_out_ap_vld;

reg ap_idle;
reg idx_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1073_fu_92_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln64_cast_fu_70_p1;
reg  signed [31:0] sext_ln64_cast_reg_220;
reg   [31:0] i_1_reg_225;
reg   [31:0] score_load_reg_233;
reg   [31:0] score_fu_40;
wire   [31:0] score_1_fu_170_p3;
reg   [31:0] ap_sig_allocacmp_score_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [31:0] idx_fu_44;
wire   [31:0] idx_1_fu_177_p3;
reg   [31:0] i_fu_48;
wire   [31:0] add_ln64_fu_97_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln85_fu_123_p1;
wire   [7:0] tmp_fu_126_p4;
wire   [22:0] trunc_ln85_fu_136_p1;
wire   [0:0] icmp_ln85_1_fu_146_p2;
wire   [0:0] icmp_ln85_fu_140_p2;
wire   [0:0] or_ln85_1_fu_152_p2;
wire   [0:0] grp_fu_65_p2;
wire   [0:0] tmp_2_fu_115_p3;
wire   [0:0] and_ln85_fu_158_p2;
wire   [0:0] or_ln85_fu_164_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_score_load),
    .din1(32'd2139095040),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_65_p2)
);

run_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 32'd0;
        end else if (((icmp_ln1073_fu_92_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_48 <= add_ln64_fu_97_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            idx_fu_44 <= 32'd4294967295;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            idx_fu_44 <= idx_1_fu_177_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            score_fu_40 <= 32'd3212836864;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            score_fu_40 <= score_1_fu_170_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_225 <= i_fu_48;
        sext_ln64_cast_reg_220 <= sext_ln64_cast_fu_70_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_fu_92_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        score_load_reg_233 <= ap_sig_allocacmp_score_load;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_92_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_score_load = score_1_fu_170_p3;
    end else begin
        ap_sig_allocacmp_score_load = score_fu_40;
    end
end

always @ (*) begin
    if (((icmp_ln1073_fu_92_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_out_ap_vld = 1'b1;
    end else begin
        idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_97_p2 = (i_fu_48 + 32'd1);

assign and_ln85_fu_158_p2 = (or_ln85_1_fu_152_p2 & grp_fu_65_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bitcast_ln85_fu_123_p1 = score_load_reg_233;

assign icmp_ln1073_fu_92_p2 = ((i_fu_48 == sext_ln64_cast_reg_220) ? 1'b1 : 1'b0);

assign icmp_ln85_1_fu_146_p2 = ((trunc_ln85_fu_136_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_140_p2 = ((tmp_fu_126_p4 != 8'd255) ? 1'b1 : 1'b0);

assign idx_1_fu_177_p3 = ((or_ln85_fu_164_p2[0:0] == 1'b1) ? i_1_reg_225 : idx_fu_44);

assign idx_out = idx_fu_44;

assign or_ln85_1_fu_152_p2 = (icmp_ln85_fu_140_p2 | icmp_ln85_1_fu_146_p2);

assign or_ln85_fu_164_p2 = (tmp_2_fu_115_p3 | and_ln85_fu_158_p2);

assign score_1_fu_170_p3 = ((or_ln85_fu_164_p2[0:0] == 1'b1) ? 32'd2139095040 : score_load_reg_233);

assign sext_ln64_cast_fu_70_p1 = $signed(sext_ln64);

assign tmp_2_fu_115_p3 = idx_fu_44[32'd31];

assign tmp_fu_126_p4 = {{bitcast_ln85_fu_123_p1[30:23]}};

assign trunc_ln85_fu_136_p1 = bitcast_ln85_fu_123_p1[22:0];

endmodule //run_run_Pipeline_VITIS_LOOP_64_1
