// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_find_region (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        d_read,
        d_read_23,
        d_read_24,
        d_read_25,
        d_read_26,
        d_read_27,
        d_read_28,
        d_read_29,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] d_read;
input  [31:0] d_read_23;
input  [31:0] d_read_24;
input  [31:0] d_read_25;
input  [31:0] d_read_26;
input  [31:0] d_read_27;
input  [31:0] d_read_28;
input  [31:0] d_read_29;
output  [4:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln65_fu_170_p2;
reg   [0:0] or_ln65_reg_1053;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] grp_fu_114_p2;
reg   [0:0] tmp_s_reg_1065;
wire   [0:0] grp_fu_120_p2;
reg   [0:0] tmp_24_reg_1070;
wire   [0:0] or_ln65_1_fu_206_p2;
reg   [0:0] or_ln65_1_reg_1075;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_27_reg_1087;
wire   [0:0] or_ln65_2_fu_251_p2;
reg   [0:0] or_ln65_2_reg_1092;
wire   [0:0] or_ln65_13_fu_257_p2;
reg   [0:0] or_ln65_13_reg_1098;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] tmp_30_reg_1109;
wire   [0:0] or_ln65_3_fu_302_p2;
reg   [0:0] or_ln65_3_reg_1114;
wire   [0:0] or_ln65_15_fu_314_p2;
reg   [0:0] or_ln65_15_reg_1120;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] tmp_32_reg_1131;
reg   [0:0] tmp_33_reg_1136;
wire   [0:0] or_ln65_4_fu_349_p2;
reg   [0:0] or_ln65_4_reg_1141;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [0:0] tmp_35_reg_1153;
wire   [0:0] icmp_ln65_12_fu_382_p2;
reg   [0:0] icmp_ln65_12_reg_1158;
wire   [0:0] icmp_ln65_13_fu_388_p2;
reg   [0:0] icmp_ln65_13_reg_1163;
wire   [0:0] or_ln65_9_fu_394_p2;
reg   [0:0] or_ln65_9_reg_1168;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [0:0] icmp_ln65_10_fu_418_p2;
reg   [0:0] icmp_ln65_10_reg_1179;
wire   [0:0] icmp_ln65_11_fu_424_p2;
reg   [0:0] icmp_ln65_11_reg_1184;
wire   [0:0] and_ln65_10_fu_452_p2;
reg   [0:0] and_ln65_10_reg_1189;
wire    ap_block_pp0_stage7_11001;
wire   [0:0] icmp_ln65_14_fu_488_p2;
reg   [0:0] icmp_ln65_14_reg_1200;
wire   [0:0] icmp_ln65_15_fu_494_p2;
reg   [0:0] icmp_ln65_15_reg_1205;
wire   [0:0] or_ln65_12_fu_540_p2;
reg   [0:0] or_ln65_12_reg_1210;
wire   [0:0] idx_fu_599_p2;
reg   [0:0] idx_reg_1215;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] ap_port_reg_d_read_23;
reg   [31:0] ap_port_reg_d_read_24;
reg   [31:0] ap_port_reg_d_read_25;
reg   [31:0] ap_port_reg_d_read_26;
reg   [31:0] ap_port_reg_d_read_27;
reg   [31:0] ap_port_reg_d_read_28;
reg   [31:0] ap_port_reg_d_read_29;
reg   [31:0] grp_fu_114_p0;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
reg   [31:0] grp_fu_120_p0;
wire   [31:0] bitcast_ln65_fu_140_p1;
wire   [7:0] tmp_fu_144_p4;
wire   [22:0] trunc_ln65_fu_154_p1;
wire   [0:0] icmp_ln65_1_fu_164_p2;
wire   [0:0] icmp_ln65_fu_158_p2;
wire   [31:0] bitcast_ln65_1_fu_176_p1;
wire   [7:0] tmp_25_fu_180_p4;
wire   [22:0] trunc_ln65_1_fu_190_p1;
wire   [0:0] icmp_ln65_3_fu_200_p2;
wire   [0:0] icmp_ln65_2_fu_194_p2;
wire   [31:0] bitcast_ln65_2_fu_221_p1;
wire   [7:0] tmp_28_fu_225_p4;
wire   [22:0] trunc_ln65_2_fu_235_p1;
wire   [0:0] icmp_ln65_5_fu_245_p2;
wire   [0:0] icmp_ln65_4_fu_239_p2;
wire   [0:0] and_ln65_2_fu_216_p2;
wire   [0:0] and_ln65_fu_212_p2;
wire   [31:0] bitcast_ln65_3_fu_272_p1;
wire   [7:0] tmp_31_fu_276_p4;
wire   [22:0] trunc_ln65_3_fu_286_p1;
wire   [0:0] icmp_ln65_7_fu_296_p2;
wire   [0:0] icmp_ln65_6_fu_290_p2;
wire   [0:0] and_ln65_4_fu_267_p2;
wire   [0:0] and_ln65_3_fu_263_p2;
wire   [0:0] or_ln65_14_fu_308_p2;
wire   [31:0] bitcast_ln65_4_fu_319_p1;
wire   [7:0] tmp_34_fu_323_p4;
wire   [22:0] trunc_ln65_4_fu_333_p1;
wire   [0:0] icmp_ln65_9_fu_343_p2;
wire   [0:0] icmp_ln65_8_fu_337_p2;
wire   [31:0] bitcast_ln65_6_fu_364_p1;
wire   [7:0] tmp_38_fu_368_p4;
wire   [22:0] trunc_ln65_6_fu_378_p1;
wire   [0:0] and_ln65_7_fu_355_p2;
wire   [0:0] and_ln65_9_fu_359_p2;
wire   [31:0] bitcast_ln65_5_fu_400_p1;
wire   [7:0] tmp_37_fu_404_p4;
wire   [22:0] trunc_ln65_5_fu_414_p1;
wire   [0:0] xor_ln65_fu_434_p2;
wire   [0:0] xor_ln65_fu_440_p2;
wire   [0:0] or_ln65_6_fu_430_p2;
wire   [0:0] and_ln65_fu_446_p2;
wire   [31:0] bitcast_ln65_7_fu_470_p1;
wire   [7:0] tmp_39_fu_474_p4;
wire   [22:0] trunc_ln65_7_fu_484_p1;
wire   [0:0] xor_ln65_fu_500_p2;
wire   [0:0] xor_ln65_fu_506_p2;
wire   [0:0] or_ln65_5_fu_466_p2;
wire   [0:0] and_ln65_fu_512_p2;
wire   [0:0] and_ln65_11_fu_518_p2;
wire   [0:0] and_ln65_8_fu_462_p2;
wire   [0:0] and_ln65_1_fu_458_p2;
wire   [0:0] or_ln65_10_fu_529_p2;
wire   [0:0] or_ln65_11_fu_535_p2;
wire   [0:0] or_ln65_8_fu_524_p2;
wire   [0:0] and_ln65_6_fu_550_p2;
wire   [0:0] and_ln65_5_fu_546_p2;
wire   [0:0] xor_ln65_fu_564_p2;
wire   [0:0] xor_ln65_fu_570_p2;
wire   [0:0] or_ln65_7_fu_554_p2;
wire   [0:0] and_ln65_fu_576_p2;
wire   [0:0] and_ln65_12_fu_582_p2;
wire   [0:0] or_ln65_16_fu_558_p2;
wire   [0:0] or_ln65_17_fu_588_p2;
wire   [0:0] or_ln65_18_fu_594_p2;
wire   [1:0] zext_ln70_fu_604_p1;
wire  signed [1:0] idx_1_fu_607_p3;
wire  signed [2:0] sext_ln46_fu_614_p1;
wire   [2:0] zext_ln70_1_fu_618_p1;
wire   [2:0] idx_2_fu_622_p3;
wire   [2:0] select_ln70_fu_633_p3;
wire  signed [3:0] sext_ln46_1_fu_629_p1;
wire   [3:0] zext_ln70_2_fu_640_p1;
wire   [3:0] idx_3_fu_644_p3;
wire   [0:0] tmp_40_fu_655_p3;
wire   [0:0] or_ln70_fu_663_p2;
wire   [2:0] trunc_ln46_fu_651_p1;
wire   [2:0] select_ln70_1_fu_668_p3;
wire   [3:0] zext_ln70_3_fu_676_p1;
wire   [3:0] idx_4_fu_680_p3;
wire   [0:0] tmp_41_fu_691_p3;
wire   [0:0] or_ln70_1_fu_699_p2;
wire   [2:0] trunc_ln46_1_fu_687_p1;
wire   [2:0] select_ln70_2_fu_704_p3;
wire   [3:0] zext_ln70_4_fu_712_p1;
wire   [3:0] idx_5_fu_716_p3;
wire   [0:0] tmp_42_fu_727_p3;
wire   [0:0] or_ln70_2_fu_735_p2;
wire   [2:0] trunc_ln46_2_fu_723_p1;
wire   [2:0] select_ln70_3_fu_740_p3;
wire   [3:0] zext_ln70_5_fu_748_p1;
wire  signed [3:0] idx_6_fu_752_p3;
wire   [0:0] tmp_43_fu_763_p3;
wire   [0:0] or_ln70_3_fu_771_p2;
wire   [3:0] select_ln70_4_fu_776_p3;
wire  signed [4:0] sext_ln46_2_fu_759_p1;
wire   [4:0] zext_ln70_6_fu_784_p1;
wire   [4:0] idx_7_fu_788_p3;
wire   [0:0] tmp_44_fu_799_p3;
wire   [0:0] or_ln70_4_fu_807_p2;
wire   [3:0] trunc_ln46_3_fu_795_p1;
wire   [3:0] select_ln70_5_fu_812_p3;
wire   [4:0] zext_ln70_7_fu_820_p1;
wire   [4:0] idx_8_fu_824_p3;
wire   [0:0] tmp_45_fu_835_p3;
wire   [0:0] or_ln70_5_fu_843_p2;
wire   [3:0] trunc_ln46_4_fu_831_p1;
wire   [3:0] select_ln70_6_fu_848_p3;
wire   [4:0] zext_ln70_8_fu_856_p1;
wire   [4:0] idx_9_fu_860_p3;
wire   [0:0] tmp_46_fu_871_p3;
wire   [0:0] or_ln70_6_fu_879_p2;
wire   [3:0] trunc_ln46_5_fu_867_p1;
wire   [3:0] select_ln70_7_fu_884_p3;
wire   [4:0] zext_ln70_9_fu_892_p1;
wire   [4:0] idx_10_fu_896_p3;
wire   [0:0] tmp_47_fu_907_p3;
wire   [0:0] or_ln70_7_fu_915_p2;
wire   [3:0] trunc_ln46_6_fu_903_p1;
wire   [3:0] select_ln70_8_fu_920_p3;
wire   [4:0] zext_ln70_10_fu_928_p1;
wire   [4:0] idx_11_fu_932_p3;
wire   [0:0] tmp_48_fu_943_p3;
wire   [0:0] or_ln70_8_fu_951_p2;
wire   [3:0] trunc_ln46_7_fu_939_p1;
wire   [3:0] select_ln70_9_fu_956_p3;
wire   [4:0] zext_ln70_11_fu_964_p1;
wire   [4:0] idx_12_fu_968_p3;
wire   [0:0] tmp_49_fu_979_p3;
wire   [0:0] or_ln70_9_fu_987_p2;
wire   [3:0] trunc_ln46_8_fu_975_p1;
wire   [3:0] select_ln70_10_fu_992_p3;
wire   [4:0] zext_ln70_12_fu_1000_p1;
wire   [4:0] idx_13_fu_1004_p3;
wire   [0:0] tmp_50_fu_1015_p3;
wire   [0:0] or_ln70_10_fu_1023_p2;
wire   [3:0] trunc_ln46_9_fu_1011_p1;
wire   [3:0] select_ln70_11_fu_1028_p3;
wire   [4:0] zext_ln75_fu_1036_p1;
reg    grp_fu_114_ce;
reg   [4:0] grp_fu_114_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_block_pp0_stage6_00001;
wire    ap_block_pp0_stage7_00001;
reg    grp_fu_120_ce;
reg   [4:0] grp_fu_120_opcode;
reg   [7:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_114_p0),
    .din1(32'd0),
    .ce(grp_fu_114_ce),
    .opcode(grp_fu_114_opcode),
    .dout(grp_fu_114_p2)
);

run_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_120_p0),
    .din1(32'd0),
    .ce(grp_fu_120_ce),
    .opcode(grp_fu_120_opcode),
    .dout(grp_fu_120_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        and_ln65_10_reg_1189 <= and_ln65_10_fu_452_p2;
        icmp_ln65_10_reg_1179 <= icmp_ln65_10_fu_418_p2;
        icmp_ln65_11_reg_1184 <= icmp_ln65_11_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_d_read_23 <= d_read_23;
        ap_port_reg_d_read_24 <= d_read_24;
        ap_port_reg_d_read_25 <= d_read_25;
        ap_port_reg_d_read_26 <= d_read_26;
        ap_port_reg_d_read_27 <= d_read_27;
        ap_port_reg_d_read_28 <= d_read_28;
        ap_port_reg_d_read_29 <= d_read_29;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        icmp_ln65_12_reg_1158 <= icmp_ln65_12_fu_382_p2;
        icmp_ln65_13_reg_1163 <= icmp_ln65_13_fu_388_p2;
        or_ln65_9_reg_1168 <= or_ln65_9_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        icmp_ln65_14_reg_1200 <= icmp_ln65_14_fu_488_p2;
        icmp_ln65_15_reg_1205 <= icmp_ln65_15_fu_494_p2;
        or_ln65_12_reg_1210 <= or_ln65_12_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_reg_1215 <= idx_fu_599_p2;
        or_ln65_reg_1053 <= or_ln65_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        or_ln65_13_reg_1098 <= or_ln65_13_fu_257_p2;
        or_ln65_2_reg_1092 <= or_ln65_2_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        or_ln65_15_reg_1120 <= or_ln65_15_fu_314_p2;
        or_ln65_3_reg_1114 <= or_ln65_3_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        or_ln65_1_reg_1075 <= or_ln65_1_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        or_ln65_4_reg_1141 <= or_ln65_4_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        tmp_24_reg_1070 <= grp_fu_120_p2;
        tmp_s_reg_1065 <= grp_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_27_reg_1087 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_30_reg_1109 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_32_reg_1131 <= grp_fu_114_p2;
        tmp_33_reg_1136 <= grp_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_35_reg_1153 <= grp_fu_114_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
        grp_fu_114_ce = 1'b1;
    end else begin
        grp_fu_114_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        grp_fu_114_opcode = 5'd8;
    end else if ((((1'b0 == ap_block_pp0_stage4_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_114_opcode = 5'd4;
    end else begin
        grp_fu_114_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_29;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_27;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_28;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_26;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_25;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_24;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_114_p0 = ap_port_reg_d_read_23;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_114_p0 = d_read;
        end else begin
            grp_fu_114_p0 = 'bx;
        end
    end else begin
        grp_fu_114_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
        grp_fu_120_ce = 1'b1;
    end else begin
        grp_fu_120_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
        grp_fu_120_opcode = 5'd1;
    end else if ((((1'b0 == ap_block_pp0_stage4_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_120_opcode = 5'd2;
    end else begin
        grp_fu_120_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_29;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_27;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_28;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_26;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_25;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_24;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_120_p0 = ap_port_reg_d_read_23;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_120_p0 = d_read;
        end else begin
            grp_fu_120_p0 = 'bx;
        end
    end else begin
        grp_fu_120_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln65_10_fu_452_p2 = (or_ln65_6_fu_430_p2 & and_ln65_fu_446_p2);

assign and_ln65_11_fu_518_p2 = (or_ln65_5_fu_466_p2 & and_ln65_fu_512_p2);

assign and_ln65_12_fu_582_p2 = (or_ln65_7_fu_554_p2 & and_ln65_fu_576_p2);

assign and_ln65_1_fu_458_p2 = (tmp_24_reg_1070 & or_ln65_reg_1053);

assign and_ln65_2_fu_216_p2 = (or_ln65_1_reg_1075 & grp_fu_114_p2);

assign and_ln65_3_fu_263_p2 = (tmp_27_reg_1087 & or_ln65_1_reg_1075);

assign and_ln65_4_fu_267_p2 = (or_ln65_2_reg_1092 & grp_fu_114_p2);

assign and_ln65_5_fu_546_p2 = (tmp_30_reg_1109 & or_ln65_2_reg_1092);

assign and_ln65_6_fu_550_p2 = (tmp_32_reg_1131 & or_ln65_3_reg_1114);

assign and_ln65_7_fu_355_p2 = (tmp_33_reg_1136 & or_ln65_3_reg_1114);

assign and_ln65_8_fu_462_p2 = (tmp_35_reg_1153 & or_ln65_4_reg_1141);

assign and_ln65_9_fu_359_p2 = (or_ln65_4_reg_1141 & grp_fu_120_p2);

assign and_ln65_fu_212_p2 = (tmp_s_reg_1065 & or_ln65_reg_1053);

assign and_ln65_fu_446_p2 = (xor_ln65_fu_440_p2 & xor_ln65_fu_434_p2);

assign and_ln65_fu_512_p2 = (xor_ln65_fu_506_p2 & xor_ln65_fu_500_p2);

assign and_ln65_fu_576_p2 = (xor_ln65_fu_570_p2 & xor_ln65_fu_564_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_subdone = (1'b0 == ap_ce);
end

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln75_fu_1036_p1);

assign bitcast_ln65_1_fu_176_p1 = ap_port_reg_d_read_23;

assign bitcast_ln65_2_fu_221_p1 = ap_port_reg_d_read_24;

assign bitcast_ln65_3_fu_272_p1 = ap_port_reg_d_read_25;

assign bitcast_ln65_4_fu_319_p1 = ap_port_reg_d_read_26;

assign bitcast_ln65_5_fu_400_p1 = ap_port_reg_d_read_27;

assign bitcast_ln65_6_fu_364_p1 = ap_port_reg_d_read_28;

assign bitcast_ln65_7_fu_470_p1 = ap_port_reg_d_read_29;

assign bitcast_ln65_fu_140_p1 = d_read;

assign icmp_ln65_10_fu_418_p2 = ((tmp_37_fu_404_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_11_fu_424_p2 = ((trunc_ln65_5_fu_414_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_12_fu_382_p2 = ((tmp_38_fu_368_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_13_fu_388_p2 = ((trunc_ln65_6_fu_378_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_14_fu_488_p2 = ((tmp_39_fu_474_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_15_fu_494_p2 = ((trunc_ln65_7_fu_484_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_164_p2 = ((trunc_ln65_fu_154_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_194_p2 = ((tmp_25_fu_180_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_200_p2 = ((trunc_ln65_1_fu_190_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_239_p2 = ((tmp_28_fu_225_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_245_p2 = ((trunc_ln65_2_fu_235_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_6_fu_290_p2 = ((tmp_31_fu_276_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_7_fu_296_p2 = ((trunc_ln65_3_fu_286_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_8_fu_337_p2 = ((tmp_34_fu_323_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_9_fu_343_p2 = ((trunc_ln65_4_fu_333_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_158_p2 = ((tmp_fu_144_p4 != 8'd255) ? 1'b1 : 1'b0);

assign idx_10_fu_896_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_9_fu_892_p1);

assign idx_11_fu_932_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_10_fu_928_p1);

assign idx_12_fu_968_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_11_fu_964_p1);

assign idx_13_fu_1004_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_12_fu_1000_p1);

assign idx_1_fu_607_p3 = ((idx_reg_1215[0:0] == 1'b1) ? 2'd3 : zext_ln70_fu_604_p1);

assign idx_2_fu_622_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_fu_614_p1 : zext_ln70_1_fu_618_p1);

assign idx_3_fu_644_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_1_fu_629_p1 : zext_ln70_2_fu_640_p1);

assign idx_4_fu_680_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_1_fu_629_p1 : zext_ln70_3_fu_676_p1);

assign idx_5_fu_716_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_1_fu_629_p1 : zext_ln70_4_fu_712_p1);

assign idx_6_fu_752_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_1_fu_629_p1 : zext_ln70_5_fu_748_p1);

assign idx_7_fu_788_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_6_fu_784_p1);

assign idx_8_fu_824_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_7_fu_820_p1);

assign idx_9_fu_860_p3 = ((idx_reg_1215[0:0] == 1'b1) ? sext_ln46_2_fu_759_p1 : zext_ln70_8_fu_856_p1);

assign idx_fu_599_p2 = (or_ln65_18_fu_594_p2 | or_ln65_12_reg_1210);

assign or_ln65_10_fu_529_p2 = (and_ln65_8_fu_462_p2 | and_ln65_1_fu_458_p2);

assign or_ln65_11_fu_535_p2 = (or_ln65_9_reg_1168 | or_ln65_10_fu_529_p2);

assign or_ln65_12_fu_540_p2 = (or_ln65_8_fu_524_p2 | or_ln65_11_fu_535_p2);

assign or_ln65_13_fu_257_p2 = (and_ln65_fu_212_p2 | and_ln65_2_fu_216_p2);

assign or_ln65_14_fu_308_p2 = (and_ln65_4_fu_267_p2 | and_ln65_3_fu_263_p2);

assign or_ln65_15_fu_314_p2 = (or_ln65_14_fu_308_p2 | or_ln65_13_reg_1098);

assign or_ln65_16_fu_558_p2 = (and_ln65_6_fu_550_p2 | and_ln65_5_fu_546_p2);

assign or_ln65_17_fu_588_p2 = (or_ln65_16_fu_558_p2 | and_ln65_12_fu_582_p2);

assign or_ln65_18_fu_594_p2 = (or_ln65_17_fu_588_p2 | or_ln65_15_reg_1120);

assign or_ln65_1_fu_206_p2 = (icmp_ln65_3_fu_200_p2 | icmp_ln65_2_fu_194_p2);

assign or_ln65_2_fu_251_p2 = (icmp_ln65_5_fu_245_p2 | icmp_ln65_4_fu_239_p2);

assign or_ln65_3_fu_302_p2 = (icmp_ln65_7_fu_296_p2 | icmp_ln65_6_fu_290_p2);

assign or_ln65_4_fu_349_p2 = (icmp_ln65_9_fu_343_p2 | icmp_ln65_8_fu_337_p2);

assign or_ln65_5_fu_466_p2 = (icmp_ln65_11_reg_1184 | icmp_ln65_10_reg_1179);

assign or_ln65_6_fu_430_p2 = (icmp_ln65_13_reg_1163 | icmp_ln65_12_reg_1158);

assign or_ln65_7_fu_554_p2 = (icmp_ln65_15_reg_1205 | icmp_ln65_14_reg_1200);

assign or_ln65_8_fu_524_p2 = (and_ln65_11_fu_518_p2 | and_ln65_10_reg_1189);

assign or_ln65_9_fu_394_p2 = (and_ln65_9_fu_359_p2 | and_ln65_7_fu_355_p2);

assign or_ln65_fu_170_p2 = (icmp_ln65_fu_158_p2 | icmp_ln65_1_fu_164_p2);

assign or_ln70_10_fu_1023_p2 = (tmp_50_fu_1015_p3 | idx_reg_1215);

assign or_ln70_1_fu_699_p2 = (tmp_41_fu_691_p3 | idx_reg_1215);

assign or_ln70_2_fu_735_p2 = (tmp_42_fu_727_p3 | idx_reg_1215);

assign or_ln70_3_fu_771_p2 = (tmp_43_fu_763_p3 | idx_reg_1215);

assign or_ln70_4_fu_807_p2 = (tmp_44_fu_799_p3 | idx_reg_1215);

assign or_ln70_5_fu_843_p2 = (tmp_45_fu_835_p3 | idx_reg_1215);

assign or_ln70_6_fu_879_p2 = (tmp_46_fu_871_p3 | idx_reg_1215);

assign or_ln70_7_fu_915_p2 = (tmp_47_fu_907_p3 | idx_reg_1215);

assign or_ln70_8_fu_951_p2 = (tmp_48_fu_943_p3 | idx_reg_1215);

assign or_ln70_9_fu_987_p2 = (tmp_49_fu_979_p3 | idx_reg_1215);

assign or_ln70_fu_663_p2 = (tmp_40_fu_655_p3 | idx_reg_1215);

assign select_ln70_10_fu_992_p3 = ((or_ln70_9_fu_987_p2[0:0] == 1'b1) ? 4'd14 : trunc_ln46_8_fu_975_p1);

assign select_ln70_11_fu_1028_p3 = ((or_ln70_10_fu_1023_p2[0:0] == 1'b1) ? 4'd15 : trunc_ln46_9_fu_1011_p1);

assign select_ln70_1_fu_668_p3 = ((or_ln70_fu_663_p2[0:0] == 1'b1) ? 3'd5 : trunc_ln46_fu_651_p1);

assign select_ln70_2_fu_704_p3 = ((or_ln70_1_fu_699_p2[0:0] == 1'b1) ? 3'd6 : trunc_ln46_1_fu_687_p1);

assign select_ln70_3_fu_740_p3 = ((or_ln70_2_fu_735_p2[0:0] == 1'b1) ? 3'd7 : trunc_ln46_2_fu_723_p1);

assign select_ln70_4_fu_776_p3 = ((or_ln70_3_fu_771_p2[0:0] == 1'b1) ? 4'd8 : idx_6_fu_752_p3);

assign select_ln70_5_fu_812_p3 = ((or_ln70_4_fu_807_p2[0:0] == 1'b1) ? 4'd9 : trunc_ln46_3_fu_795_p1);

assign select_ln70_6_fu_848_p3 = ((or_ln70_5_fu_843_p2[0:0] == 1'b1) ? 4'd10 : trunc_ln46_4_fu_831_p1);

assign select_ln70_7_fu_884_p3 = ((or_ln70_6_fu_879_p2[0:0] == 1'b1) ? 4'd11 : trunc_ln46_5_fu_867_p1);

assign select_ln70_8_fu_920_p3 = ((or_ln70_7_fu_915_p2[0:0] == 1'b1) ? 4'd12 : trunc_ln46_6_fu_903_p1);

assign select_ln70_9_fu_956_p3 = ((or_ln70_8_fu_951_p2[0:0] == 1'b1) ? 4'd13 : trunc_ln46_7_fu_939_p1);

assign select_ln70_fu_633_p3 = ((idx_reg_1215[0:0] == 1'b1) ? 3'd4 : zext_ln70_1_fu_618_p1);

assign sext_ln46_1_fu_629_p1 = $signed(idx_2_fu_622_p3);

assign sext_ln46_2_fu_759_p1 = idx_6_fu_752_p3;

assign sext_ln46_fu_614_p1 = idx_1_fu_607_p3;

assign tmp_25_fu_180_p4 = {{bitcast_ln65_1_fu_176_p1[30:23]}};

assign tmp_28_fu_225_p4 = {{bitcast_ln65_2_fu_221_p1[30:23]}};

assign tmp_31_fu_276_p4 = {{bitcast_ln65_3_fu_272_p1[30:23]}};

assign tmp_34_fu_323_p4 = {{bitcast_ln65_4_fu_319_p1[30:23]}};

assign tmp_37_fu_404_p4 = {{bitcast_ln65_5_fu_400_p1[30:23]}};

assign tmp_38_fu_368_p4 = {{bitcast_ln65_6_fu_364_p1[30:23]}};

assign tmp_39_fu_474_p4 = {{bitcast_ln65_7_fu_470_p1[30:23]}};

assign tmp_40_fu_655_p3 = idx_3_fu_644_p3[32'd3];

assign tmp_41_fu_691_p3 = idx_4_fu_680_p3[32'd3];

assign tmp_42_fu_727_p3 = idx_5_fu_716_p3[32'd3];

assign tmp_43_fu_763_p3 = idx_6_fu_752_p3[32'd3];

assign tmp_44_fu_799_p3 = idx_7_fu_788_p3[32'd4];

assign tmp_45_fu_835_p3 = idx_8_fu_824_p3[32'd4];

assign tmp_46_fu_871_p3 = idx_9_fu_860_p3[32'd4];

assign tmp_47_fu_907_p3 = idx_10_fu_896_p3[32'd4];

assign tmp_48_fu_943_p3 = idx_11_fu_932_p3[32'd4];

assign tmp_49_fu_979_p3 = idx_12_fu_968_p3[32'd4];

assign tmp_50_fu_1015_p3 = idx_13_fu_1004_p3[32'd4];

assign tmp_fu_144_p4 = {{bitcast_ln65_fu_140_p1[30:23]}};

assign trunc_ln46_1_fu_687_p1 = idx_4_fu_680_p3[2:0];

assign trunc_ln46_2_fu_723_p1 = idx_5_fu_716_p3[2:0];

assign trunc_ln46_3_fu_795_p1 = idx_7_fu_788_p3[3:0];

assign trunc_ln46_4_fu_831_p1 = idx_8_fu_824_p3[3:0];

assign trunc_ln46_5_fu_867_p1 = idx_9_fu_860_p3[3:0];

assign trunc_ln46_6_fu_903_p1 = idx_10_fu_896_p3[3:0];

assign trunc_ln46_7_fu_939_p1 = idx_11_fu_932_p3[3:0];

assign trunc_ln46_8_fu_975_p1 = idx_12_fu_968_p3[3:0];

assign trunc_ln46_9_fu_1011_p1 = idx_13_fu_1004_p3[3:0];

assign trunc_ln46_fu_651_p1 = idx_3_fu_644_p3[2:0];

assign trunc_ln65_1_fu_190_p1 = bitcast_ln65_1_fu_176_p1[22:0];

assign trunc_ln65_2_fu_235_p1 = bitcast_ln65_2_fu_221_p1[22:0];

assign trunc_ln65_3_fu_286_p1 = bitcast_ln65_3_fu_272_p1[22:0];

assign trunc_ln65_4_fu_333_p1 = bitcast_ln65_4_fu_319_p1[22:0];

assign trunc_ln65_5_fu_414_p1 = bitcast_ln65_5_fu_400_p1[22:0];

assign trunc_ln65_6_fu_378_p1 = bitcast_ln65_6_fu_364_p1[22:0];

assign trunc_ln65_7_fu_484_p1 = bitcast_ln65_7_fu_470_p1[22:0];

assign trunc_ln65_fu_154_p1 = bitcast_ln65_fu_140_p1[22:0];

assign xor_ln65_fu_434_p2 = (grp_fu_114_p2 ^ 1'd1);

assign xor_ln65_fu_440_p2 = (grp_fu_120_p2 ^ 1'd1);

assign xor_ln65_fu_500_p2 = (grp_fu_114_p2 ^ 1'd1);

assign xor_ln65_fu_506_p2 = (grp_fu_120_p2 ^ 1'd1);

assign xor_ln65_fu_564_p2 = (grp_fu_114_p2 ^ 1'd1);

assign xor_ln65_fu_570_p2 = (grp_fu_120_p2 ^ 1'd1);

assign zext_ln70_10_fu_928_p1 = select_ln70_8_fu_920_p3;

assign zext_ln70_11_fu_964_p1 = select_ln70_9_fu_956_p3;

assign zext_ln70_12_fu_1000_p1 = select_ln70_10_fu_992_p3;

assign zext_ln70_1_fu_618_p1 = $unsigned(idx_1_fu_607_p3);

assign zext_ln70_2_fu_640_p1 = select_ln70_fu_633_p3;

assign zext_ln70_3_fu_676_p1 = select_ln70_1_fu_668_p3;

assign zext_ln70_4_fu_712_p1 = select_ln70_2_fu_704_p3;

assign zext_ln70_5_fu_748_p1 = select_ln70_3_fu_740_p3;

assign zext_ln70_6_fu_784_p1 = select_ln70_4_fu_776_p3;

assign zext_ln70_7_fu_820_p1 = select_ln70_5_fu_812_p3;

assign zext_ln70_8_fu_856_p1 = select_ln70_6_fu_848_p3;

assign zext_ln70_9_fu_892_p1 = select_ln70_7_fu_884_p3;

assign zext_ln70_fu_604_p1 = idx_reg_1215;

assign zext_ln75_fu_1036_p1 = select_ln70_11_fu_1028_p3;

endmodule //run_find_region
