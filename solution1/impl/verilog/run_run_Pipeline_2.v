// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_run_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gmem_load,
        zext_ln587
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] gmem_load;
input  [6:0] zext_ln587;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond544_fu_213_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] data_0_address0;
reg    data_0_ce0;
reg    data_0_we0;
wire   [6:0] data_1_address0;
reg    data_1_ce0;
reg    data_1_we0;
wire   [6:0] data_2_address0;
reg    data_2_ce0;
reg    data_2_we0;
wire   [6:0] data_3_address0;
reg    data_3_ce0;
reg    data_3_we0;
wire   [6:0] data_4_address0;
reg    data_4_ce0;
reg    data_4_we0;
wire   [6:0] data_5_address0;
reg    data_5_ce0;
reg    data_5_we0;
wire   [6:0] data_6_address0;
reg    data_6_ce0;
reg    data_6_we0;
wire   [6:0] data_7_address0;
reg    data_7_ce0;
reg    data_7_we0;
wire   [63:0] zext_ln354_fu_196_p1;
reg   [63:0] zext_ln354_reg_286;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [255:0] shiftreg_fu_72;
wire   [255:0] tmp_3_cast_fu_254_p1;
wire    ap_loop_init;
reg   [3:0] loop_index_fu_76;
wire   [3:0] empty_38_fu_219_p2;
wire   [2:0] empty_41_fu_258_p1;
wire   [31:0] empty_40_fu_232_p1;
wire   [31:0] empty_39_fu_228_p1;
wire   [223:0] tmp_3_fu_244_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_0_address0),
    .ce0(data_0_ce0),
    .we0(data_0_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_1_address0),
    .ce0(data_1_ce0),
    .we0(data_1_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_2_address0),
    .ce0(data_2_ce0),
    .we0(data_2_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_3_address0),
    .ce0(data_3_ce0),
    .we0(data_3_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_4_address0),
    .ce0(data_4_ce0),
    .we0(data_4_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_5_address0),
    .ce0(data_5_ce0),
    .we0(data_5_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_6_address0),
    .ce0(data_6_ce0),
    .we0(data_6_we0),
    .d0(empty_40_fu_232_p1)
);

run_run_Pipeline_2_data_0_RAM_AUTO_0R0W #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
data_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_7_address0),
    .ce0(data_7_ce0),
    .we0(data_7_we0),
    .d0(empty_40_fu_232_p1)
);

run_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            loop_index_fu_76 <= 4'd0;
        end else if (((exitcond544_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            loop_index_fu_76 <= empty_38_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shiftreg_fu_72 <= gmem_load;
        end else if (((exitcond544_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            shiftreg_fu_72 <= tmp_3_cast_fu_254_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln354_reg_286[6 : 0] <= zext_ln354_fu_196_p1[6 : 0];
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_0_ce0 = 1'b1;
    end else begin
        data_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd0))) begin
        data_0_we0 = 1'b1;
    end else begin
        data_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_1_ce0 = 1'b1;
    end else begin
        data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd1))) begin
        data_1_we0 = 1'b1;
    end else begin
        data_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_2_ce0 = 1'b1;
    end else begin
        data_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd2))) begin
        data_2_we0 = 1'b1;
    end else begin
        data_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_3_ce0 = 1'b1;
    end else begin
        data_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd3))) begin
        data_3_we0 = 1'b1;
    end else begin
        data_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_4_ce0 = 1'b1;
    end else begin
        data_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd4))) begin
        data_4_we0 = 1'b1;
    end else begin
        data_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_5_ce0 = 1'b1;
    end else begin
        data_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd5))) begin
        data_5_we0 = 1'b1;
    end else begin
        data_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_6_ce0 = 1'b1;
    end else begin
        data_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd6))) begin
        data_6_we0 = 1'b1;
    end else begin
        data_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_7_ce0 = 1'b1;
    end else begin
        data_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond544_fu_213_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (empty_41_fu_258_p1 == 3'd7))) begin
        data_7_we0 = 1'b1;
    end else begin
        data_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign data_0_address0 = zext_ln354_reg_286;

assign data_1_address0 = zext_ln354_reg_286;

assign data_2_address0 = zext_ln354_reg_286;

assign data_3_address0 = zext_ln354_reg_286;

assign data_4_address0 = zext_ln354_reg_286;

assign data_5_address0 = zext_ln354_reg_286;

assign data_6_address0 = zext_ln354_reg_286;

assign data_7_address0 = zext_ln354_reg_286;

assign empty_38_fu_219_p2 = (loop_index_fu_76 + 4'd1);

assign empty_39_fu_228_p1 = shiftreg_fu_72[31:0];

assign empty_40_fu_232_p1 = empty_39_fu_228_p1;

assign empty_41_fu_258_p1 = loop_index_fu_76[2:0];

assign exitcond544_fu_213_p2 = ((loop_index_fu_76 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_254_p1 = tmp_3_fu_244_p4;

assign tmp_3_fu_244_p4 = {{shiftreg_fu_72[255:32]}};

assign zext_ln354_fu_196_p1 = zext_ln587;

always @ (posedge ap_clk) begin
    zext_ln354_reg_286[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //run_run_Pipeline_2
